
Week12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006328  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  080064c8  080064c8  000164c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006990  08006990  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006990  08006990  00016990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006998  08006998  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006998  08006998  00016998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800699c  0800699c  0001699c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080069a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000078  08006a14  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08006a14  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115ab  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a4  00000000  00000000  0003164f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  000339f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  000349d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182c9  00000000  00000000  000358d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112e0  00000000  00000000  0004db99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c5eb  00000000  00000000  0005ee79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb464  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004804  00000000  00000000  000fb4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080064b0 	.word	0x080064b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080064b0 	.word	0x080064b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2iz>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000610:	d215      	bcs.n	800063e <__aeabi_d2iz+0x36>
 8000612:	d511      	bpl.n	8000638 <__aeabi_d2iz+0x30>
 8000614:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000618:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800061c:	d912      	bls.n	8000644 <__aeabi_d2iz+0x3c>
 800061e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800062a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800062e:	fa23 f002 	lsr.w	r0, r3, r2
 8000632:	bf18      	it	ne
 8000634:	4240      	negne	r0, r0
 8000636:	4770      	bx	lr
 8000638:	f04f 0000 	mov.w	r0, #0
 800063c:	4770      	bx	lr
 800063e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000642:	d105      	bne.n	8000650 <__aeabi_d2iz+0x48>
 8000644:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000648:	bf08      	it	eq
 800064a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b96e 	b.w	800094c <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9d08      	ldr	r5, [sp, #32]
 800068e:	4604      	mov	r4, r0
 8000690:	468c      	mov	ip, r1
 8000692:	2b00      	cmp	r3, #0
 8000694:	f040 8083 	bne.w	800079e <__udivmoddi4+0x116>
 8000698:	428a      	cmp	r2, r1
 800069a:	4617      	mov	r7, r2
 800069c:	d947      	bls.n	800072e <__udivmoddi4+0xa6>
 800069e:	fab2 f282 	clz	r2, r2
 80006a2:	b142      	cbz	r2, 80006b6 <__udivmoddi4+0x2e>
 80006a4:	f1c2 0020 	rsb	r0, r2, #32
 80006a8:	fa24 f000 	lsr.w	r0, r4, r0
 80006ac:	4091      	lsls	r1, r2
 80006ae:	4097      	lsls	r7, r2
 80006b0:	ea40 0c01 	orr.w	ip, r0, r1
 80006b4:	4094      	lsls	r4, r2
 80006b6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006ba:	0c23      	lsrs	r3, r4, #16
 80006bc:	fbbc f6f8 	udiv	r6, ip, r8
 80006c0:	fa1f fe87 	uxth.w	lr, r7
 80006c4:	fb08 c116 	mls	r1, r8, r6, ip
 80006c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006cc:	fb06 f10e 	mul.w	r1, r6, lr
 80006d0:	4299      	cmp	r1, r3
 80006d2:	d909      	bls.n	80006e8 <__udivmoddi4+0x60>
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006da:	f080 8119 	bcs.w	8000910 <__udivmoddi4+0x288>
 80006de:	4299      	cmp	r1, r3
 80006e0:	f240 8116 	bls.w	8000910 <__udivmoddi4+0x288>
 80006e4:	3e02      	subs	r6, #2
 80006e6:	443b      	add	r3, r7
 80006e8:	1a5b      	subs	r3, r3, r1
 80006ea:	b2a4      	uxth	r4, r4
 80006ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80006f0:	fb08 3310 	mls	r3, r8, r0, r3
 80006f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006fc:	45a6      	cmp	lr, r4
 80006fe:	d909      	bls.n	8000714 <__udivmoddi4+0x8c>
 8000700:	193c      	adds	r4, r7, r4
 8000702:	f100 33ff 	add.w	r3, r0, #4294967295
 8000706:	f080 8105 	bcs.w	8000914 <__udivmoddi4+0x28c>
 800070a:	45a6      	cmp	lr, r4
 800070c:	f240 8102 	bls.w	8000914 <__udivmoddi4+0x28c>
 8000710:	3802      	subs	r0, #2
 8000712:	443c      	add	r4, r7
 8000714:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000718:	eba4 040e 	sub.w	r4, r4, lr
 800071c:	2600      	movs	r6, #0
 800071e:	b11d      	cbz	r5, 8000728 <__udivmoddi4+0xa0>
 8000720:	40d4      	lsrs	r4, r2
 8000722:	2300      	movs	r3, #0
 8000724:	e9c5 4300 	strd	r4, r3, [r5]
 8000728:	4631      	mov	r1, r6
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	b902      	cbnz	r2, 8000732 <__udivmoddi4+0xaa>
 8000730:	deff      	udf	#255	; 0xff
 8000732:	fab2 f282 	clz	r2, r2
 8000736:	2a00      	cmp	r2, #0
 8000738:	d150      	bne.n	80007dc <__udivmoddi4+0x154>
 800073a:	1bcb      	subs	r3, r1, r7
 800073c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000740:	fa1f f887 	uxth.w	r8, r7
 8000744:	2601      	movs	r6, #1
 8000746:	fbb3 fcfe 	udiv	ip, r3, lr
 800074a:	0c21      	lsrs	r1, r4, #16
 800074c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000750:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000754:	fb08 f30c 	mul.w	r3, r8, ip
 8000758:	428b      	cmp	r3, r1
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0xe4>
 800075c:	1879      	adds	r1, r7, r1
 800075e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0xe2>
 8000764:	428b      	cmp	r3, r1
 8000766:	f200 80e9 	bhi.w	800093c <__udivmoddi4+0x2b4>
 800076a:	4684      	mov	ip, r0
 800076c:	1ac9      	subs	r1, r1, r3
 800076e:	b2a3      	uxth	r3, r4
 8000770:	fbb1 f0fe 	udiv	r0, r1, lr
 8000774:	fb0e 1110 	mls	r1, lr, r0, r1
 8000778:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800077c:	fb08 f800 	mul.w	r8, r8, r0
 8000780:	45a0      	cmp	r8, r4
 8000782:	d907      	bls.n	8000794 <__udivmoddi4+0x10c>
 8000784:	193c      	adds	r4, r7, r4
 8000786:	f100 33ff 	add.w	r3, r0, #4294967295
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x10a>
 800078c:	45a0      	cmp	r8, r4
 800078e:	f200 80d9 	bhi.w	8000944 <__udivmoddi4+0x2bc>
 8000792:	4618      	mov	r0, r3
 8000794:	eba4 0408 	sub.w	r4, r4, r8
 8000798:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800079c:	e7bf      	b.n	800071e <__udivmoddi4+0x96>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d909      	bls.n	80007b6 <__udivmoddi4+0x12e>
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	f000 80b1 	beq.w	800090a <__udivmoddi4+0x282>
 80007a8:	2600      	movs	r6, #0
 80007aa:	e9c5 0100 	strd	r0, r1, [r5]
 80007ae:	4630      	mov	r0, r6
 80007b0:	4631      	mov	r1, r6
 80007b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b6:	fab3 f683 	clz	r6, r3
 80007ba:	2e00      	cmp	r6, #0
 80007bc:	d14a      	bne.n	8000854 <__udivmoddi4+0x1cc>
 80007be:	428b      	cmp	r3, r1
 80007c0:	d302      	bcc.n	80007c8 <__udivmoddi4+0x140>
 80007c2:	4282      	cmp	r2, r0
 80007c4:	f200 80b8 	bhi.w	8000938 <__udivmoddi4+0x2b0>
 80007c8:	1a84      	subs	r4, r0, r2
 80007ca:	eb61 0103 	sbc.w	r1, r1, r3
 80007ce:	2001      	movs	r0, #1
 80007d0:	468c      	mov	ip, r1
 80007d2:	2d00      	cmp	r5, #0
 80007d4:	d0a8      	beq.n	8000728 <__udivmoddi4+0xa0>
 80007d6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007da:	e7a5      	b.n	8000728 <__udivmoddi4+0xa0>
 80007dc:	f1c2 0320 	rsb	r3, r2, #32
 80007e0:	fa20 f603 	lsr.w	r6, r0, r3
 80007e4:	4097      	lsls	r7, r2
 80007e6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ee:	40d9      	lsrs	r1, r3
 80007f0:	4330      	orrs	r0, r6
 80007f2:	0c03      	lsrs	r3, r0, #16
 80007f4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007f8:	fa1f f887 	uxth.w	r8, r7
 80007fc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000800:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000804:	fb06 f108 	mul.w	r1, r6, r8
 8000808:	4299      	cmp	r1, r3
 800080a:	fa04 f402 	lsl.w	r4, r4, r2
 800080e:	d909      	bls.n	8000824 <__udivmoddi4+0x19c>
 8000810:	18fb      	adds	r3, r7, r3
 8000812:	f106 3cff 	add.w	ip, r6, #4294967295
 8000816:	f080 808d 	bcs.w	8000934 <__udivmoddi4+0x2ac>
 800081a:	4299      	cmp	r1, r3
 800081c:	f240 808a 	bls.w	8000934 <__udivmoddi4+0x2ac>
 8000820:	3e02      	subs	r6, #2
 8000822:	443b      	add	r3, r7
 8000824:	1a5b      	subs	r3, r3, r1
 8000826:	b281      	uxth	r1, r0
 8000828:	fbb3 f0fe 	udiv	r0, r3, lr
 800082c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000830:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000834:	fb00 f308 	mul.w	r3, r0, r8
 8000838:	428b      	cmp	r3, r1
 800083a:	d907      	bls.n	800084c <__udivmoddi4+0x1c4>
 800083c:	1879      	adds	r1, r7, r1
 800083e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000842:	d273      	bcs.n	800092c <__udivmoddi4+0x2a4>
 8000844:	428b      	cmp	r3, r1
 8000846:	d971      	bls.n	800092c <__udivmoddi4+0x2a4>
 8000848:	3802      	subs	r0, #2
 800084a:	4439      	add	r1, r7
 800084c:	1acb      	subs	r3, r1, r3
 800084e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000852:	e778      	b.n	8000746 <__udivmoddi4+0xbe>
 8000854:	f1c6 0c20 	rsb	ip, r6, #32
 8000858:	fa03 f406 	lsl.w	r4, r3, r6
 800085c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000860:	431c      	orrs	r4, r3
 8000862:	fa20 f70c 	lsr.w	r7, r0, ip
 8000866:	fa01 f306 	lsl.w	r3, r1, r6
 800086a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800086e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000872:	431f      	orrs	r7, r3
 8000874:	0c3b      	lsrs	r3, r7, #16
 8000876:	fbb1 f9fe 	udiv	r9, r1, lr
 800087a:	fa1f f884 	uxth.w	r8, r4
 800087e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000882:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000886:	fb09 fa08 	mul.w	sl, r9, r8
 800088a:	458a      	cmp	sl, r1
 800088c:	fa02 f206 	lsl.w	r2, r2, r6
 8000890:	fa00 f306 	lsl.w	r3, r0, r6
 8000894:	d908      	bls.n	80008a8 <__udivmoddi4+0x220>
 8000896:	1861      	adds	r1, r4, r1
 8000898:	f109 30ff 	add.w	r0, r9, #4294967295
 800089c:	d248      	bcs.n	8000930 <__udivmoddi4+0x2a8>
 800089e:	458a      	cmp	sl, r1
 80008a0:	d946      	bls.n	8000930 <__udivmoddi4+0x2a8>
 80008a2:	f1a9 0902 	sub.w	r9, r9, #2
 80008a6:	4421      	add	r1, r4
 80008a8:	eba1 010a 	sub.w	r1, r1, sl
 80008ac:	b2bf      	uxth	r7, r7
 80008ae:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008ba:	fb00 f808 	mul.w	r8, r0, r8
 80008be:	45b8      	cmp	r8, r7
 80008c0:	d907      	bls.n	80008d2 <__udivmoddi4+0x24a>
 80008c2:	19e7      	adds	r7, r4, r7
 80008c4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008c8:	d22e      	bcs.n	8000928 <__udivmoddi4+0x2a0>
 80008ca:	45b8      	cmp	r8, r7
 80008cc:	d92c      	bls.n	8000928 <__udivmoddi4+0x2a0>
 80008ce:	3802      	subs	r0, #2
 80008d0:	4427      	add	r7, r4
 80008d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008d6:	eba7 0708 	sub.w	r7, r7, r8
 80008da:	fba0 8902 	umull	r8, r9, r0, r2
 80008de:	454f      	cmp	r7, r9
 80008e0:	46c6      	mov	lr, r8
 80008e2:	4649      	mov	r1, r9
 80008e4:	d31a      	bcc.n	800091c <__udivmoddi4+0x294>
 80008e6:	d017      	beq.n	8000918 <__udivmoddi4+0x290>
 80008e8:	b15d      	cbz	r5, 8000902 <__udivmoddi4+0x27a>
 80008ea:	ebb3 020e 	subs.w	r2, r3, lr
 80008ee:	eb67 0701 	sbc.w	r7, r7, r1
 80008f2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008f6:	40f2      	lsrs	r2, r6
 80008f8:	ea4c 0202 	orr.w	r2, ip, r2
 80008fc:	40f7      	lsrs	r7, r6
 80008fe:	e9c5 2700 	strd	r2, r7, [r5]
 8000902:	2600      	movs	r6, #0
 8000904:	4631      	mov	r1, r6
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	462e      	mov	r6, r5
 800090c:	4628      	mov	r0, r5
 800090e:	e70b      	b.n	8000728 <__udivmoddi4+0xa0>
 8000910:	4606      	mov	r6, r0
 8000912:	e6e9      	b.n	80006e8 <__udivmoddi4+0x60>
 8000914:	4618      	mov	r0, r3
 8000916:	e6fd      	b.n	8000714 <__udivmoddi4+0x8c>
 8000918:	4543      	cmp	r3, r8
 800091a:	d2e5      	bcs.n	80008e8 <__udivmoddi4+0x260>
 800091c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000920:	eb69 0104 	sbc.w	r1, r9, r4
 8000924:	3801      	subs	r0, #1
 8000926:	e7df      	b.n	80008e8 <__udivmoddi4+0x260>
 8000928:	4608      	mov	r0, r1
 800092a:	e7d2      	b.n	80008d2 <__udivmoddi4+0x24a>
 800092c:	4660      	mov	r0, ip
 800092e:	e78d      	b.n	800084c <__udivmoddi4+0x1c4>
 8000930:	4681      	mov	r9, r0
 8000932:	e7b9      	b.n	80008a8 <__udivmoddi4+0x220>
 8000934:	4666      	mov	r6, ip
 8000936:	e775      	b.n	8000824 <__udivmoddi4+0x19c>
 8000938:	4630      	mov	r0, r6
 800093a:	e74a      	b.n	80007d2 <__udivmoddi4+0x14a>
 800093c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000940:	4439      	add	r1, r7
 8000942:	e713      	b.n	800076c <__udivmoddi4+0xe4>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	e724      	b.n	8000794 <__udivmoddi4+0x10c>
 800094a:	bf00      	nop

0800094c <__aeabi_idiv0>:
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000954:	b0a6      	sub	sp, #152	; 0x98
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f001 fd82 	bl	8002460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f001 f84a 	bl	80019f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f001 f9f4 	bl	8001d4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000964:	f001 f9d2 	bl	8001d0c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000968:	f001 f9a6 	bl	8001cb8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800096c:	f001 f8fc 	bl	8001b68 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000970:	f001 f8a8 	bl	8001ac4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000974:	f001 f930 	bl	8001bd8 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000978:	f001 f97a 	bl	8001c70 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 800097c:	48bf      	ldr	r0, [pc, #764]	; (8000c7c <main+0x32c>)
 800097e:	f004 f9f9 	bl	8004d74 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000982:	48bf      	ldr	r0, [pc, #764]	; (8000c80 <main+0x330>)
 8000984:	f004 fa50 	bl	8004e28 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000988:	2201      	movs	r2, #1
 800098a:	49be      	ldr	r1, [pc, #760]	; (8000c84 <main+0x334>)
 800098c:	48be      	ldr	r0, [pc, #760]	; (8000c88 <main+0x338>)
 800098e:	f001 ff5d 	bl	800284c <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000998:	48bc      	ldr	r0, [pc, #752]	; (8000c8c <main+0x33c>)
 800099a:	f003 f969 	bl	8003c70 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		int16_t inputchar = UARTRecieveIT();
 800099e:	f001 fae9 	bl	8001f74 <UARTRecieveIT>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		static uint64_t timestamp = 0;
		if (micros() - timestamp > 100)
 80009a8:	f001 faca 	bl	8001f40 <micros>
 80009ac:	4bb8      	ldr	r3, [pc, #736]	; (8000c90 <main+0x340>)
 80009ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b2:	ebb0 0802 	subs.w	r8, r0, r2
 80009b6:	eb61 0903 	sbc.w	r9, r1, r3
 80009ba:	f1b9 0f00 	cmp.w	r9, #0
 80009be:	bf08      	it	eq
 80009c0:	f1b8 0f65 	cmpeq.w	r8, #101	; 0x65
 80009c4:	d329      	bcc.n	8000a1a <main+0xca>
		{
			timestamp = micros();
 80009c6:	f001 fabb 	bl	8001f40 <micros>
 80009ca:	4602      	mov	r2, r0
 80009cc:	460b      	mov	r3, r1
 80009ce:	49b0      	ldr	r1, [pc, #704]	; (8000c90 <main+0x340>)
 80009d0:	e9c1 2300 	strd	r2, r3, [r1]
			dataOut++;
 80009d4:	4baf      	ldr	r3, [pc, #700]	; (8000c94 <main+0x344>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4bad      	ldr	r3, [pc, #692]	; (8000c94 <main+0x344>)
 80009de:	801a      	strh	r2, [r3, #0]
			dataOut %= 4096;
 80009e0:	4bac      	ldr	r3, [pc, #688]	; (8000c94 <main+0x344>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	4baa      	ldr	r3, [pc, #680]	; (8000c94 <main+0x344>)
 80009ec:	801a      	strh	r2, [r3, #0]
			if (hspi3.State == HAL_SPI_STATE_READY
 80009ee:	4baa      	ldr	r3, [pc, #680]	; (8000c98 <main+0x348>)
 80009f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d10f      	bne.n	8000a1a <main+0xca>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin) == GPIO_PIN_SET)
 80009fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fe:	48a7      	ldr	r0, [pc, #668]	; (8000c9c <main+0x34c>)
 8000a00:	f003 f91e 	bl	8003c40 <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d107      	bne.n	8000a1a <main+0xca>
			{
				MCP4922SetOutput(DACConfig, dataOut);
 8000a0a:	4ba5      	ldr	r3, [pc, #660]	; (8000ca0 <main+0x350>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	4aa1      	ldr	r2, [pc, #644]	; (8000c94 <main+0x344>)
 8000a10:	8812      	ldrh	r2, [r2, #0]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fa39 	bl	8001e8c <MCP4922SetOutput>
			}
		}
		switch (State)
 8000a1a:	4ba2      	ldr	r3, [pc, #648]	; (8000ca4 <main+0x354>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b29      	cmp	r3, #41	; 0x29
 8000a20:	d8bd      	bhi.n	800099e <main+0x4e>
 8000a22:	a201      	add	r2, pc, #4	; (adr r2, 8000a28 <main+0xd8>)
 8000a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a28:	08000ad1 	.word	0x08000ad1
 8000a2c:	0800099f 	.word	0x0800099f
 8000a30:	0800099f 	.word	0x0800099f
 8000a34:	0800099f 	.word	0x0800099f
 8000a38:	0800099f 	.word	0x0800099f
 8000a3c:	0800099f 	.word	0x0800099f
 8000a40:	0800099f 	.word	0x0800099f
 8000a44:	0800099f 	.word	0x0800099f
 8000a48:	0800099f 	.word	0x0800099f
 8000a4c:	0800099f 	.word	0x0800099f
 8000a50:	08000adb 	.word	0x08000adb
 8000a54:	08000b11 	.word	0x08000b11
 8000a58:	0800099f 	.word	0x0800099f
 8000a5c:	0800099f 	.word	0x0800099f
 8000a60:	0800099f 	.word	0x0800099f
 8000a64:	0800099f 	.word	0x0800099f
 8000a68:	0800099f 	.word	0x0800099f
 8000a6c:	0800099f 	.word	0x0800099f
 8000a70:	0800099f 	.word	0x0800099f
 8000a74:	0800099f 	.word	0x0800099f
 8000a78:	08000b85 	.word	0x08000b85
 8000a7c:	08000bbb 	.word	0x08000bbb
 8000a80:	0800099f 	.word	0x0800099f
 8000a84:	0800099f 	.word	0x0800099f
 8000a88:	0800099f 	.word	0x0800099f
 8000a8c:	0800099f 	.word	0x0800099f
 8000a90:	0800099f 	.word	0x0800099f
 8000a94:	0800099f 	.word	0x0800099f
 8000a98:	0800099f 	.word	0x0800099f
 8000a9c:	0800099f 	.word	0x0800099f
 8000aa0:	08001235 	.word	0x08001235
 8000aa4:	08001295 	.word	0x08001295
 8000aa8:	0800099f 	.word	0x0800099f
 8000aac:	0800099f 	.word	0x0800099f
 8000ab0:	0800099f 	.word	0x0800099f
 8000ab4:	0800099f 	.word	0x0800099f
 8000ab8:	0800099f 	.word	0x0800099f
 8000abc:	0800099f 	.word	0x0800099f
 8000ac0:	0800099f 	.word	0x0800099f
 8000ac4:	0800099f 	.word	0x0800099f
 8000ac8:	0800184b 	.word	0x0800184b
 8000acc:	0800187f 	.word	0x0800187f
		{
			case State_Start:
				State = State_Mainmenu_Print;
 8000ad0:	4b74      	ldr	r3, [pc, #464]	; (8000ca4 <main+0x354>)
 8000ad2:	220a      	movs	r2, #10
 8000ad4:	601a      	str	r2, [r3, #0]
				break;
 8000ad6:	f000 bf7f 	b.w	80019d8 <main+0x1088>
			case State_Mainmenu_Print:
			{
				char temp[] = "***** Main Menu *****\r\n "
 8000ada:	4a73      	ldr	r2, [pc, #460]	; (8000ca8 <main+0x358>)
 8000adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	224d      	movs	r2, #77	; 0x4d
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f005 f8ad 	bl	8005c44 <memcpy>
						"0: Sawtooth wave\r\n "
						"1: Sine wave\r\n "
						"2: Square wave\r\n\r\n";
				 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8000aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fb76 	bl	80001e0 <strlen>
 8000af4:	4603      	mov	r3, r0
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000afc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b00:	486a      	ldr	r0, [pc, #424]	; (8000cac <main+0x35c>)
 8000b02:	f004 fdd0 	bl	80056a6 <HAL_UART_Transmit>
				 State = State_Mainmenu_WaitInput;
 8000b06:	4b67      	ldr	r3, [pc, #412]	; (8000ca4 <main+0x354>)
 8000b08:	220b      	movs	r2, #11
 8000b0a:	601a      	str	r2, [r3, #0]
				 break;
 8000b0c:	f000 bf64 	b.w	80019d8 <main+0x1088>
			}
			case State_Mainmenu_WaitInput:
				switch (inputchar)
 8000b10:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000b14:	2b32      	cmp	r3, #50	; 0x32
 8000b16:	d012      	beq.n	8000b3e <main+0x1ee>
 8000b18:	2b32      	cmp	r3, #50	; 0x32
 8000b1a:	dc14      	bgt.n	8000b46 <main+0x1f6>
 8000b1c:	2b31      	cmp	r3, #49	; 0x31
 8000b1e:	d00a      	beq.n	8000b36 <main+0x1e6>
 8000b20:	2b31      	cmp	r3, #49	; 0x31
 8000b22:	dc10      	bgt.n	8000b46 <main+0x1f6>
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b28:	d029      	beq.n	8000b7e <main+0x22e>
 8000b2a:	2b30      	cmp	r3, #48	; 0x30
 8000b2c:	d10b      	bne.n	8000b46 <main+0x1f6>
					{
						break;
					}
					case '0':  // press 0
					{
						State = State_Menu0_Print;
 8000b2e:	4b5d      	ldr	r3, [pc, #372]	; (8000ca4 <main+0x354>)
 8000b30:	2214      	movs	r2, #20
 8000b32:	601a      	str	r2, [r3, #0]
						break;
 8000b34:	e024      	b.n	8000b80 <main+0x230>
					}
					case '1':  // press 1
					{
						State = State_Menu1_Print;
 8000b36:	4b5b      	ldr	r3, [pc, #364]	; (8000ca4 <main+0x354>)
 8000b38:	221e      	movs	r2, #30
 8000b3a:	601a      	str	r2, [r3, #0]
						break;
 8000b3c:	e020      	b.n	8000b80 <main+0x230>
					}
					case '2':  // press 2
					{
						State = State_Menu2_Print;
 8000b3e:	4b59      	ldr	r3, [pc, #356]	; (8000ca4 <main+0x354>)
 8000b40:	2228      	movs	r2, #40	; 0x28
 8000b42:	601a      	str	r2, [r3, #0]
						break;
 8000b44:	e01c      	b.n	8000b80 <main+0x230>
					}
					default:   // error
					{
						 char temp[] = "***** Please Press again *****\r\n";
 8000b46:	4b5a      	ldr	r3, [pc, #360]	; (8000cb0 <main+0x360>)
 8000b48:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000b4c:	461d      	mov	r5, r3
 8000b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b56:	682b      	ldr	r3, [r5, #0]
 8000b58:	7023      	strb	r3, [r4, #0]
						 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8000b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fb3e 	bl	80001e0 <strlen>
 8000b64:	4603      	mov	r3, r0
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b70:	484e      	ldr	r0, [pc, #312]	; (8000cac <main+0x35c>)
 8000b72:	f004 fd98 	bl	80056a6 <HAL_UART_Transmit>
						 State = State_Mainmenu_Print;
 8000b76:	4b4b      	ldr	r3, [pc, #300]	; (8000ca4 <main+0x354>)
 8000b78:	220a      	movs	r2, #10
 8000b7a:	601a      	str	r2, [r3, #0]
						 break;
 8000b7c:	e000      	b.n	8000b80 <main+0x230>
						break;
 8000b7e:	bf00      	nop
					}
				}
				break;
 8000b80:	f000 bf2a 	b.w	80019d8 <main+0x1088>
			case State_Menu0_Print:
			{
				char temp[] = "***** Mode 0: Sawtooth *****\r\n "
 8000b84:	4a4b      	ldr	r2, [pc, #300]	; (8000cb4 <main+0x364>)
 8000b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	226b      	movs	r2, #107	; 0x6b
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f005 f858 	bl	8005c44 <memcpy>
						"1: frequency\r\n "
						"2: V high\r\n "
						"3: V low\r\n "
						"4: Slope Up/Slope Down\r\n "
						"x: back\r\n \r\n";
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8000b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fb21 	bl	80001e0 <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000baa:	4840      	ldr	r0, [pc, #256]	; (8000cac <main+0x35c>)
 8000bac:	f004 fd7b 	bl	80056a6 <HAL_UART_Transmit>
				State = State_Menu0_WaitInput;
 8000bb0:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <main+0x354>)
 8000bb2:	2215      	movs	r2, #21
 8000bb4:	601a      	str	r2, [r3, #0]
				break;
 8000bb6:	f000 bf0f 	b.w	80019d8 <main+0x1088>
			}
			case State_Menu0_WaitInput:
				switch (inputchar)
 8000bba:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000bbe:	2b78      	cmp	r3, #120	; 0x78
 8000bc0:	f000 8317 	beq.w	80011f2 <main+0x8a2>
 8000bc4:	2b78      	cmp	r3, #120	; 0x78
 8000bc6:	f300 8318 	bgt.w	80011fa <main+0x8aa>
 8000bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bce:	f000 8330 	beq.w	8001232 <main+0x8e2>
 8000bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd6:	f2c0 8310 	blt.w	80011fa <main+0x8aa>
 8000bda:	2b34      	cmp	r3, #52	; 0x34
 8000bdc:	f300 830d 	bgt.w	80011fa <main+0x8aa>
 8000be0:	2b31      	cmp	r3, #49	; 0x31
 8000be2:	f2c0 830a 	blt.w	80011fa <main+0x8aa>
 8000be6:	3b31      	subs	r3, #49	; 0x31
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	f200 8306 	bhi.w	80011fa <main+0x8aa>
 8000bee:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <main+0x2a4>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c05 	.word	0x08000c05
 8000bf8:	08000df3 	.word	0x08000df3
 8000bfc:	08000fcf 	.word	0x08000fcf
 8000c00:	0800117b 	.word	0x0800117b
					{
						break;
					}
					case '1':  // frequency
					{
						char temp[] = "***** Mode 0: Sawtooth_frequency *****\r\n "
 8000c04:	4a2c      	ldr	r2, [pc, #176]	; (8000cb8 <main+0x368>)
 8000c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	2262      	movs	r2, #98	; 0x62
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f005 f818 	bl	8005c44 <memcpy>
						"1: +0.1Hz\r\n ""2: -0.1Hz\r\n ""3: +1Hz\r\n ""4: -1Hz\r\n ""x: back\r\n \r\n";
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8000c14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fae1 	bl	80001e0 <strlen>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	4820      	ldr	r0, [pc, #128]	; (8000cac <main+0x35c>)
 8000c2c:	f004 fd3b 	bl	80056a6 <HAL_UART_Transmit>
						switch(inputchar)
 8000c30:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000c34:	2b78      	cmp	r3, #120	; 0x78
 8000c36:	f000 80bd 	beq.w	8000db4 <main+0x464>
 8000c3a:	2b78      	cmp	r3, #120	; 0x78
 8000c3c:	f300 80be 	bgt.w	8000dbc <main+0x46c>
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c44:	f000 80d3 	beq.w	8000dee <main+0x49e>
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4c:	f2c0 80b6 	blt.w	8000dbc <main+0x46c>
 8000c50:	2b34      	cmp	r3, #52	; 0x34
 8000c52:	f300 80b3 	bgt.w	8000dbc <main+0x46c>
 8000c56:	2b31      	cmp	r3, #49	; 0x31
 8000c58:	f2c0 80b0 	blt.w	8000dbc <main+0x46c>
 8000c5c:	3b31      	subs	r3, #49	; 0x31
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	f200 80ac 	bhi.w	8000dbc <main+0x46c>
 8000c64:	a201      	add	r2, pc, #4	; (adr r2, 8000c6c <main+0x31c>)
 8000c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6a:	bf00      	nop
 8000c6c:	08000cbd 	.word	0x08000cbd
 8000c70:	08000d09 	.word	0x08000d09
 8000c74:	08000d55 	.word	0x08000d55
 8000c78:	08000d85 	.word	0x08000d85
 8000c7c:	20000220 	.word	0x20000220
 8000c80:	20000308 	.word	0x20000308
 8000c84:	200001f0 	.word	0x200001f0
 8000c88:	200002c0 	.word	0x200002c0
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	20000208 	.word	0x20000208
 8000c94:	20000200 	.word	0x20000200
 8000c98:	20000268 	.word	0x20000268
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	200001e0 	.word	0x200001e0
 8000ca8:	08006504 	.word	0x08006504
 8000cac:	200003b0 	.word	0x200003b0
 8000cb0:	08006554 	.word	0x08006554
 8000cb4:	08006578 	.word	0x08006578
 8000cb8:	080065e4 	.word	0x080065e4
							{
								break;
							}
							case '1':  // +0.1Hz
							{
								f += 0.1;
 8000cbc:	4bac      	ldr	r3, [pc, #688]	; (8000f70 <main+0x620>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fc37 	bl	8000534 <__aeabi_i2d>
 8000cc6:	a3a8      	add	r3, pc, #672	; (adr r3, 8000f68 <main+0x618>)
 8000cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ccc:	f7ff fae6 	bl	800029c <__adddf3>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f7ff fc96 	bl	8000608 <__aeabi_d2iz>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4aa4      	ldr	r2, [pc, #656]	; (8000f70 <main+0x620>)
 8000ce0:	6013      	str	r3, [r2, #0]
								sprintf(frequency, "***** frequency: %d Hz *****\r\n", f);
 8000ce2:	4ba3      	ldr	r3, [pc, #652]	; (8000f70 <main+0x620>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	49a2      	ldr	r1, [pc, #648]	; (8000f74 <main+0x624>)
 8000cea:	48a3      	ldr	r0, [pc, #652]	; (8000f78 <main+0x628>)
 8000cec:	f004 ffc0 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)frequency, strlen(frequency), 1000);
 8000cf0:	48a1      	ldr	r0, [pc, #644]	; (8000f78 <main+0x628>)
 8000cf2:	f7ff fa75 	bl	80001e0 <strlen>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	499e      	ldr	r1, [pc, #632]	; (8000f78 <main+0x628>)
 8000d00:	489e      	ldr	r0, [pc, #632]	; (8000f7c <main+0x62c>)
 8000d02:	f004 fcd0 	bl	80056a6 <HAL_UART_Transmit>
								break;
 8000d06:	e073      	b.n	8000df0 <main+0x4a0>
							}
							case '2':  // -0.1Hz
							{
								f -= 0.1;
 8000d08:	4b99      	ldr	r3, [pc, #612]	; (8000f70 <main+0x620>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fc11 	bl	8000534 <__aeabi_i2d>
 8000d12:	a395      	add	r3, pc, #596	; (adr r3, 8000f68 <main+0x618>)
 8000d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d18:	f7ff fabe 	bl	8000298 <__aeabi_dsub>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4610      	mov	r0, r2
 8000d22:	4619      	mov	r1, r3
 8000d24:	f7ff fc70 	bl	8000608 <__aeabi_d2iz>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4a91      	ldr	r2, [pc, #580]	; (8000f70 <main+0x620>)
 8000d2c:	6013      	str	r3, [r2, #0]
								sprintf(frequency, "***** frequency: %d Hz *****\r\n", f);
 8000d2e:	4b90      	ldr	r3, [pc, #576]	; (8000f70 <main+0x620>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	498f      	ldr	r1, [pc, #572]	; (8000f74 <main+0x624>)
 8000d36:	4890      	ldr	r0, [pc, #576]	; (8000f78 <main+0x628>)
 8000d38:	f004 ff9a 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)frequency, strlen(frequency), 1000);
 8000d3c:	488e      	ldr	r0, [pc, #568]	; (8000f78 <main+0x628>)
 8000d3e:	f7ff fa4f 	bl	80001e0 <strlen>
 8000d42:	4603      	mov	r3, r0
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	498b      	ldr	r1, [pc, #556]	; (8000f78 <main+0x628>)
 8000d4c:	488b      	ldr	r0, [pc, #556]	; (8000f7c <main+0x62c>)
 8000d4e:	f004 fcaa 	bl	80056a6 <HAL_UART_Transmit>
								break;
 8000d52:	e04d      	b.n	8000df0 <main+0x4a0>
							}
							case '3':  // +1Hz
							{
								f += 1;
 8000d54:	4b86      	ldr	r3, [pc, #536]	; (8000f70 <main+0x620>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	4a85      	ldr	r2, [pc, #532]	; (8000f70 <main+0x620>)
 8000d5c:	6013      	str	r3, [r2, #0]
								sprintf(frequency, "***** frequency: %d Hz *****\r\n", f);
 8000d5e:	4b84      	ldr	r3, [pc, #528]	; (8000f70 <main+0x620>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	4983      	ldr	r1, [pc, #524]	; (8000f74 <main+0x624>)
 8000d66:	4884      	ldr	r0, [pc, #528]	; (8000f78 <main+0x628>)
 8000d68:	f004 ff82 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)frequency, strlen(frequency), 1000);
 8000d6c:	4882      	ldr	r0, [pc, #520]	; (8000f78 <main+0x628>)
 8000d6e:	f7ff fa37 	bl	80001e0 <strlen>
 8000d72:	4603      	mov	r3, r0
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7a:	497f      	ldr	r1, [pc, #508]	; (8000f78 <main+0x628>)
 8000d7c:	487f      	ldr	r0, [pc, #508]	; (8000f7c <main+0x62c>)
 8000d7e:	f004 fc92 	bl	80056a6 <HAL_UART_Transmit>
								break;
 8000d82:	e035      	b.n	8000df0 <main+0x4a0>
							}
							case '4':  // -1Hz
							{
								f -= 1;
 8000d84:	4b7a      	ldr	r3, [pc, #488]	; (8000f70 <main+0x620>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	4a79      	ldr	r2, [pc, #484]	; (8000f70 <main+0x620>)
 8000d8c:	6013      	str	r3, [r2, #0]
								sprintf(frequency, "***** frequency: %d Hz *****\r\n", f);
 8000d8e:	4b78      	ldr	r3, [pc, #480]	; (8000f70 <main+0x620>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	4977      	ldr	r1, [pc, #476]	; (8000f74 <main+0x624>)
 8000d96:	4878      	ldr	r0, [pc, #480]	; (8000f78 <main+0x628>)
 8000d98:	f004 ff6a 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)frequency, strlen(frequency), 1000);
 8000d9c:	4876      	ldr	r0, [pc, #472]	; (8000f78 <main+0x628>)
 8000d9e:	f7ff fa1f 	bl	80001e0 <strlen>
 8000da2:	4603      	mov	r3, r0
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	4973      	ldr	r1, [pc, #460]	; (8000f78 <main+0x628>)
 8000dac:	4873      	ldr	r0, [pc, #460]	; (8000f7c <main+0x62c>)
 8000dae:	f004 fc7a 	bl	80056a6 <HAL_UART_Transmit>
								break;
 8000db2:	e01d      	b.n	8000df0 <main+0x4a0>
							}
							case 'x':  // back
							{
								State = State_Menu0_Print;
 8000db4:	4b72      	ldr	r3, [pc, #456]	; (8000f80 <main+0x630>)
 8000db6:	2214      	movs	r2, #20
 8000db8:	601a      	str	r2, [r3, #0]
								break;
 8000dba:	e019      	b.n	8000df0 <main+0x4a0>
							}
							default:   // error
							{
								 char temp[] = "***** Please Press again *****\r\n";
 8000dbc:	4b71      	ldr	r3, [pc, #452]	; (8000f84 <main+0x634>)
 8000dbe:	1d3c      	adds	r4, r7, #4
 8000dc0:	461d      	mov	r5, r3
 8000dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dca:	682b      	ldr	r3, [r5, #0]
 8000dcc:	7023      	strb	r3, [r4, #0]
								 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fa05 	bl	80001e0 <strlen>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	1d39      	adds	r1, r7, #4
 8000ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de0:	4866      	ldr	r0, [pc, #408]	; (8000f7c <main+0x62c>)
 8000de2:	f004 fc60 	bl	80056a6 <HAL_UART_Transmit>
								 State = State_Menu0_WaitInput;
 8000de6:	4b66      	ldr	r3, [pc, #408]	; (8000f80 <main+0x630>)
 8000de8:	2215      	movs	r2, #21
 8000dea:	601a      	str	r2, [r3, #0]
								 break;
 8000dec:	e000      	b.n	8000df0 <main+0x4a0>
								break;
 8000dee:	bf00      	nop
							}
						}
						break;
 8000df0:	e220      	b.n	8001234 <main+0x8e4>
					}
					case '2': // V_high
					{
						char temp[] = "***** Mode 0: Sawtooth_V high *****\r\n"
 8000df2:	4a65      	ldr	r2, [pc, #404]	; (8000f88 <main+0x638>)
 8000df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df8:	4611      	mov	r1, r2
 8000dfa:	225a      	movs	r2, #90	; 0x5a
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f004 ff21 	bl	8005c44 <memcpy>
						"1: +0.1V\r\n ""2: -0.1V\r\n ""3: +1V\r\n ""4: -1V\r\n ""x: back\r\n \r\n";
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8000e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff f9ea 	bl	80001e0 <strlen>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000e14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e18:	4858      	ldr	r0, [pc, #352]	; (8000f7c <main+0x62c>)
 8000e1a:	f004 fc44 	bl	80056a6 <HAL_UART_Transmit>
						switch(inputchar)
 8000e1e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000e22:	2b78      	cmp	r3, #120	; 0x78
 8000e24:	f000 809c 	beq.w	8000f60 <main+0x610>
 8000e28:	2b78      	cmp	r3, #120	; 0x78
 8000e2a:	f300 80b5 	bgt.w	8000f98 <main+0x648>
 8000e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e32:	f000 80ca 	beq.w	8000fca <main+0x67a>
 8000e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3a:	f2c0 80ad 	blt.w	8000f98 <main+0x648>
 8000e3e:	2b34      	cmp	r3, #52	; 0x34
 8000e40:	f300 80aa 	bgt.w	8000f98 <main+0x648>
 8000e44:	2b31      	cmp	r3, #49	; 0x31
 8000e46:	f2c0 80a7 	blt.w	8000f98 <main+0x648>
 8000e4a:	3b31      	subs	r3, #49	; 0x31
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	f200 80a3 	bhi.w	8000f98 <main+0x648>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <main+0x508>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000eb5 	.word	0x08000eb5
 8000e60:	08000f01 	.word	0x08000f01
 8000e64:	08000f31 	.word	0x08000f31
							{
								break;
							}
							case '1':  // +0.1v
							{
								Vh += 0.1;
 8000e68:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <main+0x63c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fb61 	bl	8000534 <__aeabi_i2d>
 8000e72:	a33d      	add	r3, pc, #244	; (adr r3, 8000f68 <main+0x618>)
 8000e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e78:	f7ff fa10 	bl	800029c <__adddf3>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff fbc0 	bl	8000608 <__aeabi_d2iz>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4a40      	ldr	r2, [pc, #256]	; (8000f8c <main+0x63c>)
 8000e8c:	6013      	str	r3, [r2, #0]
								sprintf(V_high, "***** V high: %d v *****\r\n", Vh);
 8000e8e:	4b3f      	ldr	r3, [pc, #252]	; (8000f8c <main+0x63c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	493e      	ldr	r1, [pc, #248]	; (8000f90 <main+0x640>)
 8000e96:	483f      	ldr	r0, [pc, #252]	; (8000f94 <main+0x644>)
 8000e98:	f004 feea 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_high, strlen(V_high), 1000);
 8000e9c:	483d      	ldr	r0, [pc, #244]	; (8000f94 <main+0x644>)
 8000e9e:	f7ff f99f 	bl	80001e0 <strlen>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	493a      	ldr	r1, [pc, #232]	; (8000f94 <main+0x644>)
 8000eac:	4833      	ldr	r0, [pc, #204]	; (8000f7c <main+0x62c>)
 8000eae:	f004 fbfa 	bl	80056a6 <HAL_UART_Transmit>
								break;
 8000eb2:	e08b      	b.n	8000fcc <main+0x67c>
							}
							case '2':  // -0.1v
							{
								Vh -= 0.1;
 8000eb4:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <main+0x63c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fb3b 	bl	8000534 <__aeabi_i2d>
 8000ebe:	a32a      	add	r3, pc, #168	; (adr r3, 8000f68 <main+0x618>)
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	f7ff f9e8 	bl	8000298 <__aeabi_dsub>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fb9a 	bl	8000608 <__aeabi_d2iz>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4a2d      	ldr	r2, [pc, #180]	; (8000f8c <main+0x63c>)
 8000ed8:	6013      	str	r3, [r2, #0]
								sprintf(V_high, "***** V high: %d v *****\r\n", Vh);
 8000eda:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <main+0x63c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	492b      	ldr	r1, [pc, #172]	; (8000f90 <main+0x640>)
 8000ee2:	482c      	ldr	r0, [pc, #176]	; (8000f94 <main+0x644>)
 8000ee4:	f004 fec4 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_high, strlen(V_high), 1000);
 8000ee8:	482a      	ldr	r0, [pc, #168]	; (8000f94 <main+0x644>)
 8000eea:	f7ff f979 	bl	80001e0 <strlen>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	4927      	ldr	r1, [pc, #156]	; (8000f94 <main+0x644>)
 8000ef8:	4820      	ldr	r0, [pc, #128]	; (8000f7c <main+0x62c>)
 8000efa:	f004 fbd4 	bl	80056a6 <HAL_UART_Transmit>
								break;
 8000efe:	e065      	b.n	8000fcc <main+0x67c>
							}
							case '3':  // +1v
							{
								Vh += 1;
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <main+0x63c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	4a21      	ldr	r2, [pc, #132]	; (8000f8c <main+0x63c>)
 8000f08:	6013      	str	r3, [r2, #0]
								sprintf(V_high, "***** V high: %d v *****\r\n", Vh);
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <main+0x63c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	491f      	ldr	r1, [pc, #124]	; (8000f90 <main+0x640>)
 8000f12:	4820      	ldr	r0, [pc, #128]	; (8000f94 <main+0x644>)
 8000f14:	f004 feac 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_high, strlen(V_high), 1000);
 8000f18:	481e      	ldr	r0, [pc, #120]	; (8000f94 <main+0x644>)
 8000f1a:	f7ff f961 	bl	80001e0 <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	491b      	ldr	r1, [pc, #108]	; (8000f94 <main+0x644>)
 8000f28:	4814      	ldr	r0, [pc, #80]	; (8000f7c <main+0x62c>)
 8000f2a:	f004 fbbc 	bl	80056a6 <HAL_UART_Transmit>
								break;
 8000f2e:	e04d      	b.n	8000fcc <main+0x67c>
							}
							case '4':  // -1v
							{
								Vh -= 1;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <main+0x63c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <main+0x63c>)
 8000f38:	6013      	str	r3, [r2, #0]
								sprintf(V_high, "***** V high: %d v *****\r\n", Vh);
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <main+0x63c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4913      	ldr	r1, [pc, #76]	; (8000f90 <main+0x640>)
 8000f42:	4814      	ldr	r0, [pc, #80]	; (8000f94 <main+0x644>)
 8000f44:	f004 fe94 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_high, strlen(V_high), 1000);
 8000f48:	4812      	ldr	r0, [pc, #72]	; (8000f94 <main+0x644>)
 8000f4a:	f7ff f949 	bl	80001e0 <strlen>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	490f      	ldr	r1, [pc, #60]	; (8000f94 <main+0x644>)
 8000f58:	4808      	ldr	r0, [pc, #32]	; (8000f7c <main+0x62c>)
 8000f5a:	f004 fba4 	bl	80056a6 <HAL_UART_Transmit>
								break;
 8000f5e:	e035      	b.n	8000fcc <main+0x67c>
							}
							case 'x':  // back
							{
								State = State_Menu0_Print;
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <main+0x630>)
 8000f62:	2214      	movs	r2, #20
 8000f64:	601a      	str	r2, [r3, #0]
								break;
 8000f66:	e031      	b.n	8000fcc <main+0x67c>
 8000f68:	9999999a 	.word	0x9999999a
 8000f6c:	3fb99999 	.word	0x3fb99999
 8000f70:	200001e4 	.word	0x200001e4
 8000f74:	080064c8 	.word	0x080064c8
 8000f78:	200000b4 	.word	0x200000b4
 8000f7c:	200003b0 	.word	0x200003b0
 8000f80:	200001e0 	.word	0x200001e0
 8000f84:	08006554 	.word	0x08006554
 8000f88:	08006648 	.word	0x08006648
 8000f8c:	200001e8 	.word	0x200001e8
 8000f90:	080064e8 	.word	0x080064e8
 8000f94:	20000118 	.word	0x20000118
							}
							default:   // error
							{
								 char temp[] = "***** Please Press again *****\r\n";
 8000f98:	4bb5      	ldr	r3, [pc, #724]	; (8001270 <main+0x920>)
 8000f9a:	1d3c      	adds	r4, r7, #4
 8000f9c:	461d      	mov	r5, r3
 8000f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa6:	682b      	ldr	r3, [r5, #0]
 8000fa8:	7023      	strb	r3, [r4, #0]
								 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff f917 	bl	80001e0 <strlen>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	1d39      	adds	r1, r7, #4
 8000fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbc:	48ad      	ldr	r0, [pc, #692]	; (8001274 <main+0x924>)
 8000fbe:	f004 fb72 	bl	80056a6 <HAL_UART_Transmit>
								 State = State_Menu0_WaitInput;
 8000fc2:	4bad      	ldr	r3, [pc, #692]	; (8001278 <main+0x928>)
 8000fc4:	2215      	movs	r2, #21
 8000fc6:	601a      	str	r2, [r3, #0]
								 break;
 8000fc8:	e000      	b.n	8000fcc <main+0x67c>
								break;
 8000fca:	bf00      	nop
							}
						}
						break;
 8000fcc:	e132      	b.n	8001234 <main+0x8e4>
					}
					case '3': // V_low
					{
						char temp[] = "***** Mode 0: Sawtooth_V high *****\r\n"
 8000fce:	4aab      	ldr	r2, [pc, #684]	; (800127c <main+0x92c>)
 8000fd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	225a      	movs	r2, #90	; 0x5a
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 fe33 	bl	8005c44 <memcpy>
						"1: +0.1V\r\n ""2: -0.1V\r\n ""3: +1V\r\n ""4: -1V\r\n ""x: back\r\n \r\n";
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8000fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff f8fc 	bl	80001e0 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff4:	489f      	ldr	r0, [pc, #636]	; (8001274 <main+0x924>)
 8000ff6:	f004 fb56 	bl	80056a6 <HAL_UART_Transmit>
						switch(inputchar)
 8000ffa:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000ffe:	2b78      	cmp	r3, #120	; 0x78
 8001000:	f000 809c 	beq.w	800113c <main+0x7ec>
 8001004:	2b78      	cmp	r3, #120	; 0x78
 8001006:	f300 809d 	bgt.w	8001144 <main+0x7f4>
 800100a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100e:	f000 80b2 	beq.w	8001176 <main+0x826>
 8001012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001016:	f2c0 8095 	blt.w	8001144 <main+0x7f4>
 800101a:	2b34      	cmp	r3, #52	; 0x34
 800101c:	f300 8092 	bgt.w	8001144 <main+0x7f4>
 8001020:	2b31      	cmp	r3, #49	; 0x31
 8001022:	f2c0 808f 	blt.w	8001144 <main+0x7f4>
 8001026:	3b31      	subs	r3, #49	; 0x31
 8001028:	2b03      	cmp	r3, #3
 800102a:	f200 808b 	bhi.w	8001144 <main+0x7f4>
 800102e:	a201      	add	r2, pc, #4	; (adr r2, 8001034 <main+0x6e4>)
 8001030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001034:	08001045 	.word	0x08001045
 8001038:	08001091 	.word	0x08001091
 800103c:	080010dd 	.word	0x080010dd
 8001040:	0800110d 	.word	0x0800110d
							{
								break;
							}
							case '1':  // +0.1v
							{
								Vl += 0.1;
 8001044:	4b8e      	ldr	r3, [pc, #568]	; (8001280 <main+0x930>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa73 	bl	8000534 <__aeabi_i2d>
 800104e:	a386      	add	r3, pc, #536	; (adr r3, 8001268 <main+0x918>)
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	f7ff f922 	bl	800029c <__adddf3>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fad2 	bl	8000608 <__aeabi_d2iz>
 8001064:	4603      	mov	r3, r0
 8001066:	4a86      	ldr	r2, [pc, #536]	; (8001280 <main+0x930>)
 8001068:	6013      	str	r3, [r2, #0]
								sprintf(V_low, "***** V high: %d v *****\r\n", Vl);
 800106a:	4b85      	ldr	r3, [pc, #532]	; (8001280 <main+0x930>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	4984      	ldr	r1, [pc, #528]	; (8001284 <main+0x934>)
 8001072:	4885      	ldr	r0, [pc, #532]	; (8001288 <main+0x938>)
 8001074:	f004 fdfc 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_low, strlen(V_low), 1000);
 8001078:	4883      	ldr	r0, [pc, #524]	; (8001288 <main+0x938>)
 800107a:	f7ff f8b1 	bl	80001e0 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	4980      	ldr	r1, [pc, #512]	; (8001288 <main+0x938>)
 8001088:	487a      	ldr	r0, [pc, #488]	; (8001274 <main+0x924>)
 800108a:	f004 fb0c 	bl	80056a6 <HAL_UART_Transmit>
								break;
 800108e:	e073      	b.n	8001178 <main+0x828>
							}
							case '2':  // -0.1v
							{
								Vl -= 0.1;
 8001090:	4b7b      	ldr	r3, [pc, #492]	; (8001280 <main+0x930>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa4d 	bl	8000534 <__aeabi_i2d>
 800109a:	a373      	add	r3, pc, #460	; (adr r3, 8001268 <main+0x918>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff f8fa 	bl	8000298 <__aeabi_dsub>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff faac 	bl	8000608 <__aeabi_d2iz>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a73      	ldr	r2, [pc, #460]	; (8001280 <main+0x930>)
 80010b4:	6013      	str	r3, [r2, #0]
								sprintf(V_low, "***** V high: %d v *****\r\n", Vl);
 80010b6:	4b72      	ldr	r3, [pc, #456]	; (8001280 <main+0x930>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4971      	ldr	r1, [pc, #452]	; (8001284 <main+0x934>)
 80010be:	4872      	ldr	r0, [pc, #456]	; (8001288 <main+0x938>)
 80010c0:	f004 fdd6 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_low, strlen(V_low), 1000);
 80010c4:	4870      	ldr	r0, [pc, #448]	; (8001288 <main+0x938>)
 80010c6:	f7ff f88b 	bl	80001e0 <strlen>
 80010ca:	4603      	mov	r3, r0
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	496d      	ldr	r1, [pc, #436]	; (8001288 <main+0x938>)
 80010d4:	4867      	ldr	r0, [pc, #412]	; (8001274 <main+0x924>)
 80010d6:	f004 fae6 	bl	80056a6 <HAL_UART_Transmit>
								break;
 80010da:	e04d      	b.n	8001178 <main+0x828>
							}
							case '3':  // +1v
							{
								Vl += 1;
 80010dc:	4b68      	ldr	r3, [pc, #416]	; (8001280 <main+0x930>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	4a67      	ldr	r2, [pc, #412]	; (8001280 <main+0x930>)
 80010e4:	6013      	str	r3, [r2, #0]
								sprintf(V_low, "***** V high: %d v *****\r\n", Vl);
 80010e6:	4b66      	ldr	r3, [pc, #408]	; (8001280 <main+0x930>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	4965      	ldr	r1, [pc, #404]	; (8001284 <main+0x934>)
 80010ee:	4866      	ldr	r0, [pc, #408]	; (8001288 <main+0x938>)
 80010f0:	f004 fdbe 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_low, strlen(V_low), 1000);
 80010f4:	4864      	ldr	r0, [pc, #400]	; (8001288 <main+0x938>)
 80010f6:	f7ff f873 	bl	80001e0 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	4961      	ldr	r1, [pc, #388]	; (8001288 <main+0x938>)
 8001104:	485b      	ldr	r0, [pc, #364]	; (8001274 <main+0x924>)
 8001106:	f004 face 	bl	80056a6 <HAL_UART_Transmit>
								break;
 800110a:	e035      	b.n	8001178 <main+0x828>
							}
							case '4':  // -1v
							{
								Vl -= 1;
 800110c:	4b5c      	ldr	r3, [pc, #368]	; (8001280 <main+0x930>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3b01      	subs	r3, #1
 8001112:	4a5b      	ldr	r2, [pc, #364]	; (8001280 <main+0x930>)
 8001114:	6013      	str	r3, [r2, #0]
								sprintf(V_low, "***** V high: %d v *****\r\n", Vl);
 8001116:	4b5a      	ldr	r3, [pc, #360]	; (8001280 <main+0x930>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	4959      	ldr	r1, [pc, #356]	; (8001284 <main+0x934>)
 800111e:	485a      	ldr	r0, [pc, #360]	; (8001288 <main+0x938>)
 8001120:	f004 fda6 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_low, strlen(V_low), 1000);
 8001124:	4858      	ldr	r0, [pc, #352]	; (8001288 <main+0x938>)
 8001126:	f7ff f85b 	bl	80001e0 <strlen>
 800112a:	4603      	mov	r3, r0
 800112c:	b29a      	uxth	r2, r3
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	4955      	ldr	r1, [pc, #340]	; (8001288 <main+0x938>)
 8001134:	484f      	ldr	r0, [pc, #316]	; (8001274 <main+0x924>)
 8001136:	f004 fab6 	bl	80056a6 <HAL_UART_Transmit>
								break;
 800113a:	e01d      	b.n	8001178 <main+0x828>
							}
							case 'x':  // back
							{
								State = State_Menu0_Print;
 800113c:	4b4e      	ldr	r3, [pc, #312]	; (8001278 <main+0x928>)
 800113e:	2214      	movs	r2, #20
 8001140:	601a      	str	r2, [r3, #0]
								break;
 8001142:	e019      	b.n	8001178 <main+0x828>
							}
							default:   // error
							{
								 char temp[] = "***** Please Press again *****\r\n";
 8001144:	4b4a      	ldr	r3, [pc, #296]	; (8001270 <main+0x920>)
 8001146:	1d3c      	adds	r4, r7, #4
 8001148:	461d      	mov	r5, r3
 800114a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001152:	682b      	ldr	r3, [r5, #0]
 8001154:	7023      	strb	r3, [r4, #0]
								 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f841 	bl	80001e0 <strlen>
 800115e:	4603      	mov	r3, r0
 8001160:	b29a      	uxth	r2, r3
 8001162:	1d39      	adds	r1, r7, #4
 8001164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001168:	4842      	ldr	r0, [pc, #264]	; (8001274 <main+0x924>)
 800116a:	f004 fa9c 	bl	80056a6 <HAL_UART_Transmit>
								 State = State_Menu0_WaitInput;
 800116e:	4b42      	ldr	r3, [pc, #264]	; (8001278 <main+0x928>)
 8001170:	2215      	movs	r2, #21
 8001172:	601a      	str	r2, [r3, #0]
								 break;
 8001174:	e000      	b.n	8001178 <main+0x828>
								break;
 8001176:	bf00      	nop
							}
						}
						break;
 8001178:	e05c      	b.n	8001234 <main+0x8e4>
					}
					case '4': // Slope Up/Slope Down
					{
						char temp[] = "***** Mode 0: Sawtooth_Slope Up/Slope Down *****\r\n "
 800117a:	4a44      	ldr	r2, [pc, #272]	; (800128c <main+0x93c>)
 800117c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001180:	4611      	mov	r1, r2
 8001182:	2259      	movs	r2, #89	; 0x59
 8001184:	4618      	mov	r0, r3
 8001186:	f004 fd5d 	bl	8005c44 <memcpy>
														"1: Slope Up/Slope Down\r\n "
														"x: back\r\n \r\n";
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 800118a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f826 	bl	80001e0 <strlen>
 8001194:	4603      	mov	r3, r0
 8001196:	b29a      	uxth	r2, r3
 8001198:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800119c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a0:	4834      	ldr	r0, [pc, #208]	; (8001274 <main+0x924>)
 80011a2:	f004 fa80 	bl	80056a6 <HAL_UART_Transmit>
						switch(inputchar)
 80011a6:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80011aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ae:	d01e      	beq.n	80011ee <main+0x89e>
 80011b0:	2b78      	cmp	r3, #120	; 0x78
 80011b2:	d103      	bne.n	80011bc <main+0x86c>
//								HAL_UART_Transmit(&huart2, (uint8_t*)V_low, strlen(V_low), 1000);
//								break;
//							}
							case 'x':  // back
							{
								State = State_Menu0_Print;
 80011b4:	4b30      	ldr	r3, [pc, #192]	; (8001278 <main+0x928>)
 80011b6:	2214      	movs	r2, #20
 80011b8:	601a      	str	r2, [r3, #0]
								break;
 80011ba:	e019      	b.n	80011f0 <main+0x8a0>
							}
							default:   // error
							{
								 char temp[] = "***** Please Press again *****\r\n";
 80011bc:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <main+0x920>)
 80011be:	1d3c      	adds	r4, r7, #4
 80011c0:	461d      	mov	r5, r3
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ca:	682b      	ldr	r3, [r5, #0]
 80011cc:	7023      	strb	r3, [r4, #0]
								 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f805 	bl	80001e0 <strlen>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b29a      	uxth	r2, r3
 80011da:	1d39      	adds	r1, r7, #4
 80011dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e0:	4824      	ldr	r0, [pc, #144]	; (8001274 <main+0x924>)
 80011e2:	f004 fa60 	bl	80056a6 <HAL_UART_Transmit>
								 State = State_Menu0_WaitInput;
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <main+0x928>)
 80011e8:	2215      	movs	r2, #21
 80011ea:	601a      	str	r2, [r3, #0]
								 break;
 80011ec:	e000      	b.n	80011f0 <main+0x8a0>
								break;
 80011ee:	bf00      	nop
							}
						}
						break;
 80011f0:	e020      	b.n	8001234 <main+0x8e4>
					}
					case 'x':  // back
					{
						State = State_Mainmenu_Print;
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <main+0x928>)
 80011f4:	220a      	movs	r2, #10
 80011f6:	601a      	str	r2, [r3, #0]
						break;
 80011f8:	e01c      	b.n	8001234 <main+0x8e4>
					}
					default:   // error
					{
						 char temp[] = "***** Please Press again *****\r\n";
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <main+0x920>)
 80011fc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001200:	461d      	mov	r5, r3
 8001202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120a:	682b      	ldr	r3, [r5, #0]
 800120c:	7023      	strb	r3, [r4, #0]
						 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 800120e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001212:	4618      	mov	r0, r3
 8001214:	f7fe ffe4 	bl	80001e0 <strlen>
 8001218:	4603      	mov	r3, r0
 800121a:	b29a      	uxth	r2, r3
 800121c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001224:	4813      	ldr	r0, [pc, #76]	; (8001274 <main+0x924>)
 8001226:	f004 fa3e 	bl	80056a6 <HAL_UART_Transmit>
						 State = State_Menu0_Print;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <main+0x928>)
 800122c:	2214      	movs	r2, #20
 800122e:	601a      	str	r2, [r3, #0]
						 break;
 8001230:	e000      	b.n	8001234 <main+0x8e4>
						break;
 8001232:	bf00      	nop
					}
				}
			case State_Menu1_Print:
			{
				char temp[] = "***** Mode 1: Sine wave *****\r\n "
 8001234:	4a16      	ldr	r2, [pc, #88]	; (8001290 <main+0x940>)
 8001236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123a:	4611      	mov	r1, r2
 800123c:	2253      	movs	r2, #83	; 0x53
 800123e:	4618      	mov	r0, r3
 8001240:	f004 fd00 	bl	8005c44 <memcpy>
						"1: frequency\r\n "
						"2: V high\r\n "
						"3: V low\r\n x: back\r\n \r\n";
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ffc9 	bl	80001e0 <strlen>
 800124e:	4603      	mov	r3, r0
 8001250:	b29a      	uxth	r2, r3
 8001252:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <main+0x924>)
 800125c:	f004 fa23 	bl	80056a6 <HAL_UART_Transmit>
				State = State_Menu1_WaitInput;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <main+0x928>)
 8001262:	221f      	movs	r2, #31
 8001264:	601a      	str	r2, [r3, #0]
				break;
 8001266:	e3b7      	b.n	80019d8 <main+0x1088>
 8001268:	9999999a 	.word	0x9999999a
 800126c:	3fb99999 	.word	0x3fb99999
 8001270:	08006554 	.word	0x08006554
 8001274:	200003b0 	.word	0x200003b0
 8001278:	200001e0 	.word	0x200001e0
 800127c:	08006648 	.word	0x08006648
 8001280:	200001ec 	.word	0x200001ec
 8001284:	080064e8 	.word	0x080064e8
 8001288:	2000017c 	.word	0x2000017c
 800128c:	080066a4 	.word	0x080066a4
 8001290:	08006700 	.word	0x08006700
			}
			case State_Menu1_WaitInput:
				switch (inputchar)
 8001294:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001298:	2b78      	cmp	r3, #120	; 0x78
 800129a:	f000 82b4 	beq.w	8001806 <main+0xeb6>
 800129e:	2b78      	cmp	r3, #120	; 0x78
 80012a0:	f300 82b5 	bgt.w	800180e <main+0xebe>
 80012a4:	2b33      	cmp	r3, #51	; 0x33
 80012a6:	f000 81d8 	beq.w	800165a <main+0xd0a>
 80012aa:	2b33      	cmp	r3, #51	; 0x33
 80012ac:	f300 82af 	bgt.w	800180e <main+0xebe>
 80012b0:	2b32      	cmp	r3, #50	; 0x32
 80012b2:	f000 80e0 	beq.w	8001476 <main+0xb26>
 80012b6:	2b32      	cmp	r3, #50	; 0x32
 80012b8:	f300 82a9 	bgt.w	800180e <main+0xebe>
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	f000 82c1 	beq.w	8001846 <main+0xef6>
 80012c4:	2b31      	cmp	r3, #49	; 0x31
 80012c6:	f040 82a2 	bne.w	800180e <main+0xebe>
					{
						break;
					}
					case '1':  // frequency
					{
						char temp[] = "***** Mode 1: Sine wave_frequency *****\r\n "
 80012ca:	4abd      	ldr	r2, [pc, #756]	; (80015c0 <main+0xc70>)
 80012cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d0:	4611      	mov	r1, r2
 80012d2:	2263      	movs	r2, #99	; 0x63
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 fcb5 	bl	8005c44 <memcpy>
						"1: +0.1Hz\r\n ""2: -0.1Hz\r\n ""3: +1Hz\r\n ""4: -1Hz\r\n ""x: back\r\n \r\n";
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 80012da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012de:	4618      	mov	r0, r3
 80012e0:	f7fe ff7e 	bl	80001e0 <strlen>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f0:	48b4      	ldr	r0, [pc, #720]	; (80015c4 <main+0xc74>)
 80012f2:	f004 f9d8 	bl	80056a6 <HAL_UART_Transmit>
						switch(inputchar)
 80012f6:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80012fa:	2b78      	cmp	r3, #120	; 0x78
 80012fc:	f000 809c 	beq.w	8001438 <main+0xae8>
 8001300:	2b78      	cmp	r3, #120	; 0x78
 8001302:	f300 809d 	bgt.w	8001440 <main+0xaf0>
 8001306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800130a:	f000 80b2 	beq.w	8001472 <main+0xb22>
 800130e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001312:	f2c0 8095 	blt.w	8001440 <main+0xaf0>
 8001316:	2b34      	cmp	r3, #52	; 0x34
 8001318:	f300 8092 	bgt.w	8001440 <main+0xaf0>
 800131c:	2b31      	cmp	r3, #49	; 0x31
 800131e:	f2c0 808f 	blt.w	8001440 <main+0xaf0>
 8001322:	3b31      	subs	r3, #49	; 0x31
 8001324:	2b03      	cmp	r3, #3
 8001326:	f200 808b 	bhi.w	8001440 <main+0xaf0>
 800132a:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <main+0x9e0>)
 800132c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001330:	08001341 	.word	0x08001341
 8001334:	0800138d 	.word	0x0800138d
 8001338:	080013d9 	.word	0x080013d9
 800133c:	08001409 	.word	0x08001409
							{
								break;
							}
							case '1':  // +0.1Hz
							{
								f += 0.1;
 8001340:	4ba1      	ldr	r3, [pc, #644]	; (80015c8 <main+0xc78>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8f5 	bl	8000534 <__aeabi_i2d>
 800134a:	a39b      	add	r3, pc, #620	; (adr r3, 80015b8 <main+0xc68>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7fe ffa4 	bl	800029c <__adddf3>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff f954 	bl	8000608 <__aeabi_d2iz>
 8001360:	4603      	mov	r3, r0
 8001362:	4a99      	ldr	r2, [pc, #612]	; (80015c8 <main+0xc78>)
 8001364:	6013      	str	r3, [r2, #0]
								sprintf(frequency, "***** frequency: %d Hz *****\r\n", f);
 8001366:	4b98      	ldr	r3, [pc, #608]	; (80015c8 <main+0xc78>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	4997      	ldr	r1, [pc, #604]	; (80015cc <main+0xc7c>)
 800136e:	4898      	ldr	r0, [pc, #608]	; (80015d0 <main+0xc80>)
 8001370:	f004 fc7e 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)frequency, strlen(frequency), 1000);
 8001374:	4896      	ldr	r0, [pc, #600]	; (80015d0 <main+0xc80>)
 8001376:	f7fe ff33 	bl	80001e0 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	4993      	ldr	r1, [pc, #588]	; (80015d0 <main+0xc80>)
 8001384:	488f      	ldr	r0, [pc, #572]	; (80015c4 <main+0xc74>)
 8001386:	f004 f98e 	bl	80056a6 <HAL_UART_Transmit>
								break;
 800138a:	e073      	b.n	8001474 <main+0xb24>
							}
							case '2':  // -0.1Hz
							{
								f -= 0.1;
 800138c:	4b8e      	ldr	r3, [pc, #568]	; (80015c8 <main+0xc78>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f8cf 	bl	8000534 <__aeabi_i2d>
 8001396:	a388      	add	r3, pc, #544	; (adr r3, 80015b8 <main+0xc68>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7fe ff7c 	bl	8000298 <__aeabi_dsub>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff f92e 	bl	8000608 <__aeabi_d2iz>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4a86      	ldr	r2, [pc, #536]	; (80015c8 <main+0xc78>)
 80013b0:	6013      	str	r3, [r2, #0]
								sprintf(frequency, "***** frequency: %d Hz *****\r\n", f);
 80013b2:	4b85      	ldr	r3, [pc, #532]	; (80015c8 <main+0xc78>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4984      	ldr	r1, [pc, #528]	; (80015cc <main+0xc7c>)
 80013ba:	4885      	ldr	r0, [pc, #532]	; (80015d0 <main+0xc80>)
 80013bc:	f004 fc58 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)frequency, strlen(frequency), 1000);
 80013c0:	4883      	ldr	r0, [pc, #524]	; (80015d0 <main+0xc80>)
 80013c2:	f7fe ff0d 	bl	80001e0 <strlen>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	4980      	ldr	r1, [pc, #512]	; (80015d0 <main+0xc80>)
 80013d0:	487c      	ldr	r0, [pc, #496]	; (80015c4 <main+0xc74>)
 80013d2:	f004 f968 	bl	80056a6 <HAL_UART_Transmit>
								break;
 80013d6:	e04d      	b.n	8001474 <main+0xb24>
							}
							case '3':  // +1Hz
							{
								f += 1;
 80013d8:	4b7b      	ldr	r3, [pc, #492]	; (80015c8 <main+0xc78>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3301      	adds	r3, #1
 80013de:	4a7a      	ldr	r2, [pc, #488]	; (80015c8 <main+0xc78>)
 80013e0:	6013      	str	r3, [r2, #0]
								sprintf(frequency, "***** frequency: %d Hz *****\r\n", f);
 80013e2:	4b79      	ldr	r3, [pc, #484]	; (80015c8 <main+0xc78>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4978      	ldr	r1, [pc, #480]	; (80015cc <main+0xc7c>)
 80013ea:	4879      	ldr	r0, [pc, #484]	; (80015d0 <main+0xc80>)
 80013ec:	f004 fc40 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)frequency, strlen(frequency), 1000);
 80013f0:	4877      	ldr	r0, [pc, #476]	; (80015d0 <main+0xc80>)
 80013f2:	f7fe fef5 	bl	80001e0 <strlen>
 80013f6:	4603      	mov	r3, r0
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	4974      	ldr	r1, [pc, #464]	; (80015d0 <main+0xc80>)
 8001400:	4870      	ldr	r0, [pc, #448]	; (80015c4 <main+0xc74>)
 8001402:	f004 f950 	bl	80056a6 <HAL_UART_Transmit>
								break;
 8001406:	e035      	b.n	8001474 <main+0xb24>
							}
							case '4':  // -1Hz
							{
								f -= 1;
 8001408:	4b6f      	ldr	r3, [pc, #444]	; (80015c8 <main+0xc78>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3b01      	subs	r3, #1
 800140e:	4a6e      	ldr	r2, [pc, #440]	; (80015c8 <main+0xc78>)
 8001410:	6013      	str	r3, [r2, #0]
								sprintf(frequency, "***** frequency: %d Hz *****\r\n", f);
 8001412:	4b6d      	ldr	r3, [pc, #436]	; (80015c8 <main+0xc78>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	496c      	ldr	r1, [pc, #432]	; (80015cc <main+0xc7c>)
 800141a:	486d      	ldr	r0, [pc, #436]	; (80015d0 <main+0xc80>)
 800141c:	f004 fc28 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)frequency, strlen(frequency), 1000);
 8001420:	486b      	ldr	r0, [pc, #428]	; (80015d0 <main+0xc80>)
 8001422:	f7fe fedd 	bl	80001e0 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	4968      	ldr	r1, [pc, #416]	; (80015d0 <main+0xc80>)
 8001430:	4864      	ldr	r0, [pc, #400]	; (80015c4 <main+0xc74>)
 8001432:	f004 f938 	bl	80056a6 <HAL_UART_Transmit>
								break;
 8001436:	e01d      	b.n	8001474 <main+0xb24>
							}
							case 'x':  // back
							{
								State = State_Menu1_Print;
 8001438:	4b66      	ldr	r3, [pc, #408]	; (80015d4 <main+0xc84>)
 800143a:	221e      	movs	r2, #30
 800143c:	601a      	str	r2, [r3, #0]
								break;
 800143e:	e019      	b.n	8001474 <main+0xb24>
							}
							default:   // error
							{
								 char temp[] = "***** Please Press again *****\r\n";
 8001440:	4b65      	ldr	r3, [pc, #404]	; (80015d8 <main+0xc88>)
 8001442:	1d3c      	adds	r4, r7, #4
 8001444:	461d      	mov	r5, r3
 8001446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144e:	682b      	ldr	r3, [r5, #0]
 8001450:	7023      	strb	r3, [r4, #0]
								 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe fec3 	bl	80001e0 <strlen>
 800145a:	4603      	mov	r3, r0
 800145c:	b29a      	uxth	r2, r3
 800145e:	1d39      	adds	r1, r7, #4
 8001460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001464:	4857      	ldr	r0, [pc, #348]	; (80015c4 <main+0xc74>)
 8001466:	f004 f91e 	bl	80056a6 <HAL_UART_Transmit>
								 State = State_Menu1_WaitInput;
 800146a:	4b5a      	ldr	r3, [pc, #360]	; (80015d4 <main+0xc84>)
 800146c:	221f      	movs	r2, #31
 800146e:	601a      	str	r2, [r3, #0]
								 break;
 8001470:	e000      	b.n	8001474 <main+0xb24>
								break;
 8001472:	bf00      	nop
							}
						}
						break;
 8001474:	e1e8      	b.n	8001848 <main+0xef8>
					}
					case '2': // V_high
					{
						char temp[] = "***** Mode 1: Sine wave_V high *****\r\n"
 8001476:	4a59      	ldr	r2, [pc, #356]	; (80015dc <main+0xc8c>)
 8001478:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147c:	4611      	mov	r1, r2
 800147e:	225b      	movs	r2, #91	; 0x5b
 8001480:	4618      	mov	r0, r3
 8001482:	f004 fbdf 	bl	8005c44 <memcpy>
						"1: +0.1V\r\n ""2: -0.1V\r\n ""3: +1V\r\n ""4: -1V\r\n ""x: back\r\n \r\n";
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe fea8 	bl	80001e0 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149c:	4849      	ldr	r0, [pc, #292]	; (80015c4 <main+0xc74>)
 800149e:	f004 f902 	bl	80056a6 <HAL_UART_Transmit>
						switch(inputchar)
 80014a2:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80014a6:	2b78      	cmp	r3, #120	; 0x78
 80014a8:	f000 80b8 	beq.w	800161c <main+0xccc>
 80014ac:	2b78      	cmp	r3, #120	; 0x78
 80014ae:	f300 80b9 	bgt.w	8001624 <main+0xcd4>
 80014b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b6:	f000 80ce 	beq.w	8001656 <main+0xd06>
 80014ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014be:	f2c0 80b1 	blt.w	8001624 <main+0xcd4>
 80014c2:	2b34      	cmp	r3, #52	; 0x34
 80014c4:	f300 80ae 	bgt.w	8001624 <main+0xcd4>
 80014c8:	2b31      	cmp	r3, #49	; 0x31
 80014ca:	f2c0 80ab 	blt.w	8001624 <main+0xcd4>
 80014ce:	3b31      	subs	r3, #49	; 0x31
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	f200 80a7 	bhi.w	8001624 <main+0xcd4>
 80014d6:	a201      	add	r2, pc, #4	; (adr r2, 80014dc <main+0xb8c>)
 80014d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014dc:	080014ed 	.word	0x080014ed
 80014e0:	08001539 	.word	0x08001539
 80014e4:	08001585 	.word	0x08001585
 80014e8:	080015ed 	.word	0x080015ed
							{
								break;
							}
							case '1':  // +0.1v
							{
								Vh += 0.1;
 80014ec:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <main+0xc90>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f81f 	bl	8000534 <__aeabi_i2d>
 80014f6:	a330      	add	r3, pc, #192	; (adr r3, 80015b8 <main+0xc68>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7fe fece 	bl	800029c <__adddf3>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff f87e 	bl	8000608 <__aeabi_d2iz>
 800150c:	4603      	mov	r3, r0
 800150e:	4a34      	ldr	r2, [pc, #208]	; (80015e0 <main+0xc90>)
 8001510:	6013      	str	r3, [r2, #0]
								sprintf(V_high, "***** V high: %d v *****\r\n", Vh);
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <main+0xc90>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	4932      	ldr	r1, [pc, #200]	; (80015e4 <main+0xc94>)
 800151a:	4833      	ldr	r0, [pc, #204]	; (80015e8 <main+0xc98>)
 800151c:	f004 fba8 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_high, strlen(V_high), 1000);
 8001520:	4831      	ldr	r0, [pc, #196]	; (80015e8 <main+0xc98>)
 8001522:	f7fe fe5d 	bl	80001e0 <strlen>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	492e      	ldr	r1, [pc, #184]	; (80015e8 <main+0xc98>)
 8001530:	4824      	ldr	r0, [pc, #144]	; (80015c4 <main+0xc74>)
 8001532:	f004 f8b8 	bl	80056a6 <HAL_UART_Transmit>
								break;
 8001536:	e08f      	b.n	8001658 <main+0xd08>
							}
							case '2':  // -0.1v
							{
								Vh -= 0.1;
 8001538:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <main+0xc90>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fff9 	bl	8000534 <__aeabi_i2d>
 8001542:	a31d      	add	r3, pc, #116	; (adr r3, 80015b8 <main+0xc68>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7fe fea6 	bl	8000298 <__aeabi_dsub>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff f858 	bl	8000608 <__aeabi_d2iz>
 8001558:	4603      	mov	r3, r0
 800155a:	4a21      	ldr	r2, [pc, #132]	; (80015e0 <main+0xc90>)
 800155c:	6013      	str	r3, [r2, #0]
								sprintf(V_high, "***** V high: %d v *****\r\n", Vh);
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <main+0xc90>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	491f      	ldr	r1, [pc, #124]	; (80015e4 <main+0xc94>)
 8001566:	4820      	ldr	r0, [pc, #128]	; (80015e8 <main+0xc98>)
 8001568:	f004 fb82 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_high, strlen(V_high), 1000);
 800156c:	481e      	ldr	r0, [pc, #120]	; (80015e8 <main+0xc98>)
 800156e:	f7fe fe37 	bl	80001e0 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	b29a      	uxth	r2, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	491b      	ldr	r1, [pc, #108]	; (80015e8 <main+0xc98>)
 800157c:	4811      	ldr	r0, [pc, #68]	; (80015c4 <main+0xc74>)
 800157e:	f004 f892 	bl	80056a6 <HAL_UART_Transmit>
								break;
 8001582:	e069      	b.n	8001658 <main+0xd08>
							}
							case '3':  // +1v
							{
								Vh += 1;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <main+0xc90>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	4a15      	ldr	r2, [pc, #84]	; (80015e0 <main+0xc90>)
 800158c:	6013      	str	r3, [r2, #0]
								sprintf(V_high, "***** V high: %d v *****\r\n", Vh);
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <main+0xc90>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	4913      	ldr	r1, [pc, #76]	; (80015e4 <main+0xc94>)
 8001596:	4814      	ldr	r0, [pc, #80]	; (80015e8 <main+0xc98>)
 8001598:	f004 fb6a 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_high, strlen(V_high), 1000);
 800159c:	4812      	ldr	r0, [pc, #72]	; (80015e8 <main+0xc98>)
 800159e:	f7fe fe1f 	bl	80001e0 <strlen>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015aa:	490f      	ldr	r1, [pc, #60]	; (80015e8 <main+0xc98>)
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <main+0xc74>)
 80015ae:	f004 f87a 	bl	80056a6 <HAL_UART_Transmit>
								break;
 80015b2:	e051      	b.n	8001658 <main+0xd08>
 80015b4:	f3af 8000 	nop.w
 80015b8:	9999999a 	.word	0x9999999a
 80015bc:	3fb99999 	.word	0x3fb99999
 80015c0:	08006754 	.word	0x08006754
 80015c4:	200003b0 	.word	0x200003b0
 80015c8:	200001e4 	.word	0x200001e4
 80015cc:	080064c8 	.word	0x080064c8
 80015d0:	200000b4 	.word	0x200000b4
 80015d4:	200001e0 	.word	0x200001e0
 80015d8:	08006554 	.word	0x08006554
 80015dc:	080067b8 	.word	0x080067b8
 80015e0:	200001e8 	.word	0x200001e8
 80015e4:	080064e8 	.word	0x080064e8
 80015e8:	20000118 	.word	0x20000118
							}
							case '4':  // -1v
							{
								Vh -= 1;
 80015ec:	4bb6      	ldr	r3, [pc, #728]	; (80018c8 <main+0xf78>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	4ab5      	ldr	r2, [pc, #724]	; (80018c8 <main+0xf78>)
 80015f4:	6013      	str	r3, [r2, #0]
								sprintf(V_high, "***** V high: %d v *****\r\n", Vh);
 80015f6:	4bb4      	ldr	r3, [pc, #720]	; (80018c8 <main+0xf78>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	49b3      	ldr	r1, [pc, #716]	; (80018cc <main+0xf7c>)
 80015fe:	48b4      	ldr	r0, [pc, #720]	; (80018d0 <main+0xf80>)
 8001600:	f004 fb36 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_high, strlen(V_high), 1000);
 8001604:	48b2      	ldr	r0, [pc, #712]	; (80018d0 <main+0xf80>)
 8001606:	f7fe fdeb 	bl	80001e0 <strlen>
 800160a:	4603      	mov	r3, r0
 800160c:	b29a      	uxth	r2, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	49af      	ldr	r1, [pc, #700]	; (80018d0 <main+0xf80>)
 8001614:	48af      	ldr	r0, [pc, #700]	; (80018d4 <main+0xf84>)
 8001616:	f004 f846 	bl	80056a6 <HAL_UART_Transmit>
								break;
 800161a:	e01d      	b.n	8001658 <main+0xd08>
							}
							case 'x':  // back
							{
								State = State_Menu1_Print;
 800161c:	4bae      	ldr	r3, [pc, #696]	; (80018d8 <main+0xf88>)
 800161e:	221e      	movs	r2, #30
 8001620:	601a      	str	r2, [r3, #0]
								break;
 8001622:	e019      	b.n	8001658 <main+0xd08>
							}
							default:   // error
							{
								 char temp[] = "***** Please Press again *****\r\n";
 8001624:	4bad      	ldr	r3, [pc, #692]	; (80018dc <main+0xf8c>)
 8001626:	1d3c      	adds	r4, r7, #4
 8001628:	461d      	mov	r5, r3
 800162a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800162e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001632:	682b      	ldr	r3, [r5, #0]
 8001634:	7023      	strb	r3, [r4, #0]
								 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe fdd1 	bl	80001e0 <strlen>
 800163e:	4603      	mov	r3, r0
 8001640:	b29a      	uxth	r2, r3
 8001642:	1d39      	adds	r1, r7, #4
 8001644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001648:	48a2      	ldr	r0, [pc, #648]	; (80018d4 <main+0xf84>)
 800164a:	f004 f82c 	bl	80056a6 <HAL_UART_Transmit>
								 State = State_Menu1_WaitInput;
 800164e:	4ba2      	ldr	r3, [pc, #648]	; (80018d8 <main+0xf88>)
 8001650:	221f      	movs	r2, #31
 8001652:	601a      	str	r2, [r3, #0]
								 break;
 8001654:	e000      	b.n	8001658 <main+0xd08>
								break;
 8001656:	bf00      	nop
							}
						}
						break;
 8001658:	e0f6      	b.n	8001848 <main+0xef8>
					}
					case '3': // V_low
					{
						char temp[] =  "***** Mode 1: Sine wave_V high *****\r\n"
 800165a:	4aa1      	ldr	r2, [pc, #644]	; (80018e0 <main+0xf90>)
 800165c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001660:	4611      	mov	r1, r2
 8001662:	225b      	movs	r2, #91	; 0x5b
 8001664:	4618      	mov	r0, r3
 8001666:	f004 faed 	bl	8005c44 <memcpy>
						"1: +0.1V\r\n ""2: -0.1V\r\n ""3: +1V\r\n ""4: -1V\r\n ""x: back\r\n \r\n";
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 800166a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fdb6 	bl	80001e0 <strlen>
 8001674:	4603      	mov	r3, r0
 8001676:	b29a      	uxth	r2, r3
 8001678:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800167c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001680:	4894      	ldr	r0, [pc, #592]	; (80018d4 <main+0xf84>)
 8001682:	f004 f810 	bl	80056a6 <HAL_UART_Transmit>
						switch(inputchar)
 8001686:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 800168a:	2b78      	cmp	r3, #120	; 0x78
 800168c:	f000 809c 	beq.w	80017c8 <main+0xe78>
 8001690:	2b78      	cmp	r3, #120	; 0x78
 8001692:	f300 809d 	bgt.w	80017d0 <main+0xe80>
 8001696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169a:	f000 80b2 	beq.w	8001802 <main+0xeb2>
 800169e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a2:	f2c0 8095 	blt.w	80017d0 <main+0xe80>
 80016a6:	2b34      	cmp	r3, #52	; 0x34
 80016a8:	f300 8092 	bgt.w	80017d0 <main+0xe80>
 80016ac:	2b31      	cmp	r3, #49	; 0x31
 80016ae:	f2c0 808f 	blt.w	80017d0 <main+0xe80>
 80016b2:	3b31      	subs	r3, #49	; 0x31
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	f200 808b 	bhi.w	80017d0 <main+0xe80>
 80016ba:	a201      	add	r2, pc, #4	; (adr r2, 80016c0 <main+0xd70>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	080016d1 	.word	0x080016d1
 80016c4:	0800171d 	.word	0x0800171d
 80016c8:	08001769 	.word	0x08001769
 80016cc:	08001799 	.word	0x08001799
							{
								break;
							}
							case '1':  // +0.1v
							{
								Vl += 0.1;
 80016d0:	4b84      	ldr	r3, [pc, #528]	; (80018e4 <main+0xf94>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff2d 	bl	8000534 <__aeabi_i2d>
 80016da:	a379      	add	r3, pc, #484	; (adr r3, 80018c0 <main+0xf70>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe fddc 	bl	800029c <__adddf3>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7fe ff8c 	bl	8000608 <__aeabi_d2iz>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a7c      	ldr	r2, [pc, #496]	; (80018e4 <main+0xf94>)
 80016f4:	6013      	str	r3, [r2, #0]
								sprintf(V_low, "***** V high: %d v *****\r\n", Vl);
 80016f6:	4b7b      	ldr	r3, [pc, #492]	; (80018e4 <main+0xf94>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	4973      	ldr	r1, [pc, #460]	; (80018cc <main+0xf7c>)
 80016fe:	487a      	ldr	r0, [pc, #488]	; (80018e8 <main+0xf98>)
 8001700:	f004 fab6 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_low, strlen(V_low), 1000);
 8001704:	4878      	ldr	r0, [pc, #480]	; (80018e8 <main+0xf98>)
 8001706:	f7fe fd6b 	bl	80001e0 <strlen>
 800170a:	4603      	mov	r3, r0
 800170c:	b29a      	uxth	r2, r3
 800170e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001712:	4975      	ldr	r1, [pc, #468]	; (80018e8 <main+0xf98>)
 8001714:	486f      	ldr	r0, [pc, #444]	; (80018d4 <main+0xf84>)
 8001716:	f003 ffc6 	bl	80056a6 <HAL_UART_Transmit>
								break;
 800171a:	e073      	b.n	8001804 <main+0xeb4>
							}
							case '2':  // -0.1v
							{
								Vl -= 0.1;
 800171c:	4b71      	ldr	r3, [pc, #452]	; (80018e4 <main+0xf94>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff07 	bl	8000534 <__aeabi_i2d>
 8001726:	a366      	add	r3, pc, #408	; (adr r3, 80018c0 <main+0xf70>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe fdb4 	bl	8000298 <__aeabi_dsub>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f7fe ff66 	bl	8000608 <__aeabi_d2iz>
 800173c:	4603      	mov	r3, r0
 800173e:	4a69      	ldr	r2, [pc, #420]	; (80018e4 <main+0xf94>)
 8001740:	6013      	str	r3, [r2, #0]
								sprintf(V_low, "***** V high: %d v *****\r\n", Vl);
 8001742:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <main+0xf94>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	4960      	ldr	r1, [pc, #384]	; (80018cc <main+0xf7c>)
 800174a:	4867      	ldr	r0, [pc, #412]	; (80018e8 <main+0xf98>)
 800174c:	f004 fa90 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_low, strlen(V_low), 1000);
 8001750:	4865      	ldr	r0, [pc, #404]	; (80018e8 <main+0xf98>)
 8001752:	f7fe fd45 	bl	80001e0 <strlen>
 8001756:	4603      	mov	r3, r0
 8001758:	b29a      	uxth	r2, r3
 800175a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175e:	4962      	ldr	r1, [pc, #392]	; (80018e8 <main+0xf98>)
 8001760:	485c      	ldr	r0, [pc, #368]	; (80018d4 <main+0xf84>)
 8001762:	f003 ffa0 	bl	80056a6 <HAL_UART_Transmit>
								break;
 8001766:	e04d      	b.n	8001804 <main+0xeb4>
							}
							case '3':  // +1v
							{
								Vl += 1;
 8001768:	4b5e      	ldr	r3, [pc, #376]	; (80018e4 <main+0xf94>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	4a5d      	ldr	r2, [pc, #372]	; (80018e4 <main+0xf94>)
 8001770:	6013      	str	r3, [r2, #0]
								sprintf(V_low, "***** V high: %d v *****\r\n", Vl);
 8001772:	4b5c      	ldr	r3, [pc, #368]	; (80018e4 <main+0xf94>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	4954      	ldr	r1, [pc, #336]	; (80018cc <main+0xf7c>)
 800177a:	485b      	ldr	r0, [pc, #364]	; (80018e8 <main+0xf98>)
 800177c:	f004 fa78 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_low, strlen(V_low), 1000);
 8001780:	4859      	ldr	r0, [pc, #356]	; (80018e8 <main+0xf98>)
 8001782:	f7fe fd2d 	bl	80001e0 <strlen>
 8001786:	4603      	mov	r3, r0
 8001788:	b29a      	uxth	r2, r3
 800178a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178e:	4956      	ldr	r1, [pc, #344]	; (80018e8 <main+0xf98>)
 8001790:	4850      	ldr	r0, [pc, #320]	; (80018d4 <main+0xf84>)
 8001792:	f003 ff88 	bl	80056a6 <HAL_UART_Transmit>
								break;
 8001796:	e035      	b.n	8001804 <main+0xeb4>
							}
							case '4':  // -1v
							{
								Vl -= 1;
 8001798:	4b52      	ldr	r3, [pc, #328]	; (80018e4 <main+0xf94>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3b01      	subs	r3, #1
 800179e:	4a51      	ldr	r2, [pc, #324]	; (80018e4 <main+0xf94>)
 80017a0:	6013      	str	r3, [r2, #0]
								sprintf(V_low, "***** V high: %d v *****\r\n", Vl);
 80017a2:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <main+0xf94>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	4948      	ldr	r1, [pc, #288]	; (80018cc <main+0xf7c>)
 80017aa:	484f      	ldr	r0, [pc, #316]	; (80018e8 <main+0xf98>)
 80017ac:	f004 fa60 	bl	8005c70 <siprintf>
								HAL_UART_Transmit(&huart2, (uint8_t*)V_low, strlen(V_low), 1000);
 80017b0:	484d      	ldr	r0, [pc, #308]	; (80018e8 <main+0xf98>)
 80017b2:	f7fe fd15 	bl	80001e0 <strlen>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017be:	494a      	ldr	r1, [pc, #296]	; (80018e8 <main+0xf98>)
 80017c0:	4844      	ldr	r0, [pc, #272]	; (80018d4 <main+0xf84>)
 80017c2:	f003 ff70 	bl	80056a6 <HAL_UART_Transmit>
								break;
 80017c6:	e01d      	b.n	8001804 <main+0xeb4>
							}
							case 'x':  // back
							{
								State = State_Menu1_Print;
 80017c8:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <main+0xf88>)
 80017ca:	221e      	movs	r2, #30
 80017cc:	601a      	str	r2, [r3, #0]
								break;
 80017ce:	e019      	b.n	8001804 <main+0xeb4>
							}
							default:   // error
							{
								 char temp[] = "***** Please Press again *****\r\n";
 80017d0:	4b42      	ldr	r3, [pc, #264]	; (80018dc <main+0xf8c>)
 80017d2:	1d3c      	adds	r4, r7, #4
 80017d4:	461d      	mov	r5, r3
 80017d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017de:	682b      	ldr	r3, [r5, #0]
 80017e0:	7023      	strb	r3, [r4, #0]
								 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fcfb 	bl	80001e0 <strlen>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	1d39      	adds	r1, r7, #4
 80017f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f4:	4837      	ldr	r0, [pc, #220]	; (80018d4 <main+0xf84>)
 80017f6:	f003 ff56 	bl	80056a6 <HAL_UART_Transmit>
								 State = State_Menu1_WaitInput;
 80017fa:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <main+0xf88>)
 80017fc:	221f      	movs	r2, #31
 80017fe:	601a      	str	r2, [r3, #0]
								 break;
 8001800:	e000      	b.n	8001804 <main+0xeb4>
								break;
 8001802:	bf00      	nop
							}
						}
						break;
 8001804:	e020      	b.n	8001848 <main+0xef8>
					}
					case 'x':  // back
					{
						State = State_Mainmenu_Print;
 8001806:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <main+0xf88>)
 8001808:	220a      	movs	r2, #10
 800180a:	601a      	str	r2, [r3, #0]
						break;
 800180c:	e01c      	b.n	8001848 <main+0xef8>
					}
					default:   // error
					{
						 char temp[] = "***** Please Press again *****\r\n";
 800180e:	4b33      	ldr	r3, [pc, #204]	; (80018dc <main+0xf8c>)
 8001810:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001814:	461d      	mov	r5, r3
 8001816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800181a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800181c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800181e:	682b      	ldr	r3, [r5, #0]
 8001820:	7023      	strb	r3, [r4, #0]
						 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fcda 	bl	80001e0 <strlen>
 800182c:	4603      	mov	r3, r0
 800182e:	b29a      	uxth	r2, r3
 8001830:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001838:	4826      	ldr	r0, [pc, #152]	; (80018d4 <main+0xf84>)
 800183a:	f003 ff34 	bl	80056a6 <HAL_UART_Transmit>
						 State = State_Menu1_Print;
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <main+0xf88>)
 8001840:	221e      	movs	r2, #30
 8001842:	601a      	str	r2, [r3, #0]
						 break;
 8001844:	e000      	b.n	8001848 <main+0xef8>
						break;
 8001846:	bf00      	nop
					}
				}
				break;
 8001848:	e0c6      	b.n	80019d8 <main+0x1088>
			case State_Menu2_Print:
			{
				char temp[] = "***** Mode 2: Square wave *****\r\n "
 800184a:	4a28      	ldr	r2, [pc, #160]	; (80018ec <main+0xf9c>)
 800184c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001850:	4611      	mov	r1, r2
 8001852:	2264      	movs	r2, #100	; 0x64
 8001854:	4618      	mov	r0, r3
 8001856:	f004 f9f5 	bl	8005c44 <memcpy>
										"1: frequency\r\n "
										"2: V high\r\n "
										"3: V low\r\n"
										"4: Duty cycle\r\n "
										"x: back\r\n \r\n";
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 800185a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fcbe 	bl	80001e0 <strlen>
 8001864:	4603      	mov	r3, r0
 8001866:	b29a      	uxth	r2, r3
 8001868:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800186c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001870:	4818      	ldr	r0, [pc, #96]	; (80018d4 <main+0xf84>)
 8001872:	f003 ff18 	bl	80056a6 <HAL_UART_Transmit>
				State = State_Menu2_WaitInput;
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <main+0xf88>)
 8001878:	2229      	movs	r2, #41	; 0x29
 800187a:	601a      	str	r2, [r3, #0]
				break;
 800187c:	e0ac      	b.n	80019d8 <main+0x1088>
			}


			case State_Menu2_WaitInput:
			{
				switch (inputchar)
 800187e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001882:	2b78      	cmp	r3, #120	; 0x78
 8001884:	f000 8086 	beq.w	8001994 <main+0x1044>
 8001888:	2b78      	cmp	r3, #120	; 0x78
 800188a:	f300 8087 	bgt.w	800199c <main+0x104c>
 800188e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001892:	f000 809f 	beq.w	80019d4 <main+0x1084>
 8001896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189a:	db7f      	blt.n	800199c <main+0x104c>
 800189c:	2b34      	cmp	r3, #52	; 0x34
 800189e:	dc7d      	bgt.n	800199c <main+0x104c>
 80018a0:	2b31      	cmp	r3, #49	; 0x31
 80018a2:	db7b      	blt.n	800199c <main+0x104c>
 80018a4:	3b31      	subs	r3, #49	; 0x31
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d878      	bhi.n	800199c <main+0x104c>
 80018aa:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <main+0xf60>)
 80018ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b0:	080018f1 	.word	0x080018f1
 80018b4:	08001925 	.word	0x08001925
 80018b8:	08001959 	.word	0x08001959
 80018bc:	0800198d 	.word	0x0800198d
 80018c0:	9999999a 	.word	0x9999999a
 80018c4:	3fb99999 	.word	0x3fb99999
 80018c8:	200001e8 	.word	0x200001e8
 80018cc:	080064e8 	.word	0x080064e8
 80018d0:	20000118 	.word	0x20000118
 80018d4:	200003b0 	.word	0x200003b0
 80018d8:	200001e0 	.word	0x200001e0
 80018dc:	08006554 	.word	0x08006554
 80018e0:	080067b8 	.word	0x080067b8
 80018e4:	200001ec 	.word	0x200001ec
 80018e8:	2000017c 	.word	0x2000017c
 80018ec:	08006814 	.word	0x08006814
					{
						break;
					}
					case '1':  // frequency
					{
						char temp[] = "***** Mode 2: Square wave_frequency *****\r\n "
 80018f0:	4a3a      	ldr	r2, [pc, #232]	; (80019dc <main+0x108c>)
 80018f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f6:	4611      	mov	r1, r2
 80018f8:	2265      	movs	r2, #101	; 0x65
 80018fa:	4618      	mov	r0, r3
 80018fc:	f004 f9a2 	bl	8005c44 <memcpy>
													 "1: +0.1Hz\r\n "
													 "2: -0.1Hz\r\n "
													 "3: +1Hz\r\n "
													 "4: -1Hz\r\n "
													 "x: back\r\n \r\n";
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001900:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fc6b 	bl	80001e0 <strlen>
 800190a:	4603      	mov	r3, r0
 800190c:	b29a      	uxth	r2, r3
 800190e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	4832      	ldr	r0, [pc, #200]	; (80019e0 <main+0x1090>)
 8001918:	f003 fec5 	bl	80056a6 <HAL_UART_Transmit>
						State = State_Menu2_Print;
 800191c:	4b31      	ldr	r3, [pc, #196]	; (80019e4 <main+0x1094>)
 800191e:	2228      	movs	r2, #40	; 0x28
 8001920:	601a      	str	r2, [r3, #0]
						break;
 8001922:	e058      	b.n	80019d6 <main+0x1086>
					}
					case '2':  // V high
					{
						char temp[] = "***** Mode 0: Sawtooth_V high *****\r\n"
 8001924:	4a30      	ldr	r2, [pc, #192]	; (80019e8 <main+0x1098>)
 8001926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800192a:	4611      	mov	r1, r2
 800192c:	225a      	movs	r2, #90	; 0x5a
 800192e:	4618      	mov	r0, r3
 8001930:	f004 f988 	bl	8005c44 <memcpy>
													 "1: +0.1V\r\n "
													 "2: -0.1V\r\n "
													 "3: +1V\r\n "
													 "4: -1V\r\n "
													 "x: back\r\n \r\n";
						 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001934:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fc51 	bl	80001e0 <strlen>
 800193e:	4603      	mov	r3, r0
 8001940:	b29a      	uxth	r2, r3
 8001942:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	4825      	ldr	r0, [pc, #148]	; (80019e0 <main+0x1090>)
 800194c:	f003 feab 	bl	80056a6 <HAL_UART_Transmit>
						State = State_Menu2_Print;
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <main+0x1094>)
 8001952:	2228      	movs	r2, #40	; 0x28
 8001954:	601a      	str	r2, [r3, #0]
						break;
 8001956:	e03e      	b.n	80019d6 <main+0x1086>
					}
					case '3':  //  V low
					{
						char temp[] = "***** Mode 0: Sawtooth_V low *****\r\n"
 8001958:	4a24      	ldr	r2, [pc, #144]	; (80019ec <main+0x109c>)
 800195a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195e:	4611      	mov	r1, r2
 8001960:	2259      	movs	r2, #89	; 0x59
 8001962:	4618      	mov	r0, r3
 8001964:	f004 f96e 	bl	8005c44 <memcpy>
													 "1: +0.1V\r\n "
													 "2: -0.1V\r\n "
													 "3: +1V\r\n "
													 "4: -1V\r\n "
													 "x: back\r\n \r\n";
						 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 8001968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fc37 	bl	80001e0 <strlen>
 8001972:	4603      	mov	r3, r0
 8001974:	b29a      	uxth	r2, r3
 8001976:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800197a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197e:	4818      	ldr	r0, [pc, #96]	; (80019e0 <main+0x1090>)
 8001980:	f003 fe91 	bl	80056a6 <HAL_UART_Transmit>
						State = State_Menu2_Print;
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <main+0x1094>)
 8001986:	2228      	movs	r2, #40	; 0x28
 8001988:	601a      	str	r2, [r3, #0]
						break;
 800198a:	e024      	b.n	80019d6 <main+0x1086>
					}
					case '4':  // Duty cycle
					{
						State = State_Menu2_Print;
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <main+0x1094>)
 800198e:	2228      	movs	r2, #40	; 0x28
 8001990:	601a      	str	r2, [r3, #0]
						break;
 8001992:	e020      	b.n	80019d6 <main+0x1086>
					}
					case 'x':  // back
					{
						State = State_Mainmenu_Print;
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <main+0x1094>)
 8001996:	220a      	movs	r2, #10
 8001998:	601a      	str	r2, [r3, #0]
						break;
 800199a:	e01c      	b.n	80019d6 <main+0x1086>
					}
					default:   // error
					{
						 char temp[] = "***** Please Press again *****\r\n";
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <main+0x10a0>)
 800199e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80019a2:	461d      	mov	r5, r3
 80019a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ac:	682b      	ldr	r3, [r5, #0]
 80019ae:	7023      	strb	r3, [r4, #0]
						 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp), 1000);
 80019b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fc13 	bl	80001e0 <strlen>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b29a      	uxth	r2, r3
 80019be:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <main+0x1090>)
 80019c8:	f003 fe6d 	bl	80056a6 <HAL_UART_Transmit>
						 State = State_Menu1_Print;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <main+0x1094>)
 80019ce:	221e      	movs	r2, #30
 80019d0:	601a      	str	r2, [r3, #0]
						 break;
 80019d2:	e000      	b.n	80019d6 <main+0x1086>
						break;
 80019d4:	bf00      	nop
					}
				}
				break;
 80019d6:	bf00      	nop
	{
 80019d8:	f7fe bfe1 	b.w	800099e <main+0x4e>
 80019dc:	08006878 	.word	0x08006878
 80019e0:	200003b0 	.word	0x200003b0
 80019e4:	200001e0 	.word	0x200001e0
 80019e8:	08006648 	.word	0x08006648
 80019ec:	080068e0 	.word	0x080068e0
 80019f0:	08006554 	.word	0x08006554

080019f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b094      	sub	sp, #80	; 0x50
 80019f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fa:	f107 0320 	add.w	r3, r7, #32
 80019fe:	2230      	movs	r2, #48	; 0x30
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f004 f92c 	bl	8005c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <SystemClock_Config+0xc8>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	4a26      	ldr	r2, [pc, #152]	; (8001abc <SystemClock_Config+0xc8>)
 8001a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a26:	6413      	str	r3, [r2, #64]	; 0x40
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <SystemClock_Config+0xc8>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a34:	2300      	movs	r3, #0
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <SystemClock_Config+0xcc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a20      	ldr	r2, [pc, #128]	; (8001ac0 <SystemClock_Config+0xcc>)
 8001a3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <SystemClock_Config+0xcc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a50:	2302      	movs	r3, #2
 8001a52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a54:	2301      	movs	r3, #1
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a58:	2310      	movs	r3, #16
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a60:	2300      	movs	r3, #0
 8001a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a64:	2308      	movs	r3, #8
 8001a66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a68:	2364      	movs	r3, #100	; 0x64
 8001a6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a70:	2304      	movs	r3, #4
 8001a72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a74:	f107 0320 	add.w	r3, r7, #32
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 f913 	bl	8003ca4 <HAL_RCC_OscConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a84:	f000 faa6 	bl	8001fd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a88:	230f      	movs	r3, #15
 8001a8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	2103      	movs	r1, #3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 fb75 	bl	8004194 <HAL_RCC_ClockConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ab0:	f000 fa90 	bl	8001fd4 <Error_Handler>
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3750      	adds	r7, #80	; 0x50
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aca:	463b      	mov	r3, r7
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <MX_ADC1_Init+0x9c>)
 8001ad8:	4a22      	ldr	r2, [pc, #136]	; (8001b64 <MX_ADC1_Init+0xa0>)
 8001ada:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001adc:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <MX_ADC1_Init+0x9c>)
 8001ade:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ae2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <MX_ADC1_Init+0x9c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <MX_ADC1_Init+0x9c>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <MX_ADC1_Init+0x9c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <MX_ADC1_Init+0x9c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <MX_ADC1_Init+0x9c>)
 8001b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <MX_ADC1_Init+0x9c>)
 8001b08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <MX_ADC1_Init+0x9c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_ADC1_Init+0x9c>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_ADC1_Init+0x9c>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_ADC1_Init+0x9c>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b28:	480d      	ldr	r0, [pc, #52]	; (8001b60 <MX_ADC1_Init+0x9c>)
 8001b2a:	f000 fd0b 	bl	8002544 <HAL_ADC_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001b34:	f000 fa4e 	bl	8001fd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b44:	463b      	mov	r3, r7
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_ADC1_Init+0x9c>)
 8001b4a:	f000 ff97 	bl	8002a7c <HAL_ADC_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001b54:	f000 fa3e 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200002c0 	.word	0x200002c0
 8001b64:	40012000 	.word	0x40012000

08001b68 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <MX_SPI3_Init+0x68>)
 8001b6e:	4a19      	ldr	r2, [pc, #100]	; (8001bd4 <MX_SPI3_Init+0x6c>)
 8001b70:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <MX_SPI3_Init+0x68>)
 8001b74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b78:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <MX_SPI3_Init+0x68>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <MX_SPI3_Init+0x68>)
 8001b82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b86:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <MX_SPI3_Init+0x68>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <MX_SPI3_Init+0x68>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <MX_SPI3_Init+0x68>)
 8001b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b9a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_SPI3_Init+0x68>)
 8001b9e:	2208      	movs	r2, #8
 8001ba0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <MX_SPI3_Init+0x68>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <MX_SPI3_Init+0x68>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <MX_SPI3_Init+0x68>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <MX_SPI3_Init+0x68>)
 8001bb6:	220a      	movs	r2, #10
 8001bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bba:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_SPI3_Init+0x68>)
 8001bbc:	f002 fce6 	bl	800458c <HAL_SPI_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001bc6:	f000 fa05 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000268 	.word	0x20000268
 8001bd4:	40003c00 	.word	0x40003c00

08001bd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bde:	f107 0308 	add.w	r3, r7, #8
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	463b      	mov	r3, r7
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <MX_TIM3_Init+0x90>)
 8001bf6:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <MX_TIM3_Init+0x94>)
 8001bf8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MX_TIM3_Init+0x90>)
 8001bfc:	2263      	movs	r2, #99	; 0x63
 8001bfe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <MX_TIM3_Init+0x90>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <MX_TIM3_Init+0x90>)
 8001c08:	2264      	movs	r2, #100	; 0x64
 8001c0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <MX_TIM3_Init+0x90>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <MX_TIM3_Init+0x90>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c18:	4813      	ldr	r0, [pc, #76]	; (8001c68 <MX_TIM3_Init+0x90>)
 8001c1a:	f003 f85b 	bl	8004cd4 <HAL_TIM_Base_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001c24:	f000 f9d6 	bl	8001fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	4619      	mov	r1, r3
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <MX_TIM3_Init+0x90>)
 8001c36:	f003 fa61 	bl	80050fc <HAL_TIM_ConfigClockSource>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001c40:	f000 f9c8 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c44:	2320      	movs	r3, #32
 8001c46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_TIM3_Init+0x90>)
 8001c52:	f003 fc59 	bl	8005508 <HAL_TIMEx_MasterConfigSynchronization>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001c5c:	f000 f9ba 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000220 	.word	0x20000220
 8001c6c:	40000400 	.word	0x40000400

08001c70 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_TIM11_Init+0x40>)
 8001c76:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <MX_TIM11_Init+0x44>)
 8001c78:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <MX_TIM11_Init+0x40>)
 8001c7c:	2263      	movs	r2, #99	; 0x63
 8001c7e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <MX_TIM11_Init+0x40>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <MX_TIM11_Init+0x40>)
 8001c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c8c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <MX_TIM11_Init+0x40>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_TIM11_Init+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_TIM11_Init+0x40>)
 8001c9c:	f003 f81a 	bl	8004cd4 <HAL_TIM_Base_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001ca6:	f000 f995 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000308 	.word	0x20000308
 8001cb4:	40014800 	.word	0x40014800

08001cb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <MX_USART2_UART_Init+0x50>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_USART2_UART_Init+0x4c>)
 8001cf0:	f003 fc8c 	bl	800560c <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cfa:	f000 f96b 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200003b0 	.word	0x200003b0
 8001d08:	40004400 	.word	0x40004400

08001d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_DMA_Init+0x3c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <MX_DMA_Init+0x3c>)
 8001d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_DMA_Init+0x3c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	2038      	movs	r0, #56	; 0x38
 8001d34:	f001 fa37 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d38:	2038      	movs	r0, #56	; 0x38
 8001d3a:	f001 fa50 	bl	80031de <HAL_NVIC_EnableIRQ>

}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800

08001d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	4b44      	ldr	r3, [pc, #272]	; (8001e78 <MX_GPIO_Init+0x12c>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a43      	ldr	r2, [pc, #268]	; (8001e78 <MX_GPIO_Init+0x12c>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <MX_GPIO_Init+0x12c>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <MX_GPIO_Init+0x12c>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a3c      	ldr	r2, [pc, #240]	; (8001e78 <MX_GPIO_Init+0x12c>)
 8001d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b3a      	ldr	r3, [pc, #232]	; (8001e78 <MX_GPIO_Init+0x12c>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <MX_GPIO_Init+0x12c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a35      	ldr	r2, [pc, #212]	; (8001e78 <MX_GPIO_Init+0x12c>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <MX_GPIO_Init+0x12c>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <MX_GPIO_Init+0x12c>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a2e      	ldr	r2, [pc, #184]	; (8001e78 <MX_GPIO_Init+0x12c>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b2c      	ldr	r3, [pc, #176]	; (8001e78 <MX_GPIO_Init+0x12c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2120      	movs	r1, #32
 8001dd6:	4829      	ldr	r0, [pc, #164]	; (8001e7c <MX_GPIO_Init+0x130>)
 8001dd8:	f001 ff4a 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de2:	4827      	ldr	r0, [pc, #156]	; (8001e80 <MX_GPIO_Init+0x134>)
 8001de4:	f001 ff44 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8001de8:	2201      	movs	r2, #1
 8001dea:	2180      	movs	r1, #128	; 0x80
 8001dec:	4825      	ldr	r0, [pc, #148]	; (8001e84 <MX_GPIO_Init+0x138>)
 8001dee:	f001 ff3f 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001df8:	4820      	ldr	r0, [pc, #128]	; (8001e7c <MX_GPIO_Init+0x130>)
 8001dfa:	f001 ff39 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e04:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <MX_GPIO_Init+0x13c>)
 8001e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	481c      	ldr	r0, [pc, #112]	; (8001e84 <MX_GPIO_Init+0x138>)
 8001e14:	f001 fd90 	bl	8003938 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8001e18:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4812      	ldr	r0, [pc, #72]	; (8001e7c <MX_GPIO_Init+0x130>)
 8001e32:	f001 fd81 	bl	8003938 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8001e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480c      	ldr	r0, [pc, #48]	; (8001e80 <MX_GPIO_Init+0x134>)
 8001e50:	f001 fd72 	bl	8003938 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4806      	ldr	r0, [pc, #24]	; (8001e84 <MX_GPIO_Init+0x138>)
 8001e6c:	f001 fd64 	bl	8003938 <HAL_GPIO_Init>

}
 8001e70:	bf00      	nop
 8001e72:	3728      	adds	r7, #40	; 0x28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	40020400 	.word	0x40020400
 8001e84:	40020800 	.word	0x40020800
 8001e88:	10210000 	.word	0x10210000

08001e8c <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	460a      	mov	r2, r1
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8001e9c:	88bb      	ldrh	r3, [r7, #4]
 8001e9e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	031b      	lsls	r3, r3, #12
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb2:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <MCP4922SetOutput+0x44>)
 8001eb4:	f001 fedc 	bl	8003c70 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8001eb8:	f107 030c 	add.w	r3, r7, #12
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4804      	ldr	r0, [pc, #16]	; (8001ed4 <MCP4922SetOutput+0x48>)
 8001ec2:	f002 fbed 	bl	80046a0 <HAL_SPI_Transmit_IT>
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	20000268 	.word	0x20000268

08001ed8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a06      	ldr	r2, [pc, #24]	; (8001efc <HAL_SPI_TxCpltCallback+0x24>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d105      	bne.n	8001ef4 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eee:	4804      	ldr	r0, [pc, #16]	; (8001f00 <HAL_SPI_TxCpltCallback+0x28>)
 8001ef0:	f001 febe 	bl	8003c70 <HAL_GPIO_WritePin>
	}
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000268 	.word	0x20000268
 8001f00:	40020400 	.word	0x40020400

08001f04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b4b0      	push	{r4, r5, r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d10c      	bne.n	8001f2e <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f1e:	f04f 0100 	mov.w	r1, #0
 8001f22:	1814      	adds	r4, r2, r0
 8001f24:	eb43 0501 	adc.w	r5, r3, r1
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001f2a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bcb0      	pop	{r4, r5, r7}
 8001f36:	4770      	bx	lr
 8001f38:	20000308 	.word	0x20000308
 8001f3c:	200001f8 	.word	0x200001f8

08001f40 <micros>:

inline uint64_t micros()
{
 8001f40:	b4b0      	push	{r4, r5, r7}
 8001f42:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <micros+0x2c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f04f 0100 	mov.w	r1, #0
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <micros+0x30>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	1884      	adds	r4, r0, r2
 8001f58:	eb41 0503 	adc.w	r5, r1, r3
 8001f5c:	4622      	mov	r2, r4
 8001f5e:	462b      	mov	r3, r5
}
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bcb0      	pop	{r4, r5, r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000308 	.word	0x20000308
 8001f70:	200001f8 	.word	0x200001f8

08001f74 <UARTRecieveIT>:


int16_t UARTRecieveIT()
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
	// store data last position
	static uint32_t dataPos = 0;
	// create dummy data
	int16_t data = -1;
 8001f7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f7e:	80fb      	strh	r3, [r7, #6]

	// check Pos in buffer VS last position
	if(huart2.RxXferSize - huart2.RxXferCount != dataPos)
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <UARTRecieveIT+0x54>)
 8001f82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <UARTRecieveIT+0x54>)
 8001f88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <UARTRecieveIT+0x58>)
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d010      	beq.n	8001fb8 <UARTRecieveIT+0x44>
	{
		// read data from Buffer
		data = RxDataBuffer[dataPos];
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <UARTRecieveIT+0x58>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <UARTRecieveIT+0x5c>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	80fb      	strh	r3, [r7, #6]

		 // move to next Pos
		dataPos = (dataPos+1) %huart2.RxXferSize;
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <UARTRecieveIT+0x58>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <UARTRecieveIT+0x54>)
 8001fa8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001faa:	fbb3 f1f2 	udiv	r1, r3, r2
 8001fae:	fb02 f201 	mul.w	r2, r2, r1
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <UARTRecieveIT+0x58>)
 8001fb6:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001fb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	200003b0 	.word	0x200003b0
 8001fcc:	20000210 	.word	0x20000210
 8001fd0:	20000094 	.word	0x20000094

08001fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd8:	b672      	cpsid	i
}
 8001fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001fdc:	e7fe      	b.n	8001fdc <Error_Handler+0x8>
	...

08001fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_MspInit+0x4c>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a0f      	ldr	r2, [pc, #60]	; (800202c <HAL_MspInit+0x4c>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_MspInit+0x4c>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_MspInit+0x4c>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_MspInit+0x4c>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_MspInit+0x4c>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800201e:	2007      	movs	r0, #7
 8002020:	f001 f8b6 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800

08002030 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a32      	ldr	r2, [pc, #200]	; (8002118 <HAL_ADC_MspInit+0xe8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d15e      	bne.n	8002110 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	4b31      	ldr	r3, [pc, #196]	; (800211c <HAL_ADC_MspInit+0xec>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a30      	ldr	r2, [pc, #192]	; (800211c <HAL_ADC_MspInit+0xec>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b2e      	ldr	r3, [pc, #184]	; (800211c <HAL_ADC_MspInit+0xec>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <HAL_ADC_MspInit+0xec>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a29      	ldr	r2, [pc, #164]	; (800211c <HAL_ADC_MspInit+0xec>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b27      	ldr	r3, [pc, #156]	; (800211c <HAL_ADC_MspInit+0xec>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800208a:	2301      	movs	r3, #1
 800208c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208e:	2303      	movs	r3, #3
 8002090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	4820      	ldr	r0, [pc, #128]	; (8002120 <HAL_ADC_MspInit+0xf0>)
 800209e:	f001 fc4b 	bl	8003938 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_ADC_MspInit+0xf4>)
 80020a4:	4a20      	ldr	r2, [pc, #128]	; (8002128 <HAL_ADC_MspInit+0xf8>)
 80020a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80020a8:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <HAL_ADC_MspInit+0xf4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020ae:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_ADC_MspInit+0xf4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b4:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_ADC_MspInit+0xf4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_ADC_MspInit+0xf4>)
 80020bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020c2:	4b18      	ldr	r3, [pc, #96]	; (8002124 <HAL_ADC_MspInit+0xf4>)
 80020c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <HAL_ADC_MspInit+0xf4>)
 80020cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <HAL_ADC_MspInit+0xf4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_ADC_MspInit+0xf4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_ADC_MspInit+0xf4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020e4:	480f      	ldr	r0, [pc, #60]	; (8002124 <HAL_ADC_MspInit+0xf4>)
 80020e6:	f001 f895 	bl	8003214 <HAL_DMA_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80020f0:	f7ff ff70 	bl	8001fd4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <HAL_ADC_MspInit+0xf4>)
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_ADC_MspInit+0xf4>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002100:	2200      	movs	r2, #0
 8002102:	2100      	movs	r1, #0
 8002104:	2012      	movs	r0, #18
 8002106:	f001 f84e 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800210a:	2012      	movs	r0, #18
 800210c:	f001 f867 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002110:	bf00      	nop
 8002112:	3728      	adds	r7, #40	; 0x28
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40012000 	.word	0x40012000
 800211c:	40023800 	.word	0x40023800
 8002120:	40020000 	.word	0x40020000
 8002124:	20000350 	.word	0x20000350
 8002128:	40026410 	.word	0x40026410

0800212c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <HAL_SPI_MspInit+0x94>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d133      	bne.n	80021b6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <HAL_SPI_MspInit+0x98>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a1b      	ldr	r2, [pc, #108]	; (80021c4 <HAL_SPI_MspInit+0x98>)
 8002158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_SPI_MspInit+0x98>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_SPI_MspInit+0x98>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <HAL_SPI_MspInit+0x98>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_SPI_MspInit+0x98>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002186:	2338      	movs	r3, #56	; 0x38
 8002188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002196:	2306      	movs	r3, #6
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	4809      	ldr	r0, [pc, #36]	; (80021c8 <HAL_SPI_MspInit+0x9c>)
 80021a2:	f001 fbc9 	bl	8003938 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	2033      	movs	r0, #51	; 0x33
 80021ac:	f000 fffb 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80021b0:	2033      	movs	r0, #51	; 0x33
 80021b2:	f001 f814 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80021b6:	bf00      	nop
 80021b8:	3728      	adds	r7, #40	; 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40003c00 	.word	0x40003c00
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020400 	.word	0x40020400

080021cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a18      	ldr	r2, [pc, #96]	; (800223c <HAL_TIM_Base_MspInit+0x70>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10e      	bne.n	80021fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_TIM_Base_MspInit+0x74>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a16      	ldr	r2, [pc, #88]	; (8002240 <HAL_TIM_Base_MspInit+0x74>)
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_TIM_Base_MspInit+0x74>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80021fa:	e01a      	b.n	8002232 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a10      	ldr	r2, [pc, #64]	; (8002244 <HAL_TIM_Base_MspInit+0x78>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d115      	bne.n	8002232 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_TIM_Base_MspInit+0x74>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <HAL_TIM_Base_MspInit+0x74>)
 8002210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002214:	6453      	str	r3, [r2, #68]	; 0x44
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_TIM_Base_MspInit+0x74>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	201a      	movs	r0, #26
 8002228:	f000 ffbd 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800222c:	201a      	movs	r0, #26
 800222e:	f000 ffd6 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40000400 	.word	0x40000400
 8002240:	40023800 	.word	0x40023800
 8002244:	40014800 	.word	0x40014800

08002248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a19      	ldr	r2, [pc, #100]	; (80022cc <HAL_UART_MspInit+0x84>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d12b      	bne.n	80022c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_UART_MspInit+0x88>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_UART_MspInit+0x88>)
 8002274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_UART_MspInit+0x88>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_UART_MspInit+0x88>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a10      	ldr	r2, [pc, #64]	; (80022d0 <HAL_UART_MspInit+0x88>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_UART_MspInit+0x88>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022a2:	230c      	movs	r3, #12
 80022a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ae:	2303      	movs	r3, #3
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022b2:	2307      	movs	r3, #7
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	4805      	ldr	r0, [pc, #20]	; (80022d4 <HAL_UART_MspInit+0x8c>)
 80022be:	f001 fb3b 	bl	8003938 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022c2:	bf00      	nop
 80022c4:	3728      	adds	r7, #40	; 0x28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40004400 	.word	0x40004400
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020000 	.word	0x40020000

080022d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <NMI_Handler+0x4>

080022de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <HardFault_Handler+0x4>

080022e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <MemManage_Handler+0x4>

080022ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ee:	e7fe      	b.n	80022ee <BusFault_Handler+0x4>

080022f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <UsageFault_Handler+0x4>

080022f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002324:	f000 f8ee 	bl	8002504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <ADC_IRQHandler+0x10>)
 8002332:	f000 f94a 	bl	80025ca <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200002c0 	.word	0x200002c0

08002340 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002344:	4802      	ldr	r0, [pc, #8]	; (8002350 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002346:	f002 fdd1 	bl	8004eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000308 	.word	0x20000308

08002354 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <SPI3_IRQHandler+0x10>)
 800235a:	f002 fa2b 	bl	80047b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000268 	.word	0x20000268

08002368 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <DMA2_Stream0_IRQHandler+0x10>)
 800236e:	f001 f879 	bl	8003464 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000350 	.word	0x20000350

0800237c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002384:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <_sbrk+0x5c>)
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <_sbrk+0x60>)
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <_sbrk+0x64>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <_sbrk+0x64>)
 800239a:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <_sbrk+0x68>)
 800239c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <_sbrk+0x64>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d207      	bcs.n	80023bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023ac:	f003 fc20 	bl	8005bf0 <__errno>
 80023b0:	4603      	mov	r3, r0
 80023b2:	220c      	movs	r2, #12
 80023b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	e009      	b.n	80023d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <_sbrk+0x64>)
 80023cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20020000 	.word	0x20020000
 80023dc:	00000400 	.word	0x00000400
 80023e0:	20000214 	.word	0x20000214
 80023e4:	20000408 	.word	0x20000408

080023e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <SystemInit+0x20>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <SystemInit+0x20>)
 80023f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800240c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002444 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002410:	480d      	ldr	r0, [pc, #52]	; (8002448 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002412:	490e      	ldr	r1, [pc, #56]	; (800244c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002414:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002418:	e002      	b.n	8002420 <LoopCopyDataInit>

0800241a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800241c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241e:	3304      	adds	r3, #4

08002420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002424:	d3f9      	bcc.n	800241a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002426:	4a0b      	ldr	r2, [pc, #44]	; (8002454 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002428:	4c0b      	ldr	r4, [pc, #44]	; (8002458 <LoopFillZerobss+0x26>)
  movs r3, #0
 800242a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800242c:	e001      	b.n	8002432 <LoopFillZerobss>

0800242e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002430:	3204      	adds	r2, #4

08002432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002434:	d3fb      	bcc.n	800242e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002436:	f7ff ffd7 	bl	80023e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800243a:	f003 fbdf 	bl	8005bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800243e:	f7fe fa87 	bl	8000950 <main>
  bx  lr    
 8002442:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002444:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800244c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002450:	080069a0 	.word	0x080069a0
  ldr r2, =_sbss
 8002454:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002458:	20000408 	.word	0x20000408

0800245c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800245c:	e7fe      	b.n	800245c <DMA1_Stream0_IRQHandler>
	...

08002460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002464:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0d      	ldr	r2, [pc, #52]	; (80024a0 <HAL_Init+0x40>)
 800246a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800246e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_Init+0x40>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_Init+0x40>)
 8002476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800247a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a07      	ldr	r2, [pc, #28]	; (80024a0 <HAL_Init+0x40>)
 8002482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002488:	2003      	movs	r0, #3
 800248a:	f000 fe81 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800248e:	2000      	movs	r0, #0
 8002490:	f000 f808 	bl	80024a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002494:	f7ff fda4 	bl	8001fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00

080024a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_InitTick+0x54>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_InitTick+0x58>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80024be:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fe99 	bl	80031fa <HAL_SYSTICK_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00e      	b.n	80024f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b0f      	cmp	r3, #15
 80024d6:	d80a      	bhi.n	80024ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d8:	2200      	movs	r2, #0
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f000 fe61 	bl	80031a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024e4:	4a06      	ldr	r2, [pc, #24]	; (8002500 <HAL_InitTick+0x5c>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000004 	.word	0x20000004
 80024fc:	2000000c 	.word	0x2000000c
 8002500:	20000008 	.word	0x20000008

08002504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_IncTick+0x20>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_IncTick+0x24>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4413      	add	r3, r2
 8002514:	4a04      	ldr	r2, [pc, #16]	; (8002528 <HAL_IncTick+0x24>)
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	2000000c 	.word	0x2000000c
 8002528:	200003f4 	.word	0x200003f4

0800252c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return uwTick;
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <HAL_GetTick+0x14>)
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	200003f4 	.word	0x200003f4

08002544 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e033      	b.n	80025c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff fd64 	bl	8002030 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b00      	cmp	r3, #0
 8002580:	d118      	bne.n	80025b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800258a:	f023 0302 	bic.w	r3, r3, #2
 800258e:	f043 0202 	orr.w	r2, r3, #2
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fba2 	bl	8002ce0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f023 0303 	bic.w	r3, r3, #3
 80025aa:	f043 0201 	orr.w	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
 80025b2:	e001      	b.n	80025b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b084      	sub	sp, #16
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	bf0c      	ite	eq
 80025fe:	2301      	moveq	r3, #1
 8002600:	2300      	movne	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d049      	beq.n	80026a0 <HAL_ADC_IRQHandler+0xd6>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d046      	beq.n	80026a0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	d105      	bne.n	800262a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d12b      	bne.n	8002690 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800263c:	2b00      	cmp	r3, #0
 800263e:	d127      	bne.n	8002690 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800264a:	2b00      	cmp	r3, #0
 800264c:	d006      	beq.n	800265c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002658:	2b00      	cmp	r3, #0
 800265a:	d119      	bne.n	8002690 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0220 	bic.w	r2, r2, #32
 800266a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f9cb 	bl	8002a2c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f06f 0212 	mvn.w	r2, #18
 800269e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf0c      	ite	eq
 80026ae:	2301      	moveq	r3, #1
 80026b0:	2300      	movne	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c0:	2b80      	cmp	r3, #128	; 0x80
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d057      	beq.n	8002782 <HAL_ADC_IRQHandler+0x1b8>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d054      	beq.n	8002782 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d139      	bne.n	8002772 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002708:	2b00      	cmp	r3, #0
 800270a:	d006      	beq.n	800271a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002716:	2b00      	cmp	r3, #0
 8002718:	d12b      	bne.n	8002772 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002724:	2b00      	cmp	r3, #0
 8002726:	d124      	bne.n	8002772 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002732:	2b00      	cmp	r3, #0
 8002734:	d11d      	bne.n	8002772 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800273a:	2b00      	cmp	r3, #0
 800273c:	d119      	bne.n	8002772 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800274c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d105      	bne.n	8002772 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f043 0201 	orr.w	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fc32 	bl	8002fdc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 020c 	mvn.w	r2, #12
 8002780:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b40      	cmp	r3, #64	; 0x40
 80027a4:	bf0c      	ite	eq
 80027a6:	2301      	moveq	r3, #1
 80027a8:	2300      	movne	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d017      	beq.n	80027e4 <HAL_ADC_IRQHandler+0x21a>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d014      	beq.n	80027e4 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d10d      	bne.n	80027e4 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f93d 	bl	8002a54 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f06f 0201 	mvn.w	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	bf0c      	ite	eq
 80027f2:	2301      	moveq	r3, #1
 80027f4:	2300      	movne	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d015      	beq.n	8002844 <HAL_ADC_IRQHandler+0x27a>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d012      	beq.n	8002844 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f043 0202 	orr.w	r2, r3, #2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f06f 0220 	mvn.w	r2, #32
 8002832:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f917 	bl	8002a68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f06f 0220 	mvn.w	r2, #32
 8002842:	601a      	str	r2, [r3, #0]
  }
}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_ADC_Start_DMA+0x1e>
 8002866:	2302      	movs	r3, #2
 8002868:	e0ce      	b.n	8002a08 <HAL_ADC_Start_DMA+0x1bc>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d018      	beq.n	80028b2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002890:	4b5f      	ldr	r3, [pc, #380]	; (8002a10 <HAL_ADC_Start_DMA+0x1c4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a5f      	ldr	r2, [pc, #380]	; (8002a14 <HAL_ADC_Start_DMA+0x1c8>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	0c9a      	lsrs	r2, r3, #18
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028a4:	e002      	b.n	80028ac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f9      	bne.n	80028a6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c0:	d107      	bne.n	80028d2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	f040 8086 	bne.w	80029ee <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800290c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800291c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002920:	d106      	bne.n	8002930 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f023 0206 	bic.w	r2, r3, #6
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	645a      	str	r2, [r3, #68]	; 0x44
 800292e:	e002      	b.n	8002936 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800293e:	4b36      	ldr	r3, [pc, #216]	; (8002a18 <HAL_ADC_Start_DMA+0x1cc>)
 8002940:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002946:	4a35      	ldr	r2, [pc, #212]	; (8002a1c <HAL_ADC_Start_DMA+0x1d0>)
 8002948:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294e:	4a34      	ldr	r2, [pc, #208]	; (8002a20 <HAL_ADC_Start_DMA+0x1d4>)
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	4a33      	ldr	r2, [pc, #204]	; (8002a24 <HAL_ADC_Start_DMA+0x1d8>)
 8002958:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002962:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002972:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002982:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	334c      	adds	r3, #76	; 0x4c
 800298e:	4619      	mov	r1, r3
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f000 fcec 	bl	8003370 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10f      	bne.n	80029c4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d129      	bne.n	8002a06 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	e020      	b.n	8002a06 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <HAL_ADC_Start_DMA+0x1dc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d11b      	bne.n	8002a06 <HAL_ADC_Start_DMA+0x1ba>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d114      	bne.n	8002a06 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	e00b      	b.n	8002a06 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f043 0210 	orr.w	r2, r3, #16
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20000004 	.word	0x20000004
 8002a14:	431bde83 	.word	0x431bde83
 8002a18:	40012300 	.word	0x40012300
 8002a1c:	08002ed9 	.word	0x08002ed9
 8002a20:	08002f93 	.word	0x08002f93
 8002a24:	08002faf 	.word	0x08002faf
 8002a28:	40012000 	.word	0x40012000

08002a2c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x1c>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e113      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x244>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b09      	cmp	r3, #9
 8002aa6:	d925      	bls.n	8002af4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68d9      	ldr	r1, [r3, #12]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	3b1e      	subs	r3, #30
 8002abe:	2207      	movs	r2, #7
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	400a      	ands	r2, r1
 8002acc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68d9      	ldr	r1, [r3, #12]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4403      	add	r3, r0
 8002ae6:	3b1e      	subs	r3, #30
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	e022      	b.n	8002b3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6919      	ldr	r1, [r3, #16]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	2207      	movs	r2, #7
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	400a      	ands	r2, r1
 8002b16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6919      	ldr	r1, [r3, #16]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	4618      	mov	r0, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4403      	add	r3, r0
 8002b30:	409a      	lsls	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b06      	cmp	r3, #6
 8002b40:	d824      	bhi.n	8002b8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	3b05      	subs	r3, #5
 8002b54:	221f      	movs	r2, #31
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	400a      	ands	r2, r1
 8002b62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	4618      	mov	r0, r3
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3b05      	subs	r3, #5
 8002b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	635a      	str	r2, [r3, #52]	; 0x34
 8002b8a:	e04c      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	d824      	bhi.n	8002bde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b23      	subs	r3, #35	; 0x23
 8002ba6:	221f      	movs	r2, #31
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43da      	mvns	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	3b23      	subs	r3, #35	; 0x23
 8002bd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
 8002bdc:	e023      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	3b41      	subs	r3, #65	; 0x41
 8002bf0:	221f      	movs	r2, #31
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	3b41      	subs	r3, #65	; 0x41
 8002c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c26:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <HAL_ADC_ConfigChannel+0x250>)
 8002c28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a28      	ldr	r2, [pc, #160]	; (8002cd0 <HAL_ADC_ConfigChannel+0x254>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d10f      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1d8>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b12      	cmp	r3, #18
 8002c3a:	d10b      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <HAL_ADC_ConfigChannel+0x254>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d12b      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x23a>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1c      	ldr	r2, [pc, #112]	; (8002cd4 <HAL_ADC_ConfigChannel+0x258>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d003      	beq.n	8002c70 <HAL_ADC_ConfigChannel+0x1f4>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b11      	cmp	r3, #17
 8002c6e:	d122      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a11      	ldr	r2, [pc, #68]	; (8002cd4 <HAL_ADC_ConfigChannel+0x258>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d111      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_ADC_ConfigChannel+0x25c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <HAL_ADC_ConfigChannel+0x260>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	0c9a      	lsrs	r2, r3, #18
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ca8:	e002      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f9      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	40012300 	.word	0x40012300
 8002cd0:	40012000 	.word	0x40012000
 8002cd4:	10000012 	.word	0x10000012
 8002cd8:	20000004 	.word	0x20000004
 8002cdc:	431bde83 	.word	0x431bde83

08002ce0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ce8:	4b79      	ldr	r3, [pc, #484]	; (8002ed0 <ADC_Init+0x1f0>)
 8002cea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	021a      	lsls	r2, r3, #8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6899      	ldr	r1, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	4a58      	ldr	r2, [pc, #352]	; (8002ed4 <ADC_Init+0x1f4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6899      	ldr	r1, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002da8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6899      	ldr	r1, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	e00f      	b.n	8002dde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ddc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0202 	bic.w	r2, r2, #2
 8002dec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6899      	ldr	r1, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	7e1b      	ldrb	r3, [r3, #24]
 8002df8:	005a      	lsls	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01b      	beq.n	8002e44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6859      	ldr	r1, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	3b01      	subs	r3, #1
 8002e38:	035a      	lsls	r2, r3, #13
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	e007      	b.n	8002e54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	051a      	lsls	r2, r3, #20
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6899      	ldr	r1, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e96:	025a      	lsls	r2, r3, #9
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6899      	ldr	r1, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	029a      	lsls	r2, r3, #10
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	609a      	str	r2, [r3, #8]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	40012300 	.word	0x40012300
 8002ed4:	0f000001 	.word	0x0f000001

08002ed8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d13c      	bne.n	8002f6c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d12b      	bne.n	8002f64 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d127      	bne.n	8002f64 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d119      	bne.n	8002f64 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0220 	bic.w	r2, r2, #32
 8002f3e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d105      	bne.n	8002f64 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7ff fd61 	bl	8002a2c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f6a:	e00e      	b.n	8002f8a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7ff fd75 	bl	8002a68 <HAL_ADC_ErrorCallback>
}
 8002f7e:	e004      	b.n	8002f8a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
}
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7ff fd4d 	bl	8002a40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2240      	movs	r2, #64	; 0x40
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f043 0204 	orr.w	r2, r3, #4
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7ff fd4a 	bl	8002a68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fd4:	bf00      	nop
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800301c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003022:	4a04      	ldr	r2, [pc, #16]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	60d3      	str	r3, [r2, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <__NVIC_GetPriorityGrouping+0x18>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0307 	and.w	r3, r3, #7
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db0b      	blt.n	800307e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4907      	ldr	r1, [pc, #28]	; (800308c <__NVIC_EnableIRQ+0x38>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000e100 	.word	0xe000e100

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800315c:	d301      	bcc.n	8003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <SysTick_Config+0x40>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316a:	210f      	movs	r1, #15
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f7ff ff8e 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <SysTick_Config+0x40>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <SysTick_Config+0x40>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff29 	bl	8002ff0 <__NVIC_SetPriorityGrouping>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b8:	f7ff ff3e 	bl	8003038 <__NVIC_GetPriorityGrouping>
 80031bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7ff ff8e 	bl	80030e4 <NVIC_EncodePriority>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff5d 	bl	8003090 <__NVIC_SetPriority>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff31 	bl	8003054 <__NVIC_EnableIRQ>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ffa2 	bl	800314c <SysTick_Config>
 8003208:	4603      	mov	r3, r0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003220:	f7ff f984 	bl	800252c <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e099      	b.n	8003364 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003250:	e00f      	b.n	8003272 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003252:	f7ff f96b 	bl	800252c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b05      	cmp	r3, #5
 800325e:	d908      	bls.n	8003272 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2203      	movs	r2, #3
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e078      	b.n	8003364 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e8      	bne.n	8003252 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4b38      	ldr	r3, [pc, #224]	; (800336c <HAL_DMA_Init+0x158>)
 800328c:	4013      	ands	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800329e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d107      	bne.n	80032dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	4313      	orrs	r3, r2
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0307 	bic.w	r3, r3, #7
 80032f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	2b04      	cmp	r3, #4
 8003304:	d117      	bne.n	8003336 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00e      	beq.n	8003336 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fa91 	bl	8003840 <DMA_CheckFifoParam>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2240      	movs	r2, #64	; 0x40
 8003328:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003332:	2301      	movs	r3, #1
 8003334:	e016      	b.n	8003364 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fa48 	bl	80037d4 <DMA_CalcBaseAndBitshift>
 8003344:	4603      	mov	r3, r0
 8003346:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	223f      	movs	r2, #63	; 0x3f
 800334e:	409a      	lsls	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	f010803f 	.word	0xf010803f

08003370 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_DMA_Start_IT+0x26>
 8003392:	2302      	movs	r3, #2
 8003394:	e040      	b.n	8003418 <HAL_DMA_Start_IT+0xa8>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d12f      	bne.n	800340a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f9da 	bl	8003778 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	223f      	movs	r2, #63	; 0x3f
 80033ca:	409a      	lsls	r2, r3
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0216 	orr.w	r2, r2, #22
 80033de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d007      	beq.n	80033f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0208 	orr.w	r2, r2, #8
 80033f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e005      	b.n	8003416 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003412:	2302      	movs	r3, #2
 8003414:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003416:	7dfb      	ldrb	r3, [r7, #23]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d004      	beq.n	800343e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2280      	movs	r2, #128	; 0x80
 8003438:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e00c      	b.n	8003458 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2205      	movs	r2, #5
 8003442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0201 	bic.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003470:	4b92      	ldr	r3, [pc, #584]	; (80036bc <HAL_DMA_IRQHandler+0x258>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a92      	ldr	r2, [pc, #584]	; (80036c0 <HAL_DMA_IRQHandler+0x25c>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	0a9b      	lsrs	r3, r3, #10
 800347c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	2208      	movs	r2, #8
 8003490:	409a      	lsls	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01a      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d013      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0204 	bic.w	r2, r2, #4
 80034b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	2208      	movs	r2, #8
 80034be:	409a      	lsls	r2, r3
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	f043 0201 	orr.w	r2, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	2201      	movs	r2, #1
 80034d6:	409a      	lsls	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d012      	beq.n	8003506 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00b      	beq.n	8003506 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	2201      	movs	r2, #1
 80034f4:	409a      	lsls	r2, r3
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	f043 0202 	orr.w	r2, r3, #2
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	2204      	movs	r2, #4
 800350c:	409a      	lsls	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d012      	beq.n	800353c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00b      	beq.n	800353c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003528:	2204      	movs	r2, #4
 800352a:	409a      	lsls	r2, r3
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0204 	orr.w	r2, r3, #4
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	2210      	movs	r2, #16
 8003542:	409a      	lsls	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d043      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d03c      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	2210      	movs	r2, #16
 8003560:	409a      	lsls	r2, r3
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d018      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d108      	bne.n	8003594 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d024      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
 8003592:	e01f      	b.n	80035d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01b      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
 80035a4:	e016      	b.n	80035d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d107      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0208 	bic.w	r2, r2, #8
 80035c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	2220      	movs	r2, #32
 80035da:	409a      	lsls	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 808e 	beq.w	8003702 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8086 	beq.w	8003702 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fa:	2220      	movs	r2, #32
 80035fc:	409a      	lsls	r2, r3
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b05      	cmp	r3, #5
 800360c:	d136      	bne.n	800367c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0216 	bic.w	r2, r2, #22
 800361c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800362c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <HAL_DMA_IRQHandler+0x1da>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363a:	2b00      	cmp	r3, #0
 800363c:	d007      	beq.n	800364e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0208 	bic.w	r2, r2, #8
 800364c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	223f      	movs	r2, #63	; 0x3f
 8003654:	409a      	lsls	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366e:	2b00      	cmp	r3, #0
 8003670:	d07d      	beq.n	800376e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
        }
        return;
 800367a:	e078      	b.n	800376e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d01c      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d108      	bne.n	80036aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369c:	2b00      	cmp	r3, #0
 800369e:	d030      	beq.n	8003702 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
 80036a8:	e02b      	b.n	8003702 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d027      	beq.n	8003702 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	4798      	blx	r3
 80036ba:	e022      	b.n	8003702 <HAL_DMA_IRQHandler+0x29e>
 80036bc:	20000004 	.word	0x20000004
 80036c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10f      	bne.n	80036f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0210 	bic.w	r2, r2, #16
 80036e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	2b00      	cmp	r3, #0
 8003708:	d032      	beq.n	8003770 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d022      	beq.n	800375c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2205      	movs	r2, #5
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	3301      	adds	r3, #1
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	429a      	cmp	r2, r3
 8003738:	d307      	bcc.n	800374a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f2      	bne.n	800372e <HAL_DMA_IRQHandler+0x2ca>
 8003748:	e000      	b.n	800374c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800374a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	4798      	blx	r3
 800376c:	e000      	b.n	8003770 <HAL_DMA_IRQHandler+0x30c>
        return;
 800376e:	bf00      	nop
    }
  }
}
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop

08003778 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003794:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b40      	cmp	r3, #64	; 0x40
 80037a4:	d108      	bne.n	80037b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037b6:	e007      	b.n	80037c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	60da      	str	r2, [r3, #12]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	3b10      	subs	r3, #16
 80037e4:	4a14      	ldr	r2, [pc, #80]	; (8003838 <DMA_CalcBaseAndBitshift+0x64>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037ee:	4a13      	ldr	r2, [pc, #76]	; (800383c <DMA_CalcBaseAndBitshift+0x68>)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d909      	bls.n	8003816 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800380a:	f023 0303 	bic.w	r3, r3, #3
 800380e:	1d1a      	adds	r2, r3, #4
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	659a      	str	r2, [r3, #88]	; 0x58
 8003814:	e007      	b.n	8003826 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800381e:	f023 0303 	bic.w	r3, r3, #3
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	aaaaaaab 	.word	0xaaaaaaab
 800383c:	08006954 	.word	0x08006954

08003840 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11f      	bne.n	800389a <DMA_CheckFifoParam+0x5a>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d856      	bhi.n	800390e <DMA_CheckFifoParam+0xce>
 8003860:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <DMA_CheckFifoParam+0x28>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	08003879 	.word	0x08003879
 800386c:	0800388b 	.word	0x0800388b
 8003870:	08003879 	.word	0x08003879
 8003874:	0800390f 	.word	0x0800390f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d046      	beq.n	8003912 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003888:	e043      	b.n	8003912 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003892:	d140      	bne.n	8003916 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003898:	e03d      	b.n	8003916 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a2:	d121      	bne.n	80038e8 <DMA_CheckFifoParam+0xa8>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d837      	bhi.n	800391a <DMA_CheckFifoParam+0xda>
 80038aa:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <DMA_CheckFifoParam+0x70>)
 80038ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b0:	080038c1 	.word	0x080038c1
 80038b4:	080038c7 	.word	0x080038c7
 80038b8:	080038c1 	.word	0x080038c1
 80038bc:	080038d9 	.word	0x080038d9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
      break;
 80038c4:	e030      	b.n	8003928 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d025      	beq.n	800391e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d6:	e022      	b.n	800391e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038e0:	d11f      	bne.n	8003922 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038e6:	e01c      	b.n	8003922 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d903      	bls.n	80038f6 <DMA_CheckFifoParam+0xb6>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d003      	beq.n	80038fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038f4:	e018      	b.n	8003928 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
      break;
 80038fa:	e015      	b.n	8003928 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00e      	beq.n	8003926 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
      break;
 800390c:	e00b      	b.n	8003926 <DMA_CheckFifoParam+0xe6>
      break;
 800390e:	bf00      	nop
 8003910:	e00a      	b.n	8003928 <DMA_CheckFifoParam+0xe8>
      break;
 8003912:	bf00      	nop
 8003914:	e008      	b.n	8003928 <DMA_CheckFifoParam+0xe8>
      break;
 8003916:	bf00      	nop
 8003918:	e006      	b.n	8003928 <DMA_CheckFifoParam+0xe8>
      break;
 800391a:	bf00      	nop
 800391c:	e004      	b.n	8003928 <DMA_CheckFifoParam+0xe8>
      break;
 800391e:	bf00      	nop
 8003920:	e002      	b.n	8003928 <DMA_CheckFifoParam+0xe8>
      break;   
 8003922:	bf00      	nop
 8003924:	e000      	b.n	8003928 <DMA_CheckFifoParam+0xe8>
      break;
 8003926:	bf00      	nop
    }
  } 
  
  return status; 
 8003928:	7bfb      	ldrb	r3, [r7, #15]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop

08003938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003938:	b480      	push	{r7}
 800393a:	b089      	sub	sp, #36	; 0x24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800394a:	2300      	movs	r3, #0
 800394c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	e159      	b.n	8003c08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003954:	2201      	movs	r2, #1
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4013      	ands	r3, r2
 8003966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	429a      	cmp	r2, r3
 800396e:	f040 8148 	bne.w	8003c02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d005      	beq.n	800398a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003986:	2b02      	cmp	r3, #2
 8003988:	d130      	bne.n	80039ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	2203      	movs	r2, #3
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039c0:	2201      	movs	r2, #1
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 0201 	and.w	r2, r3, #1
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d017      	beq.n	8003a28 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	2203      	movs	r2, #3
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d123      	bne.n	8003a7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	08da      	lsrs	r2, r3, #3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3208      	adds	r2, #8
 8003a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	220f      	movs	r2, #15
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4013      	ands	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	08da      	lsrs	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3208      	adds	r2, #8
 8003a76:	69b9      	ldr	r1, [r7, #24]
 8003a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	2203      	movs	r2, #3
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4013      	ands	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 0203 	and.w	r2, r3, #3
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80a2 	beq.w	8003c02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	4b57      	ldr	r3, [pc, #348]	; (8003c20 <HAL_GPIO_Init+0x2e8>)
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	4a56      	ldr	r2, [pc, #344]	; (8003c20 <HAL_GPIO_Init+0x2e8>)
 8003ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003acc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ace:	4b54      	ldr	r3, [pc, #336]	; (8003c20 <HAL_GPIO_Init+0x2e8>)
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ada:	4a52      	ldr	r2, [pc, #328]	; (8003c24 <HAL_GPIO_Init+0x2ec>)
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	220f      	movs	r2, #15
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4013      	ands	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a49      	ldr	r2, [pc, #292]	; (8003c28 <HAL_GPIO_Init+0x2f0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d019      	beq.n	8003b3a <HAL_GPIO_Init+0x202>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a48      	ldr	r2, [pc, #288]	; (8003c2c <HAL_GPIO_Init+0x2f4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <HAL_GPIO_Init+0x1fe>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a47      	ldr	r2, [pc, #284]	; (8003c30 <HAL_GPIO_Init+0x2f8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00d      	beq.n	8003b32 <HAL_GPIO_Init+0x1fa>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a46      	ldr	r2, [pc, #280]	; (8003c34 <HAL_GPIO_Init+0x2fc>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <HAL_GPIO_Init+0x1f6>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a45      	ldr	r2, [pc, #276]	; (8003c38 <HAL_GPIO_Init+0x300>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d101      	bne.n	8003b2a <HAL_GPIO_Init+0x1f2>
 8003b26:	2304      	movs	r3, #4
 8003b28:	e008      	b.n	8003b3c <HAL_GPIO_Init+0x204>
 8003b2a:	2307      	movs	r3, #7
 8003b2c:	e006      	b.n	8003b3c <HAL_GPIO_Init+0x204>
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e004      	b.n	8003b3c <HAL_GPIO_Init+0x204>
 8003b32:	2302      	movs	r3, #2
 8003b34:	e002      	b.n	8003b3c <HAL_GPIO_Init+0x204>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <HAL_GPIO_Init+0x204>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	69fa      	ldr	r2, [r7, #28]
 8003b3e:	f002 0203 	and.w	r2, r2, #3
 8003b42:	0092      	lsls	r2, r2, #2
 8003b44:	4093      	lsls	r3, r2
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b4c:	4935      	ldr	r1, [pc, #212]	; (8003c24 <HAL_GPIO_Init+0x2ec>)
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	089b      	lsrs	r3, r3, #2
 8003b52:	3302      	adds	r3, #2
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b5a:	4b38      	ldr	r3, [pc, #224]	; (8003c3c <HAL_GPIO_Init+0x304>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b7e:	4a2f      	ldr	r2, [pc, #188]	; (8003c3c <HAL_GPIO_Init+0x304>)
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b84:	4b2d      	ldr	r3, [pc, #180]	; (8003c3c <HAL_GPIO_Init+0x304>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ba8:	4a24      	ldr	r2, [pc, #144]	; (8003c3c <HAL_GPIO_Init+0x304>)
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bae:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <HAL_GPIO_Init+0x304>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bd2:	4a1a      	ldr	r2, [pc, #104]	; (8003c3c <HAL_GPIO_Init+0x304>)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bd8:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <HAL_GPIO_Init+0x304>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bfc:	4a0f      	ldr	r2, [pc, #60]	; (8003c3c <HAL_GPIO_Init+0x304>)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	3301      	adds	r3, #1
 8003c06:	61fb      	str	r3, [r7, #28]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	2b0f      	cmp	r3, #15
 8003c0c:	f67f aea2 	bls.w	8003954 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c10:	bf00      	nop
 8003c12:	bf00      	nop
 8003c14:	3724      	adds	r7, #36	; 0x24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40013800 	.word	0x40013800
 8003c28:	40020000 	.word	0x40020000
 8003c2c:	40020400 	.word	0x40020400
 8003c30:	40020800 	.word	0x40020800
 8003c34:	40020c00 	.word	0x40020c00
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40013c00 	.word	0x40013c00

08003c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	887b      	ldrh	r3, [r7, #2]
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
 8003c5c:	e001      	b.n	8003c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	807b      	strh	r3, [r7, #2]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c80:	787b      	ldrb	r3, [r7, #1]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c86:	887a      	ldrh	r2, [r7, #2]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c8c:	e003      	b.n	8003c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c8e:	887b      	ldrh	r3, [r7, #2]
 8003c90:	041a      	lsls	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	619a      	str	r2, [r3, #24]
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e264      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d075      	beq.n	8003dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cc2:	4ba3      	ldr	r3, [pc, #652]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cce:	4ba0      	ldr	r3, [pc, #640]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d112      	bne.n	8003d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cda:	4b9d      	ldr	r3, [pc, #628]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ce6:	d10b      	bne.n	8003d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce8:	4b99      	ldr	r3, [pc, #612]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d05b      	beq.n	8003dac <HAL_RCC_OscConfig+0x108>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d157      	bne.n	8003dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e23f      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d08:	d106      	bne.n	8003d18 <HAL_RCC_OscConfig+0x74>
 8003d0a:	4b91      	ldr	r3, [pc, #580]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a90      	ldr	r2, [pc, #576]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e01d      	b.n	8003d54 <HAL_RCC_OscConfig+0xb0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x98>
 8003d22:	4b8b      	ldr	r3, [pc, #556]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a8a      	ldr	r2, [pc, #552]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b88      	ldr	r3, [pc, #544]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a87      	ldr	r2, [pc, #540]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_OscConfig+0xb0>
 8003d3c:	4b84      	ldr	r3, [pc, #528]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a83      	ldr	r2, [pc, #524]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	4b81      	ldr	r3, [pc, #516]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a80      	ldr	r2, [pc, #512]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d013      	beq.n	8003d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fbe6 	bl	800252c <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fe fbe2 	bl	800252c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e204      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	4b76      	ldr	r3, [pc, #472]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0xc0>
 8003d82:	e014      	b.n	8003dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d84:	f7fe fbd2 	bl	800252c <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d8c:	f7fe fbce 	bl	800252c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	; 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e1f0      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9e:	4b6c      	ldr	r3, [pc, #432]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0xe8>
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d063      	beq.n	8003e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dba:	4b65      	ldr	r3, [pc, #404]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc6:	4b62      	ldr	r3, [pc, #392]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d11c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd2:	4b5f      	ldr	r3, [pc, #380]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d116      	bne.n	8003e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dde:	4b5c      	ldr	r3, [pc, #368]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_RCC_OscConfig+0x152>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d001      	beq.n	8003df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e1c4      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df6:	4b56      	ldr	r3, [pc, #344]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4952      	ldr	r1, [pc, #328]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0a:	e03a      	b.n	8003e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d020      	beq.n	8003e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e14:	4b4f      	ldr	r3, [pc, #316]	; (8003f54 <HAL_RCC_OscConfig+0x2b0>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1a:	f7fe fb87 	bl	800252c <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e22:	f7fe fb83 	bl	800252c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e1a5      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e34:	4b46      	ldr	r3, [pc, #280]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e40:	4b43      	ldr	r3, [pc, #268]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4940      	ldr	r1, [pc, #256]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]
 8003e54:	e015      	b.n	8003e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e56:	4b3f      	ldr	r3, [pc, #252]	; (8003f54 <HAL_RCC_OscConfig+0x2b0>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fe fb66 	bl	800252c <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e64:	f7fe fb62 	bl	800252c <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e184      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e76:	4b36      	ldr	r3, [pc, #216]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d030      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d016      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e96:	4b30      	ldr	r3, [pc, #192]	; (8003f58 <HAL_RCC_OscConfig+0x2b4>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9c:	f7fe fb46 	bl	800252c <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea4:	f7fe fb42 	bl	800252c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e164      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb6:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x200>
 8003ec2:	e015      	b.n	8003ef0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec4:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <HAL_RCC_OscConfig+0x2b4>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eca:	f7fe fb2f 	bl	800252c <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed2:	f7fe fb2b 	bl	800252c <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e14d      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f0      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80a0 	beq.w	800403e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f02:	4b13      	ldr	r3, [pc, #76]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10f      	bne.n	8003f2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	4a0e      	ldr	r2, [pc, #56]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1e:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f26:	60bb      	str	r3, [r7, #8]
 8003f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_RCC_OscConfig+0x2b8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d121      	bne.n	8003f7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f3a:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <HAL_RCC_OscConfig+0x2b8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a07      	ldr	r2, [pc, #28]	; (8003f5c <HAL_RCC_OscConfig+0x2b8>)
 8003f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f46:	f7fe faf1 	bl	800252c <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	e011      	b.n	8003f72 <HAL_RCC_OscConfig+0x2ce>
 8003f4e:	bf00      	nop
 8003f50:	40023800 	.word	0x40023800
 8003f54:	42470000 	.word	0x42470000
 8003f58:	42470e80 	.word	0x42470e80
 8003f5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f60:	f7fe fae4 	bl	800252c <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e106      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f72:	4b85      	ldr	r3, [pc, #532]	; (8004188 <HAL_RCC_OscConfig+0x4e4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d106      	bne.n	8003f94 <HAL_RCC_OscConfig+0x2f0>
 8003f86:	4b81      	ldr	r3, [pc, #516]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	4a80      	ldr	r2, [pc, #512]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	6713      	str	r3, [r2, #112]	; 0x70
 8003f92:	e01c      	b.n	8003fce <HAL_RCC_OscConfig+0x32a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b05      	cmp	r3, #5
 8003f9a:	d10c      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x312>
 8003f9c:	4b7b      	ldr	r3, [pc, #492]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a7a      	ldr	r2, [pc, #488]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003fa2:	f043 0304 	orr.w	r3, r3, #4
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa8:	4b78      	ldr	r3, [pc, #480]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	4a77      	ldr	r2, [pc, #476]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb4:	e00b      	b.n	8003fce <HAL_RCC_OscConfig+0x32a>
 8003fb6:	4b75      	ldr	r3, [pc, #468]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	4a74      	ldr	r2, [pc, #464]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc2:	4b72      	ldr	r3, [pc, #456]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	4a71      	ldr	r2, [pc, #452]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d015      	beq.n	8004002 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd6:	f7fe faa9 	bl	800252c <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fe faa5 	bl	800252c <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e0c5      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff4:	4b65      	ldr	r3, [pc, #404]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0ee      	beq.n	8003fde <HAL_RCC_OscConfig+0x33a>
 8004000:	e014      	b.n	800402c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004002:	f7fe fa93 	bl	800252c <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004008:	e00a      	b.n	8004020 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fe fa8f 	bl	800252c <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	; 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e0af      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004020:	4b5a      	ldr	r3, [pc, #360]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1ee      	bne.n	800400a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d105      	bne.n	800403e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004032:	4b56      	ldr	r3, [pc, #344]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	4a55      	ldr	r2, [pc, #340]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8004038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800403c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 809b 	beq.w	800417e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004048:	4b50      	ldr	r3, [pc, #320]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b08      	cmp	r3, #8
 8004052:	d05c      	beq.n	800410e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d141      	bne.n	80040e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405c:	4b4c      	ldr	r3, [pc, #304]	; (8004190 <HAL_RCC_OscConfig+0x4ec>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004062:	f7fe fa63 	bl	800252c <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800406a:	f7fe fa5f 	bl	800252c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e081      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407c:	4b43      	ldr	r3, [pc, #268]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f0      	bne.n	800406a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	019b      	lsls	r3, r3, #6
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	3b01      	subs	r3, #1
 80040a2:	041b      	lsls	r3, r3, #16
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	4937      	ldr	r1, [pc, #220]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b2:	4b37      	ldr	r3, [pc, #220]	; (8004190 <HAL_RCC_OscConfig+0x4ec>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe fa38 	bl	800252c <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c0:	f7fe fa34 	bl	800252c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e056      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d2:	4b2e      	ldr	r3, [pc, #184]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x41c>
 80040de:	e04e      	b.n	800417e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e0:	4b2b      	ldr	r3, [pc, #172]	; (8004190 <HAL_RCC_OscConfig+0x4ec>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e6:	f7fe fa21 	bl	800252c <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ee:	f7fe fa1d 	bl	800252c <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e03f      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004100:	4b22      	ldr	r3, [pc, #136]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f0      	bne.n	80040ee <HAL_RCC_OscConfig+0x44a>
 800410c:	e037      	b.n	800417e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e032      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800411a:	4b1c      	ldr	r3, [pc, #112]	; (800418c <HAL_RCC_OscConfig+0x4e8>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d028      	beq.n	800417a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d121      	bne.n	800417a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004140:	429a      	cmp	r2, r3
 8004142:	d11a      	bne.n	800417a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800414a:	4013      	ands	r3, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004150:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004152:	4293      	cmp	r3, r2
 8004154:	d111      	bne.n	800417a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	085b      	lsrs	r3, r3, #1
 8004162:	3b01      	subs	r3, #1
 8004164:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d107      	bne.n	800417a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d001      	beq.n	800417e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40007000 	.word	0x40007000
 800418c:	40023800 	.word	0x40023800
 8004190:	42470060 	.word	0x42470060

08004194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0cc      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a8:	4b68      	ldr	r3, [pc, #416]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d90c      	bls.n	80041d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b6:	4b65      	ldr	r3, [pc, #404]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	4b63      	ldr	r3, [pc, #396]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0b8      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d020      	beq.n	800421e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041e8:	4b59      	ldr	r3, [pc, #356]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	4a58      	ldr	r2, [pc, #352]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004200:	4b53      	ldr	r3, [pc, #332]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	4a52      	ldr	r2, [pc, #328]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800420a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800420c:	4b50      	ldr	r3, [pc, #320]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	494d      	ldr	r1, [pc, #308]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d044      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d107      	bne.n	8004242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004232:	4b47      	ldr	r3, [pc, #284]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d119      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e07f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d003      	beq.n	8004252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800424e:	2b03      	cmp	r3, #3
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004252:	4b3f      	ldr	r3, [pc, #252]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e06f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004262:	4b3b      	ldr	r3, [pc, #236]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e067      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004272:	4b37      	ldr	r3, [pc, #220]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f023 0203 	bic.w	r2, r3, #3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4934      	ldr	r1, [pc, #208]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	4313      	orrs	r3, r2
 8004282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004284:	f7fe f952 	bl	800252c <HAL_GetTick>
 8004288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428c:	f7fe f94e 	bl	800252c <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e04f      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a2:	4b2b      	ldr	r3, [pc, #172]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 020c 	and.w	r2, r3, #12
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d1eb      	bne.n	800428c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d20c      	bcs.n	80042dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b22      	ldr	r3, [pc, #136]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_RCC_ClockConfig+0x1b8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e032      	b.n	8004342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4916      	ldr	r1, [pc, #88]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d009      	beq.n	800431a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	490e      	ldr	r1, [pc, #56]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800431a:	f000 f821 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 800431e:	4602      	mov	r2, r0
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	490a      	ldr	r1, [pc, #40]	; (8004354 <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	5ccb      	ldrb	r3, [r1, r3]
 800432e:	fa22 f303 	lsr.w	r3, r2, r3
 8004332:	4a09      	ldr	r2, [pc, #36]	; (8004358 <HAL_RCC_ClockConfig+0x1c4>)
 8004334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_RCC_ClockConfig+0x1c8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe f8b2 	bl	80024a4 <HAL_InitTick>

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40023c00 	.word	0x40023c00
 8004350:	40023800 	.word	0x40023800
 8004354:	0800693c 	.word	0x0800693c
 8004358:	20000004 	.word	0x20000004
 800435c:	20000008 	.word	0x20000008

08004360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004360:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004364:	b084      	sub	sp, #16
 8004366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	2300      	movs	r3, #0
 8004372:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004378:	4b67      	ldr	r3, [pc, #412]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d00d      	beq.n	80043a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004384:	2b08      	cmp	r3, #8
 8004386:	f200 80bd 	bhi.w	8004504 <HAL_RCC_GetSysClockFreq+0x1a4>
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0x34>
 800438e:	2b04      	cmp	r3, #4
 8004390:	d003      	beq.n	800439a <HAL_RCC_GetSysClockFreq+0x3a>
 8004392:	e0b7      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004394:	4b61      	ldr	r3, [pc, #388]	; (800451c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004396:	60bb      	str	r3, [r7, #8]
       break;
 8004398:	e0b7      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800439a:	4b61      	ldr	r3, [pc, #388]	; (8004520 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800439c:	60bb      	str	r3, [r7, #8]
      break;
 800439e:	e0b4      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043a0:	4b5d      	ldr	r3, [pc, #372]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043aa:	4b5b      	ldr	r3, [pc, #364]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d04d      	beq.n	8004452 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b6:	4b58      	ldr	r3, [pc, #352]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	099b      	lsrs	r3, r3, #6
 80043bc:	461a      	mov	r2, r3
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	ea02 0800 	and.w	r8, r2, r0
 80043ce:	ea03 0901 	and.w	r9, r3, r1
 80043d2:	4640      	mov	r0, r8
 80043d4:	4649      	mov	r1, r9
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	014b      	lsls	r3, r1, #5
 80043e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043e4:	0142      	lsls	r2, r0, #5
 80043e6:	4610      	mov	r0, r2
 80043e8:	4619      	mov	r1, r3
 80043ea:	ebb0 0008 	subs.w	r0, r0, r8
 80043ee:	eb61 0109 	sbc.w	r1, r1, r9
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	018b      	lsls	r3, r1, #6
 80043fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004400:	0182      	lsls	r2, r0, #6
 8004402:	1a12      	subs	r2, r2, r0
 8004404:	eb63 0301 	sbc.w	r3, r3, r1
 8004408:	f04f 0000 	mov.w	r0, #0
 800440c:	f04f 0100 	mov.w	r1, #0
 8004410:	00d9      	lsls	r1, r3, #3
 8004412:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004416:	00d0      	lsls	r0, r2, #3
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	eb12 0208 	adds.w	r2, r2, r8
 8004420:	eb43 0309 	adc.w	r3, r3, r9
 8004424:	f04f 0000 	mov.w	r0, #0
 8004428:	f04f 0100 	mov.w	r1, #0
 800442c:	0259      	lsls	r1, r3, #9
 800442e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004432:	0250      	lsls	r0, r2, #9
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	461a      	mov	r2, r3
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	f7fc f908 	bl	8000658 <__aeabi_uldivmod>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4613      	mov	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e04a      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004452:	4b31      	ldr	r3, [pc, #196]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	099b      	lsrs	r3, r3, #6
 8004458:	461a      	mov	r2, r3
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	ea02 0400 	and.w	r4, r2, r0
 800446a:	ea03 0501 	and.w	r5, r3, r1
 800446e:	4620      	mov	r0, r4
 8004470:	4629      	mov	r1, r5
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	014b      	lsls	r3, r1, #5
 800447c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004480:	0142      	lsls	r2, r0, #5
 8004482:	4610      	mov	r0, r2
 8004484:	4619      	mov	r1, r3
 8004486:	1b00      	subs	r0, r0, r4
 8004488:	eb61 0105 	sbc.w	r1, r1, r5
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	018b      	lsls	r3, r1, #6
 8004496:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800449a:	0182      	lsls	r2, r0, #6
 800449c:	1a12      	subs	r2, r2, r0
 800449e:	eb63 0301 	sbc.w	r3, r3, r1
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	00d9      	lsls	r1, r3, #3
 80044ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044b0:	00d0      	lsls	r0, r2, #3
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	1912      	adds	r2, r2, r4
 80044b8:	eb45 0303 	adc.w	r3, r5, r3
 80044bc:	f04f 0000 	mov.w	r0, #0
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	0299      	lsls	r1, r3, #10
 80044c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80044ca:	0290      	lsls	r0, r2, #10
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4610      	mov	r0, r2
 80044d2:	4619      	mov	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	461a      	mov	r2, r3
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	f7fc f8bc 	bl	8000658 <__aeabi_uldivmod>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4613      	mov	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	3301      	adds	r3, #1
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	60bb      	str	r3, [r7, #8]
      break;
 8004502:	e002      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004506:	60bb      	str	r3, [r7, #8]
      break;
 8004508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800450a:	68bb      	ldr	r3, [r7, #8]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800
 800451c:	00f42400 	.word	0x00f42400
 8004520:	007a1200 	.word	0x007a1200

08004524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <HAL_RCC_GetHCLKFreq+0x14>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000004 	.word	0x20000004

0800453c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004540:	f7ff fff0 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	0a9b      	lsrs	r3, r3, #10
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4903      	ldr	r1, [pc, #12]	; (8004560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	0800694c 	.word	0x0800694c

08004564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004568:	f7ff ffdc 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 800456c:	4602      	mov	r2, r0
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	0b5b      	lsrs	r3, r3, #13
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4903      	ldr	r1, [pc, #12]	; (8004588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800457a:	5ccb      	ldrb	r3, [r1, r3]
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004580:	4618      	mov	r0, r3
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40023800 	.word	0x40023800
 8004588:	0800694c 	.word	0x0800694c

0800458c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e07b      	b.n	8004696 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d108      	bne.n	80045b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ae:	d009      	beq.n	80045c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	61da      	str	r2, [r3, #28]
 80045b6:	e005      	b.n	80045c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fd fda4 	bl	800212c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004648:	ea42 0103 	orr.w	r1, r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004650:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	f003 0104 	and.w	r1, r3, #4
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	f003 0210 	and.w	r2, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004684:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	4613      	mov	r3, r2
 80046ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_SPI_Transmit_IT+0x20>
 80046bc:	2302      	movs	r3, #2
 80046be:	e06f      	b.n	80047a0 <HAL_SPI_Transmit_IT+0x100>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_SPI_Transmit_IT+0x34>
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046d8:	e05d      	b.n	8004796 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d002      	beq.n	80046ec <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80046e6:	2302      	movs	r3, #2
 80046e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046ea:	e054      	b.n	8004796 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2203      	movs	r2, #3
 80046f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	88fa      	ldrh	r2, [r7, #6]
 800470a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4a1f      	ldr	r2, [pc, #124]	; (80047ac <HAL_SPI_Transmit_IT+0x10c>)
 8004730:	645a      	str	r2, [r3, #68]	; 0x44
 8004732:	e002      	b.n	800473a <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <HAL_SPI_Transmit_IT+0x110>)
 8004738:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004742:	d10f      	bne.n	8004764 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004752:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004762:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004772:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477e:	2b40      	cmp	r3, #64	; 0x40
 8004780:	d008      	beq.n	8004794 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	e000      	b.n	8004796 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8004794:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800479e:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	08004a37 	.word	0x08004a37
 80047b0:	080049f1 	.word	0x080049f1

080047b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	099b      	lsrs	r3, r3, #6
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10f      	bne.n	80047f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	099b      	lsrs	r3, r3, #6
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d004      	beq.n	80047f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	4798      	blx	r3
    return;
 80047f6:	e0d7      	b.n	80049a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_SPI_IRQHandler+0x66>
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	09db      	lsrs	r3, r3, #7
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
    return;
 8004818:	e0c6      	b.n	80049a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10c      	bne.n	8004840 <HAL_SPI_IRQHandler+0x8c>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	099b      	lsrs	r3, r3, #6
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	0a1b      	lsrs	r3, r3, #8
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 80b4 	beq.w	80049a8 <HAL_SPI_IRQHandler+0x1f4>
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80ad 	beq.w	80049a8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	099b      	lsrs	r3, r3, #6
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d023      	beq.n	80048a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b03      	cmp	r3, #3
 8004864:	d011      	beq.n	800488a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486a:	f043 0204 	orr.w	r2, r3, #4
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	e00b      	b.n	80048a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	693b      	ldr	r3, [r7, #16]
        return;
 80048a0:	e082      	b.n	80049a8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d014      	beq.n	80048d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	f043 0201 	orr.w	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00c      	beq.n	80048fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e8:	f043 0208 	orr.w	r2, r3, #8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80048f0:	2300      	movs	r3, #0
 80048f2:	60bb      	str	r3, [r7, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004902:	2b00      	cmp	r3, #0
 8004904:	d04f      	beq.n	80049a6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004914:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d104      	bne.n	8004932 <HAL_SPI_IRQHandler+0x17e>
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d034      	beq.n	800499c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0203 	bic.w	r2, r2, #3
 8004940:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d011      	beq.n	800496e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494e:	4a18      	ldr	r2, [pc, #96]	; (80049b0 <HAL_SPI_IRQHandler+0x1fc>)
 8004950:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe fd62 	bl	8003420 <HAL_DMA_Abort_IT>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004972:	2b00      	cmp	r3, #0
 8004974:	d016      	beq.n	80049a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497a:	4a0d      	ldr	r2, [pc, #52]	; (80049b0 <HAL_SPI_IRQHandler+0x1fc>)
 800497c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe fd4c 	bl	8003420 <HAL_DMA_Abort_IT>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800499a:	e003      	b.n	80049a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f809 	bl	80049b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80049a2:	e000      	b.n	80049a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80049a4:	bf00      	nop
    return;
 80049a6:	bf00      	nop
  }
}
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	080049c9 	.word	0x080049c9

080049b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff ffe6 	bl	80049b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	330c      	adds	r3, #12
 8004a02:	7812      	ldrb	r2, [r2, #0]
 8004a04:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f8f1 	bl	8004c10 <SPI_CloseTx_ISR>
  }
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	881a      	ldrh	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	1c9a      	adds	r2, r3, #2
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d102      	bne.n	8004a72 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f8cf 	bl	8004c10 <SPI_CloseTx_ISR>
  }
}
 8004a72:	bf00      	nop
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a8c:	f7fd fd4e 	bl	800252c <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	4413      	add	r3, r2
 8004a9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a9c:	f7fd fd46 	bl	800252c <HAL_GetTick>
 8004aa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004aa2:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	015b      	lsls	r3, r3, #5
 8004aa8:	0d1b      	lsrs	r3, r3, #20
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	fb02 f303 	mul.w	r3, r2, r3
 8004ab0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ab2:	e054      	b.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aba:	d050      	beq.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004abc:	f7fd fd36 	bl	800252c <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d902      	bls.n	8004ad2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d13d      	bne.n	8004b4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ae0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aea:	d111      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af4:	d004      	beq.n	8004b00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afe:	d107      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b18:	d10f      	bne.n	8004b3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e017      	b.n	8004b7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4013      	ands	r3, r2
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	2300      	movne	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d19b      	bne.n	8004ab4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000004 	.word	0x20000004

08004b8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b98:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <SPI_EndRxTxTransaction+0x7c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1b      	ldr	r2, [pc, #108]	; (8004c0c <SPI_EndRxTxTransaction+0x80>)
 8004b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba2:	0d5b      	lsrs	r3, r3, #21
 8004ba4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ba8:	fb02 f303 	mul.w	r3, r2, r3
 8004bac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bb6:	d112      	bne.n	8004bde <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2180      	movs	r1, #128	; 0x80
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f7ff ff5a 	bl	8004a7c <SPI_WaitFlagStateUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d016      	beq.n	8004bfc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	f043 0220 	orr.w	r2, r3, #32
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e00f      	b.n	8004bfe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf4:	2b80      	cmp	r3, #128	; 0x80
 8004bf6:	d0f2      	beq.n	8004bde <SPI_EndRxTxTransaction+0x52>
 8004bf8:	e000      	b.n	8004bfc <SPI_EndRxTxTransaction+0x70>
        break;
 8004bfa:	bf00      	nop
  }

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000004 	.word	0x20000004
 8004c0c:	165e9f81 	.word	0x165e9f81

08004c10 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004c18:	4b2c      	ldr	r3, [pc, #176]	; (8004ccc <SPI_CloseTx_ISR+0xbc>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a2c      	ldr	r2, [pc, #176]	; (8004cd0 <SPI_CloseTx_ISR+0xc0>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	0a5b      	lsrs	r3, r3, #9
 8004c24:	2264      	movs	r2, #100	; 0x64
 8004c26:	fb02 f303 	mul.w	r3, r2, r3
 8004c2a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c2c:	f7fd fc7e 	bl	800252c <HAL_GetTick>
 8004c30:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d106      	bne.n	8004c46 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3c:	f043 0220 	orr.w	r2, r3, #32
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c44:	e009      	b.n	8004c5a <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0eb      	beq.n	8004c32 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c68:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	2164      	movs	r1, #100	; 0x64
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff ff8c 	bl	8004b8c <SPI_EndRxTxTransaction>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7e:	f043 0220 	orr.w	r2, r3, #32
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff fe7d 	bl	80049b4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004cba:	e002      	b.n	8004cc2 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7fd f90b 	bl	8001ed8 <HAL_SPI_TxCpltCallback>
}
 8004cc2:	bf00      	nop
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000004 	.word	0x20000004
 8004cd0:	057619f1 	.word	0x057619f1

08004cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e041      	b.n	8004d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fd fa66 	bl	80021cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	4619      	mov	r1, r3
 8004d12:	4610      	mov	r0, r2
 8004d14:	f000 fade 	bl	80052d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d001      	beq.n	8004d8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e03c      	b.n	8004e06 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1e      	ldr	r2, [pc, #120]	; (8004e14 <HAL_TIM_Base_Start+0xa0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d018      	beq.n	8004dd0 <HAL_TIM_Base_Start+0x5c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da6:	d013      	beq.n	8004dd0 <HAL_TIM_Base_Start+0x5c>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a1a      	ldr	r2, [pc, #104]	; (8004e18 <HAL_TIM_Base_Start+0xa4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00e      	beq.n	8004dd0 <HAL_TIM_Base_Start+0x5c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a19      	ldr	r2, [pc, #100]	; (8004e1c <HAL_TIM_Base_Start+0xa8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d009      	beq.n	8004dd0 <HAL_TIM_Base_Start+0x5c>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a17      	ldr	r2, [pc, #92]	; (8004e20 <HAL_TIM_Base_Start+0xac>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_TIM_Base_Start+0x5c>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a16      	ldr	r2, [pc, #88]	; (8004e24 <HAL_TIM_Base_Start+0xb0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d111      	bne.n	8004df4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b06      	cmp	r3, #6
 8004de0:	d010      	beq.n	8004e04 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0201 	orr.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df2:	e007      	b.n	8004e04 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40010000 	.word	0x40010000
 8004e18:	40000400 	.word	0x40000400
 8004e1c:	40000800 	.word	0x40000800
 8004e20:	40000c00 	.word	0x40000c00
 8004e24:	40014000 	.word	0x40014000

08004e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d001      	beq.n	8004e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e044      	b.n	8004eca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1e      	ldr	r2, [pc, #120]	; (8004ed8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d018      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x6c>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6a:	d013      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x6c>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1a      	ldr	r2, [pc, #104]	; (8004edc <HAL_TIM_Base_Start_IT+0xb4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00e      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x6c>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a19      	ldr	r2, [pc, #100]	; (8004ee0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d009      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x6c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x6c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a16      	ldr	r2, [pc, #88]	; (8004ee8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d111      	bne.n	8004eb8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b06      	cmp	r3, #6
 8004ea4:	d010      	beq.n	8004ec8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0201 	orr.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	e007      	b.n	8004ec8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	40000c00 	.word	0x40000c00
 8004ee8:	40014000 	.word	0x40014000

08004eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d122      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d11b      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f06f 0202 	mvn.w	r2, #2
 8004f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f9b2 	bl	8005298 <HAL_TIM_IC_CaptureCallback>
 8004f34:	e005      	b.n	8004f42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f9a4 	bl	8005284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f9b5 	bl	80052ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d122      	bne.n	8004f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d11b      	bne.n	8004f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0204 	mvn.w	r2, #4
 8004f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f988 	bl	8005298 <HAL_TIM_IC_CaptureCallback>
 8004f88:	e005      	b.n	8004f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f97a 	bl	8005284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f98b 	bl	80052ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0308 	and.w	r3, r3, #8
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d122      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d11b      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f06f 0208 	mvn.w	r2, #8
 8004fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f95e 	bl	8005298 <HAL_TIM_IC_CaptureCallback>
 8004fdc:	e005      	b.n	8004fea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f950 	bl	8005284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f961 	bl	80052ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0310 	and.w	r3, r3, #16
 8004ffa:	2b10      	cmp	r3, #16
 8004ffc:	d122      	bne.n	8005044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b10      	cmp	r3, #16
 800500a:	d11b      	bne.n	8005044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0210 	mvn.w	r2, #16
 8005014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2208      	movs	r2, #8
 800501a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f934 	bl	8005298 <HAL_TIM_IC_CaptureCallback>
 8005030:	e005      	b.n	800503e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f926 	bl	8005284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f937 	bl	80052ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b01      	cmp	r3, #1
 8005050:	d10e      	bne.n	8005070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b01      	cmp	r3, #1
 800505e:	d107      	bne.n	8005070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0201 	mvn.w	r2, #1
 8005068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fc ff4a 	bl	8001f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507a:	2b80      	cmp	r3, #128	; 0x80
 800507c:	d10e      	bne.n	800509c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005088:	2b80      	cmp	r3, #128	; 0x80
 800508a:	d107      	bne.n	800509c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 faae 	bl	80055f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a6:	2b40      	cmp	r3, #64	; 0x40
 80050a8:	d10e      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b4:	2b40      	cmp	r3, #64	; 0x40
 80050b6:	d107      	bne.n	80050c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f8fc 	bl	80052c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d10e      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	d107      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0220 	mvn.w	r2, #32
 80050ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fa78 	bl	80055e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050f4:	bf00      	nop
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_TIM_ConfigClockSource+0x18>
 8005110:	2302      	movs	r3, #2
 8005112:	e0b3      	b.n	800527c <HAL_TIM_ConfigClockSource+0x180>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005132:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800513a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800514c:	d03e      	beq.n	80051cc <HAL_TIM_ConfigClockSource+0xd0>
 800514e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005152:	f200 8087 	bhi.w	8005264 <HAL_TIM_ConfigClockSource+0x168>
 8005156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515a:	f000 8085 	beq.w	8005268 <HAL_TIM_ConfigClockSource+0x16c>
 800515e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005162:	d87f      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x168>
 8005164:	2b70      	cmp	r3, #112	; 0x70
 8005166:	d01a      	beq.n	800519e <HAL_TIM_ConfigClockSource+0xa2>
 8005168:	2b70      	cmp	r3, #112	; 0x70
 800516a:	d87b      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x168>
 800516c:	2b60      	cmp	r3, #96	; 0x60
 800516e:	d050      	beq.n	8005212 <HAL_TIM_ConfigClockSource+0x116>
 8005170:	2b60      	cmp	r3, #96	; 0x60
 8005172:	d877      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x168>
 8005174:	2b50      	cmp	r3, #80	; 0x50
 8005176:	d03c      	beq.n	80051f2 <HAL_TIM_ConfigClockSource+0xf6>
 8005178:	2b50      	cmp	r3, #80	; 0x50
 800517a:	d873      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x168>
 800517c:	2b40      	cmp	r3, #64	; 0x40
 800517e:	d058      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0x136>
 8005180:	2b40      	cmp	r3, #64	; 0x40
 8005182:	d86f      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x168>
 8005184:	2b30      	cmp	r3, #48	; 0x30
 8005186:	d064      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x156>
 8005188:	2b30      	cmp	r3, #48	; 0x30
 800518a:	d86b      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x168>
 800518c:	2b20      	cmp	r3, #32
 800518e:	d060      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x156>
 8005190:	2b20      	cmp	r3, #32
 8005192:	d867      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x168>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d05c      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x156>
 8005198:	2b10      	cmp	r3, #16
 800519a:	d05a      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800519c:	e062      	b.n	8005264 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6818      	ldr	r0, [r3, #0]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	6899      	ldr	r1, [r3, #8]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f000 f98b 	bl	80054c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	609a      	str	r2, [r3, #8]
      break;
 80051ca:	e04e      	b.n	800526a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	6899      	ldr	r1, [r3, #8]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f000 f974 	bl	80054c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ee:	609a      	str	r2, [r3, #8]
      break;
 80051f0:	e03b      	b.n	800526a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6859      	ldr	r1, [r3, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	461a      	mov	r2, r3
 8005200:	f000 f8e8 	bl	80053d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2150      	movs	r1, #80	; 0x50
 800520a:	4618      	mov	r0, r3
 800520c:	f000 f941 	bl	8005492 <TIM_ITRx_SetConfig>
      break;
 8005210:	e02b      	b.n	800526a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	6859      	ldr	r1, [r3, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	461a      	mov	r2, r3
 8005220:	f000 f907 	bl	8005432 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2160      	movs	r1, #96	; 0x60
 800522a:	4618      	mov	r0, r3
 800522c:	f000 f931 	bl	8005492 <TIM_ITRx_SetConfig>
      break;
 8005230:	e01b      	b.n	800526a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6859      	ldr	r1, [r3, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	461a      	mov	r2, r3
 8005240:	f000 f8c8 	bl	80053d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2140      	movs	r1, #64	; 0x40
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f921 	bl	8005492 <TIM_ITRx_SetConfig>
      break;
 8005250:	e00b      	b.n	800526a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4619      	mov	r1, r3
 800525c:	4610      	mov	r0, r2
 800525e:	f000 f918 	bl	8005492 <TIM_ITRx_SetConfig>
        break;
 8005262:	e002      	b.n	800526a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005264:	bf00      	nop
 8005266:	e000      	b.n	800526a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005268:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a34      	ldr	r2, [pc, #208]	; (80053b8 <TIM_Base_SetConfig+0xe4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00f      	beq.n	800530c <TIM_Base_SetConfig+0x38>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f2:	d00b      	beq.n	800530c <TIM_Base_SetConfig+0x38>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a31      	ldr	r2, [pc, #196]	; (80053bc <TIM_Base_SetConfig+0xe8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d007      	beq.n	800530c <TIM_Base_SetConfig+0x38>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a30      	ldr	r2, [pc, #192]	; (80053c0 <TIM_Base_SetConfig+0xec>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d003      	beq.n	800530c <TIM_Base_SetConfig+0x38>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a2f      	ldr	r2, [pc, #188]	; (80053c4 <TIM_Base_SetConfig+0xf0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d108      	bne.n	800531e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a25      	ldr	r2, [pc, #148]	; (80053b8 <TIM_Base_SetConfig+0xe4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d01b      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532c:	d017      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a22      	ldr	r2, [pc, #136]	; (80053bc <TIM_Base_SetConfig+0xe8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a21      	ldr	r2, [pc, #132]	; (80053c0 <TIM_Base_SetConfig+0xec>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00f      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a20      	ldr	r2, [pc, #128]	; (80053c4 <TIM_Base_SetConfig+0xf0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00b      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a1f      	ldr	r2, [pc, #124]	; (80053c8 <TIM_Base_SetConfig+0xf4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d007      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1e      	ldr	r2, [pc, #120]	; (80053cc <TIM_Base_SetConfig+0xf8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <TIM_Base_SetConfig+0xfc>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d108      	bne.n	8005370 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <TIM_Base_SetConfig+0xe4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d103      	bne.n	80053a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	615a      	str	r2, [r3, #20]
}
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40010000 	.word	0x40010000
 80053bc:	40000400 	.word	0x40000400
 80053c0:	40000800 	.word	0x40000800
 80053c4:	40000c00 	.word	0x40000c00
 80053c8:	40014000 	.word	0x40014000
 80053cc:	40014400 	.word	0x40014400
 80053d0:	40014800 	.word	0x40014800

080053d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f023 0201 	bic.w	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f023 030a 	bic.w	r3, r3, #10
 8005410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	621a      	str	r2, [r3, #32]
}
 8005426:	bf00      	nop
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005432:	b480      	push	{r7}
 8005434:	b087      	sub	sp, #28
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f023 0210 	bic.w	r2, r3, #16
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800545c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	031b      	lsls	r3, r3, #12
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800546e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	621a      	str	r2, [r3, #32]
}
 8005486:	bf00      	nop
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005492:	b480      	push	{r7}
 8005494:	b085      	sub	sp, #20
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f043 0307 	orr.w	r3, r3, #7
 80054b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	609a      	str	r2, [r3, #8]
}
 80054bc:	bf00      	nop
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	021a      	lsls	r2, r3, #8
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	609a      	str	r2, [r3, #8]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800551c:	2302      	movs	r3, #2
 800551e:	e050      	b.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1c      	ldr	r2, [pc, #112]	; (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d018      	beq.n	8005596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556c:	d013      	beq.n	8005596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a18      	ldr	r2, [pc, #96]	; (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00e      	beq.n	8005596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a16      	ldr	r2, [pc, #88]	; (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d009      	beq.n	8005596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a15      	ldr	r2, [pc, #84]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d004      	beq.n	8005596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a13      	ldr	r2, [pc, #76]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d10c      	bne.n	80055b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800559c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40010000 	.word	0x40010000
 80055d4:	40000400 	.word	0x40000400
 80055d8:	40000800 	.word	0x40000800
 80055dc:	40000c00 	.word	0x40000c00
 80055e0:	40014000 	.word	0x40014000

080055e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e03f      	b.n	800569e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fc fe08 	bl	8002248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2224      	movs	r2, #36	; 0x24
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800564e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f905 	bl	8005860 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b08a      	sub	sp, #40	; 0x28
 80056aa:	af02      	add	r7, sp, #8
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	4613      	mov	r3, r2
 80056b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d17c      	bne.n	80057c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <HAL_UART_Transmit+0x2c>
 80056cc:	88fb      	ldrh	r3, [r7, #6]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e075      	b.n	80057c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_UART_Transmit+0x3e>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e06e      	b.n	80057c2 <HAL_UART_Transmit+0x11c>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2221      	movs	r2, #33	; 0x21
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056fa:	f7fc ff17 	bl	800252c <HAL_GetTick>
 80056fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	88fa      	ldrh	r2, [r7, #6]
 8005704:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	88fa      	ldrh	r2, [r7, #6]
 800570a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005714:	d108      	bne.n	8005728 <HAL_UART_Transmit+0x82>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d104      	bne.n	8005728 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	e003      	b.n	8005730 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800572c:	2300      	movs	r3, #0
 800572e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005738:	e02a      	b.n	8005790 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2200      	movs	r2, #0
 8005742:	2180      	movs	r1, #128	; 0x80
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f840 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e036      	b.n	80057c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10b      	bne.n	8005772 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005768:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	3302      	adds	r3, #2
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	e007      	b.n	8005782 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	781a      	ldrb	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	3301      	adds	r3, #1
 8005780:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1cf      	bne.n	800573a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2200      	movs	r2, #0
 80057a2:	2140      	movs	r1, #64	; 0x40
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f810 	bl	80057ca <UART_WaitOnFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e006      	b.n	80057c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	e000      	b.n	80057c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057c0:	2302      	movs	r3, #2
  }
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	4613      	mov	r3, r2
 80057d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057da:	e02c      	b.n	8005836 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	d028      	beq.n	8005836 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d007      	beq.n	80057fa <UART_WaitOnFlagUntilTimeout+0x30>
 80057ea:	f7fc fe9f 	bl	800252c <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d21d      	bcs.n	8005836 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005808:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695a      	ldr	r2, [r3, #20]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0201 	bic.w	r2, r2, #1
 8005818:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2220      	movs	r2, #32
 8005826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e00f      	b.n	8005856 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4013      	ands	r3, r2
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	429a      	cmp	r2, r3
 8005844:	bf0c      	ite	eq
 8005846:	2301      	moveq	r3, #1
 8005848:	2300      	movne	r3, #0
 800584a:	b2db      	uxtb	r3, r3
 800584c:	461a      	mov	r2, r3
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	429a      	cmp	r2, r3
 8005852:	d0c3      	beq.n	80057dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005864:	b09f      	sub	sp, #124	; 0x7c
 8005866:	af00      	add	r7, sp, #0
 8005868:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800586a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005876:	68d9      	ldr	r1, [r3, #12]
 8005878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	ea40 0301 	orr.w	r3, r0, r1
 8005880:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	431a      	orrs	r2, r3
 800588c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	431a      	orrs	r2, r3
 8005892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	4313      	orrs	r3, r2
 8005898:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800589a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058a4:	f021 010c 	bic.w	r1, r1, #12
 80058a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058ae:	430b      	orrs	r3, r1
 80058b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058be:	6999      	ldr	r1, [r3, #24]
 80058c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	ea40 0301 	orr.w	r3, r0, r1
 80058c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	4bc5      	ldr	r3, [pc, #788]	; (8005be4 <UART_SetConfig+0x384>)
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d004      	beq.n	80058de <UART_SetConfig+0x7e>
 80058d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	4bc3      	ldr	r3, [pc, #780]	; (8005be8 <UART_SetConfig+0x388>)
 80058da:	429a      	cmp	r2, r3
 80058dc:	d103      	bne.n	80058e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058de:	f7fe fe41 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 80058e2:	6778      	str	r0, [r7, #116]	; 0x74
 80058e4:	e002      	b.n	80058ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058e6:	f7fe fe29 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 80058ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f4:	f040 80b6 	bne.w	8005a64 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058fa:	461c      	mov	r4, r3
 80058fc:	f04f 0500 	mov.w	r5, #0
 8005900:	4622      	mov	r2, r4
 8005902:	462b      	mov	r3, r5
 8005904:	1891      	adds	r1, r2, r2
 8005906:	6439      	str	r1, [r7, #64]	; 0x40
 8005908:	415b      	adcs	r3, r3
 800590a:	647b      	str	r3, [r7, #68]	; 0x44
 800590c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005910:	1912      	adds	r2, r2, r4
 8005912:	eb45 0303 	adc.w	r3, r5, r3
 8005916:	f04f 0000 	mov.w	r0, #0
 800591a:	f04f 0100 	mov.w	r1, #0
 800591e:	00d9      	lsls	r1, r3, #3
 8005920:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005924:	00d0      	lsls	r0, r2, #3
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	1911      	adds	r1, r2, r4
 800592c:	6639      	str	r1, [r7, #96]	; 0x60
 800592e:	416b      	adcs	r3, r5
 8005930:	667b      	str	r3, [r7, #100]	; 0x64
 8005932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	461a      	mov	r2, r3
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	1891      	adds	r1, r2, r2
 800593e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005940:	415b      	adcs	r3, r3
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005944:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005948:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800594c:	f7fa fe84 	bl	8000658 <__aeabi_uldivmod>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4ba5      	ldr	r3, [pc, #660]	; (8005bec <UART_SetConfig+0x38c>)
 8005956:	fba3 2302 	umull	r2, r3, r3, r2
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	011e      	lsls	r6, r3, #4
 800595e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005960:	461c      	mov	r4, r3
 8005962:	f04f 0500 	mov.w	r5, #0
 8005966:	4622      	mov	r2, r4
 8005968:	462b      	mov	r3, r5
 800596a:	1891      	adds	r1, r2, r2
 800596c:	6339      	str	r1, [r7, #48]	; 0x30
 800596e:	415b      	adcs	r3, r3
 8005970:	637b      	str	r3, [r7, #52]	; 0x34
 8005972:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005976:	1912      	adds	r2, r2, r4
 8005978:	eb45 0303 	adc.w	r3, r5, r3
 800597c:	f04f 0000 	mov.w	r0, #0
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	00d9      	lsls	r1, r3, #3
 8005986:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800598a:	00d0      	lsls	r0, r2, #3
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	1911      	adds	r1, r2, r4
 8005992:	65b9      	str	r1, [r7, #88]	; 0x58
 8005994:	416b      	adcs	r3, r5
 8005996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	461a      	mov	r2, r3
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	1891      	adds	r1, r2, r2
 80059a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80059a6:	415b      	adcs	r3, r3
 80059a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80059b2:	f7fa fe51 	bl	8000658 <__aeabi_uldivmod>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4b8c      	ldr	r3, [pc, #560]	; (8005bec <UART_SetConfig+0x38c>)
 80059bc:	fba3 1302 	umull	r1, r3, r3, r2
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	2164      	movs	r1, #100	; 0x64
 80059c4:	fb01 f303 	mul.w	r3, r1, r3
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	3332      	adds	r3, #50	; 0x32
 80059ce:	4a87      	ldr	r2, [pc, #540]	; (8005bec <UART_SetConfig+0x38c>)
 80059d0:	fba2 2303 	umull	r2, r3, r2, r3
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059dc:	441e      	add	r6, r3
 80059de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e0:	4618      	mov	r0, r3
 80059e2:	f04f 0100 	mov.w	r1, #0
 80059e6:	4602      	mov	r2, r0
 80059e8:	460b      	mov	r3, r1
 80059ea:	1894      	adds	r4, r2, r2
 80059ec:	623c      	str	r4, [r7, #32]
 80059ee:	415b      	adcs	r3, r3
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
 80059f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059f6:	1812      	adds	r2, r2, r0
 80059f8:	eb41 0303 	adc.w	r3, r1, r3
 80059fc:	f04f 0400 	mov.w	r4, #0
 8005a00:	f04f 0500 	mov.w	r5, #0
 8005a04:	00dd      	lsls	r5, r3, #3
 8005a06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a0a:	00d4      	lsls	r4, r2, #3
 8005a0c:	4622      	mov	r2, r4
 8005a0e:	462b      	mov	r3, r5
 8005a10:	1814      	adds	r4, r2, r0
 8005a12:	653c      	str	r4, [r7, #80]	; 0x50
 8005a14:	414b      	adcs	r3, r1
 8005a16:	657b      	str	r3, [r7, #84]	; 0x54
 8005a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	1891      	adds	r1, r2, r2
 8005a24:	61b9      	str	r1, [r7, #24]
 8005a26:	415b      	adcs	r3, r3
 8005a28:	61fb      	str	r3, [r7, #28]
 8005a2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005a32:	f7fa fe11 	bl	8000658 <__aeabi_uldivmod>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4b6c      	ldr	r3, [pc, #432]	; (8005bec <UART_SetConfig+0x38c>)
 8005a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a40:	095b      	lsrs	r3, r3, #5
 8005a42:	2164      	movs	r1, #100	; 0x64
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	3332      	adds	r3, #50	; 0x32
 8005a4e:	4a67      	ldr	r2, [pc, #412]	; (8005bec <UART_SetConfig+0x38c>)
 8005a50:	fba2 2303 	umull	r2, r3, r2, r3
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	f003 0207 	and.w	r2, r3, #7
 8005a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4432      	add	r2, r6
 8005a60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a62:	e0b9      	b.n	8005bd8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a66:	461c      	mov	r4, r3
 8005a68:	f04f 0500 	mov.w	r5, #0
 8005a6c:	4622      	mov	r2, r4
 8005a6e:	462b      	mov	r3, r5
 8005a70:	1891      	adds	r1, r2, r2
 8005a72:	6139      	str	r1, [r7, #16]
 8005a74:	415b      	adcs	r3, r3
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a7c:	1912      	adds	r2, r2, r4
 8005a7e:	eb45 0303 	adc.w	r3, r5, r3
 8005a82:	f04f 0000 	mov.w	r0, #0
 8005a86:	f04f 0100 	mov.w	r1, #0
 8005a8a:	00d9      	lsls	r1, r3, #3
 8005a8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a90:	00d0      	lsls	r0, r2, #3
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	eb12 0804 	adds.w	r8, r2, r4
 8005a9a:	eb43 0905 	adc.w	r9, r3, r5
 8005a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f04f 0100 	mov.w	r1, #0
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	008b      	lsls	r3, r1, #2
 8005ab2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ab6:	0082      	lsls	r2, r0, #2
 8005ab8:	4640      	mov	r0, r8
 8005aba:	4649      	mov	r1, r9
 8005abc:	f7fa fdcc 	bl	8000658 <__aeabi_uldivmod>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4b49      	ldr	r3, [pc, #292]	; (8005bec <UART_SetConfig+0x38c>)
 8005ac6:	fba3 2302 	umull	r2, r3, r3, r2
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	011e      	lsls	r6, r3, #4
 8005ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f04f 0100 	mov.w	r1, #0
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	1894      	adds	r4, r2, r2
 8005adc:	60bc      	str	r4, [r7, #8]
 8005ade:	415b      	adcs	r3, r3
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ae6:	1812      	adds	r2, r2, r0
 8005ae8:	eb41 0303 	adc.w	r3, r1, r3
 8005aec:	f04f 0400 	mov.w	r4, #0
 8005af0:	f04f 0500 	mov.w	r5, #0
 8005af4:	00dd      	lsls	r5, r3, #3
 8005af6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005afa:	00d4      	lsls	r4, r2, #3
 8005afc:	4622      	mov	r2, r4
 8005afe:	462b      	mov	r3, r5
 8005b00:	1814      	adds	r4, r2, r0
 8005b02:	64bc      	str	r4, [r7, #72]	; 0x48
 8005b04:	414b      	adcs	r3, r1
 8005b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f04f 0100 	mov.w	r1, #0
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	008b      	lsls	r3, r1, #2
 8005b1c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b20:	0082      	lsls	r2, r0, #2
 8005b22:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005b26:	f7fa fd97 	bl	8000658 <__aeabi_uldivmod>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4b2f      	ldr	r3, [pc, #188]	; (8005bec <UART_SetConfig+0x38c>)
 8005b30:	fba3 1302 	umull	r1, r3, r3, r2
 8005b34:	095b      	lsrs	r3, r3, #5
 8005b36:	2164      	movs	r1, #100	; 0x64
 8005b38:	fb01 f303 	mul.w	r3, r1, r3
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	3332      	adds	r3, #50	; 0x32
 8005b42:	4a2a      	ldr	r2, [pc, #168]	; (8005bec <UART_SetConfig+0x38c>)
 8005b44:	fba2 2303 	umull	r2, r3, r2, r3
 8005b48:	095b      	lsrs	r3, r3, #5
 8005b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b4e:	441e      	add	r6, r3
 8005b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b52:	4618      	mov	r0, r3
 8005b54:	f04f 0100 	mov.w	r1, #0
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	1894      	adds	r4, r2, r2
 8005b5e:	603c      	str	r4, [r7, #0]
 8005b60:	415b      	adcs	r3, r3
 8005b62:	607b      	str	r3, [r7, #4]
 8005b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b68:	1812      	adds	r2, r2, r0
 8005b6a:	eb41 0303 	adc.w	r3, r1, r3
 8005b6e:	f04f 0400 	mov.w	r4, #0
 8005b72:	f04f 0500 	mov.w	r5, #0
 8005b76:	00dd      	lsls	r5, r3, #3
 8005b78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b7c:	00d4      	lsls	r4, r2, #3
 8005b7e:	4622      	mov	r2, r4
 8005b80:	462b      	mov	r3, r5
 8005b82:	eb12 0a00 	adds.w	sl, r2, r0
 8005b86:	eb43 0b01 	adc.w	fp, r3, r1
 8005b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f04f 0100 	mov.w	r1, #0
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	008b      	lsls	r3, r1, #2
 8005b9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ba2:	0082      	lsls	r2, r0, #2
 8005ba4:	4650      	mov	r0, sl
 8005ba6:	4659      	mov	r1, fp
 8005ba8:	f7fa fd56 	bl	8000658 <__aeabi_uldivmod>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4b0e      	ldr	r3, [pc, #56]	; (8005bec <UART_SetConfig+0x38c>)
 8005bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	2164      	movs	r1, #100	; 0x64
 8005bba:	fb01 f303 	mul.w	r3, r1, r3
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	011b      	lsls	r3, r3, #4
 8005bc2:	3332      	adds	r3, #50	; 0x32
 8005bc4:	4a09      	ldr	r2, [pc, #36]	; (8005bec <UART_SetConfig+0x38c>)
 8005bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	f003 020f 	and.w	r2, r3, #15
 8005bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4432      	add	r2, r6
 8005bd6:	609a      	str	r2, [r3, #8]
}
 8005bd8:	bf00      	nop
 8005bda:	377c      	adds	r7, #124	; 0x7c
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be2:	bf00      	nop
 8005be4:	40011000 	.word	0x40011000
 8005be8:	40011400 	.word	0x40011400
 8005bec:	51eb851f 	.word	0x51eb851f

08005bf0 <__errno>:
 8005bf0:	4b01      	ldr	r3, [pc, #4]	; (8005bf8 <__errno+0x8>)
 8005bf2:	6818      	ldr	r0, [r3, #0]
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	20000010 	.word	0x20000010

08005bfc <__libc_init_array>:
 8005bfc:	b570      	push	{r4, r5, r6, lr}
 8005bfe:	4d0d      	ldr	r5, [pc, #52]	; (8005c34 <__libc_init_array+0x38>)
 8005c00:	4c0d      	ldr	r4, [pc, #52]	; (8005c38 <__libc_init_array+0x3c>)
 8005c02:	1b64      	subs	r4, r4, r5
 8005c04:	10a4      	asrs	r4, r4, #2
 8005c06:	2600      	movs	r6, #0
 8005c08:	42a6      	cmp	r6, r4
 8005c0a:	d109      	bne.n	8005c20 <__libc_init_array+0x24>
 8005c0c:	4d0b      	ldr	r5, [pc, #44]	; (8005c3c <__libc_init_array+0x40>)
 8005c0e:	4c0c      	ldr	r4, [pc, #48]	; (8005c40 <__libc_init_array+0x44>)
 8005c10:	f000 fc4e 	bl	80064b0 <_init>
 8005c14:	1b64      	subs	r4, r4, r5
 8005c16:	10a4      	asrs	r4, r4, #2
 8005c18:	2600      	movs	r6, #0
 8005c1a:	42a6      	cmp	r6, r4
 8005c1c:	d105      	bne.n	8005c2a <__libc_init_array+0x2e>
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c24:	4798      	blx	r3
 8005c26:	3601      	adds	r6, #1
 8005c28:	e7ee      	b.n	8005c08 <__libc_init_array+0xc>
 8005c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c2e:	4798      	blx	r3
 8005c30:	3601      	adds	r6, #1
 8005c32:	e7f2      	b.n	8005c1a <__libc_init_array+0x1e>
 8005c34:	08006998 	.word	0x08006998
 8005c38:	08006998 	.word	0x08006998
 8005c3c:	08006998 	.word	0x08006998
 8005c40:	0800699c 	.word	0x0800699c

08005c44 <memcpy>:
 8005c44:	440a      	add	r2, r1
 8005c46:	4291      	cmp	r1, r2
 8005c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c4c:	d100      	bne.n	8005c50 <memcpy+0xc>
 8005c4e:	4770      	bx	lr
 8005c50:	b510      	push	{r4, lr}
 8005c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c5a:	4291      	cmp	r1, r2
 8005c5c:	d1f9      	bne.n	8005c52 <memcpy+0xe>
 8005c5e:	bd10      	pop	{r4, pc}

08005c60 <memset>:
 8005c60:	4402      	add	r2, r0
 8005c62:	4603      	mov	r3, r0
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d100      	bne.n	8005c6a <memset+0xa>
 8005c68:	4770      	bx	lr
 8005c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c6e:	e7f9      	b.n	8005c64 <memset+0x4>

08005c70 <siprintf>:
 8005c70:	b40e      	push	{r1, r2, r3}
 8005c72:	b500      	push	{lr}
 8005c74:	b09c      	sub	sp, #112	; 0x70
 8005c76:	ab1d      	add	r3, sp, #116	; 0x74
 8005c78:	9002      	str	r0, [sp, #8]
 8005c7a:	9006      	str	r0, [sp, #24]
 8005c7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c80:	4809      	ldr	r0, [pc, #36]	; (8005ca8 <siprintf+0x38>)
 8005c82:	9107      	str	r1, [sp, #28]
 8005c84:	9104      	str	r1, [sp, #16]
 8005c86:	4909      	ldr	r1, [pc, #36]	; (8005cac <siprintf+0x3c>)
 8005c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c8c:	9105      	str	r1, [sp, #20]
 8005c8e:	6800      	ldr	r0, [r0, #0]
 8005c90:	9301      	str	r3, [sp, #4]
 8005c92:	a902      	add	r1, sp, #8
 8005c94:	f000 f868 	bl	8005d68 <_svfiprintf_r>
 8005c98:	9b02      	ldr	r3, [sp, #8]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	b01c      	add	sp, #112	; 0x70
 8005ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ca4:	b003      	add	sp, #12
 8005ca6:	4770      	bx	lr
 8005ca8:	20000010 	.word	0x20000010
 8005cac:	ffff0208 	.word	0xffff0208

08005cb0 <__ssputs_r>:
 8005cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb4:	688e      	ldr	r6, [r1, #8]
 8005cb6:	429e      	cmp	r6, r3
 8005cb8:	4682      	mov	sl, r0
 8005cba:	460c      	mov	r4, r1
 8005cbc:	4690      	mov	r8, r2
 8005cbe:	461f      	mov	r7, r3
 8005cc0:	d838      	bhi.n	8005d34 <__ssputs_r+0x84>
 8005cc2:	898a      	ldrh	r2, [r1, #12]
 8005cc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cc8:	d032      	beq.n	8005d30 <__ssputs_r+0x80>
 8005cca:	6825      	ldr	r5, [r4, #0]
 8005ccc:	6909      	ldr	r1, [r1, #16]
 8005cce:	eba5 0901 	sub.w	r9, r5, r1
 8005cd2:	6965      	ldr	r5, [r4, #20]
 8005cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cdc:	3301      	adds	r3, #1
 8005cde:	444b      	add	r3, r9
 8005ce0:	106d      	asrs	r5, r5, #1
 8005ce2:	429d      	cmp	r5, r3
 8005ce4:	bf38      	it	cc
 8005ce6:	461d      	movcc	r5, r3
 8005ce8:	0553      	lsls	r3, r2, #21
 8005cea:	d531      	bpl.n	8005d50 <__ssputs_r+0xa0>
 8005cec:	4629      	mov	r1, r5
 8005cee:	f000 fb39 	bl	8006364 <_malloc_r>
 8005cf2:	4606      	mov	r6, r0
 8005cf4:	b950      	cbnz	r0, 8005d0c <__ssputs_r+0x5c>
 8005cf6:	230c      	movs	r3, #12
 8005cf8:	f8ca 3000 	str.w	r3, [sl]
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d02:	81a3      	strh	r3, [r4, #12]
 8005d04:	f04f 30ff 	mov.w	r0, #4294967295
 8005d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d0c:	6921      	ldr	r1, [r4, #16]
 8005d0e:	464a      	mov	r2, r9
 8005d10:	f7ff ff98 	bl	8005c44 <memcpy>
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1e:	81a3      	strh	r3, [r4, #12]
 8005d20:	6126      	str	r6, [r4, #16]
 8005d22:	6165      	str	r5, [r4, #20]
 8005d24:	444e      	add	r6, r9
 8005d26:	eba5 0509 	sub.w	r5, r5, r9
 8005d2a:	6026      	str	r6, [r4, #0]
 8005d2c:	60a5      	str	r5, [r4, #8]
 8005d2e:	463e      	mov	r6, r7
 8005d30:	42be      	cmp	r6, r7
 8005d32:	d900      	bls.n	8005d36 <__ssputs_r+0x86>
 8005d34:	463e      	mov	r6, r7
 8005d36:	4632      	mov	r2, r6
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	4641      	mov	r1, r8
 8005d3c:	f000 faa8 	bl	8006290 <memmove>
 8005d40:	68a3      	ldr	r3, [r4, #8]
 8005d42:	6822      	ldr	r2, [r4, #0]
 8005d44:	1b9b      	subs	r3, r3, r6
 8005d46:	4432      	add	r2, r6
 8005d48:	60a3      	str	r3, [r4, #8]
 8005d4a:	6022      	str	r2, [r4, #0]
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	e7db      	b.n	8005d08 <__ssputs_r+0x58>
 8005d50:	462a      	mov	r2, r5
 8005d52:	f000 fb61 	bl	8006418 <_realloc_r>
 8005d56:	4606      	mov	r6, r0
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d1e1      	bne.n	8005d20 <__ssputs_r+0x70>
 8005d5c:	6921      	ldr	r1, [r4, #16]
 8005d5e:	4650      	mov	r0, sl
 8005d60:	f000 fab0 	bl	80062c4 <_free_r>
 8005d64:	e7c7      	b.n	8005cf6 <__ssputs_r+0x46>
	...

08005d68 <_svfiprintf_r>:
 8005d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	4698      	mov	r8, r3
 8005d6e:	898b      	ldrh	r3, [r1, #12]
 8005d70:	061b      	lsls	r3, r3, #24
 8005d72:	b09d      	sub	sp, #116	; 0x74
 8005d74:	4607      	mov	r7, r0
 8005d76:	460d      	mov	r5, r1
 8005d78:	4614      	mov	r4, r2
 8005d7a:	d50e      	bpl.n	8005d9a <_svfiprintf_r+0x32>
 8005d7c:	690b      	ldr	r3, [r1, #16]
 8005d7e:	b963      	cbnz	r3, 8005d9a <_svfiprintf_r+0x32>
 8005d80:	2140      	movs	r1, #64	; 0x40
 8005d82:	f000 faef 	bl	8006364 <_malloc_r>
 8005d86:	6028      	str	r0, [r5, #0]
 8005d88:	6128      	str	r0, [r5, #16]
 8005d8a:	b920      	cbnz	r0, 8005d96 <_svfiprintf_r+0x2e>
 8005d8c:	230c      	movs	r3, #12
 8005d8e:	603b      	str	r3, [r7, #0]
 8005d90:	f04f 30ff 	mov.w	r0, #4294967295
 8005d94:	e0d1      	b.n	8005f3a <_svfiprintf_r+0x1d2>
 8005d96:	2340      	movs	r3, #64	; 0x40
 8005d98:	616b      	str	r3, [r5, #20]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d9e:	2320      	movs	r3, #32
 8005da0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005da4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005da8:	2330      	movs	r3, #48	; 0x30
 8005daa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005f54 <_svfiprintf_r+0x1ec>
 8005dae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005db2:	f04f 0901 	mov.w	r9, #1
 8005db6:	4623      	mov	r3, r4
 8005db8:	469a      	mov	sl, r3
 8005dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dbe:	b10a      	cbz	r2, 8005dc4 <_svfiprintf_r+0x5c>
 8005dc0:	2a25      	cmp	r2, #37	; 0x25
 8005dc2:	d1f9      	bne.n	8005db8 <_svfiprintf_r+0x50>
 8005dc4:	ebba 0b04 	subs.w	fp, sl, r4
 8005dc8:	d00b      	beq.n	8005de2 <_svfiprintf_r+0x7a>
 8005dca:	465b      	mov	r3, fp
 8005dcc:	4622      	mov	r2, r4
 8005dce:	4629      	mov	r1, r5
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	f7ff ff6d 	bl	8005cb0 <__ssputs_r>
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	f000 80aa 	beq.w	8005f30 <_svfiprintf_r+0x1c8>
 8005ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dde:	445a      	add	r2, fp
 8005de0:	9209      	str	r2, [sp, #36]	; 0x24
 8005de2:	f89a 3000 	ldrb.w	r3, [sl]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80a2 	beq.w	8005f30 <_svfiprintf_r+0x1c8>
 8005dec:	2300      	movs	r3, #0
 8005dee:	f04f 32ff 	mov.w	r2, #4294967295
 8005df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005df6:	f10a 0a01 	add.w	sl, sl, #1
 8005dfa:	9304      	str	r3, [sp, #16]
 8005dfc:	9307      	str	r3, [sp, #28]
 8005dfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e02:	931a      	str	r3, [sp, #104]	; 0x68
 8005e04:	4654      	mov	r4, sl
 8005e06:	2205      	movs	r2, #5
 8005e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e0c:	4851      	ldr	r0, [pc, #324]	; (8005f54 <_svfiprintf_r+0x1ec>)
 8005e0e:	f7fa f9ef 	bl	80001f0 <memchr>
 8005e12:	9a04      	ldr	r2, [sp, #16]
 8005e14:	b9d8      	cbnz	r0, 8005e4e <_svfiprintf_r+0xe6>
 8005e16:	06d0      	lsls	r0, r2, #27
 8005e18:	bf44      	itt	mi
 8005e1a:	2320      	movmi	r3, #32
 8005e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e20:	0711      	lsls	r1, r2, #28
 8005e22:	bf44      	itt	mi
 8005e24:	232b      	movmi	r3, #43	; 0x2b
 8005e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e30:	d015      	beq.n	8005e5e <_svfiprintf_r+0xf6>
 8005e32:	9a07      	ldr	r2, [sp, #28]
 8005e34:	4654      	mov	r4, sl
 8005e36:	2000      	movs	r0, #0
 8005e38:	f04f 0c0a 	mov.w	ip, #10
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e42:	3b30      	subs	r3, #48	; 0x30
 8005e44:	2b09      	cmp	r3, #9
 8005e46:	d94e      	bls.n	8005ee6 <_svfiprintf_r+0x17e>
 8005e48:	b1b0      	cbz	r0, 8005e78 <_svfiprintf_r+0x110>
 8005e4a:	9207      	str	r2, [sp, #28]
 8005e4c:	e014      	b.n	8005e78 <_svfiprintf_r+0x110>
 8005e4e:	eba0 0308 	sub.w	r3, r0, r8
 8005e52:	fa09 f303 	lsl.w	r3, r9, r3
 8005e56:	4313      	orrs	r3, r2
 8005e58:	9304      	str	r3, [sp, #16]
 8005e5a:	46a2      	mov	sl, r4
 8005e5c:	e7d2      	b.n	8005e04 <_svfiprintf_r+0x9c>
 8005e5e:	9b03      	ldr	r3, [sp, #12]
 8005e60:	1d19      	adds	r1, r3, #4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	9103      	str	r1, [sp, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	bfbb      	ittet	lt
 8005e6a:	425b      	neglt	r3, r3
 8005e6c:	f042 0202 	orrlt.w	r2, r2, #2
 8005e70:	9307      	strge	r3, [sp, #28]
 8005e72:	9307      	strlt	r3, [sp, #28]
 8005e74:	bfb8      	it	lt
 8005e76:	9204      	strlt	r2, [sp, #16]
 8005e78:	7823      	ldrb	r3, [r4, #0]
 8005e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e7c:	d10c      	bne.n	8005e98 <_svfiprintf_r+0x130>
 8005e7e:	7863      	ldrb	r3, [r4, #1]
 8005e80:	2b2a      	cmp	r3, #42	; 0x2a
 8005e82:	d135      	bne.n	8005ef0 <_svfiprintf_r+0x188>
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	1d1a      	adds	r2, r3, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	9203      	str	r2, [sp, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	bfb8      	it	lt
 8005e90:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e94:	3402      	adds	r4, #2
 8005e96:	9305      	str	r3, [sp, #20]
 8005e98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f64 <_svfiprintf_r+0x1fc>
 8005e9c:	7821      	ldrb	r1, [r4, #0]
 8005e9e:	2203      	movs	r2, #3
 8005ea0:	4650      	mov	r0, sl
 8005ea2:	f7fa f9a5 	bl	80001f0 <memchr>
 8005ea6:	b140      	cbz	r0, 8005eba <_svfiprintf_r+0x152>
 8005ea8:	2340      	movs	r3, #64	; 0x40
 8005eaa:	eba0 000a 	sub.w	r0, r0, sl
 8005eae:	fa03 f000 	lsl.w	r0, r3, r0
 8005eb2:	9b04      	ldr	r3, [sp, #16]
 8005eb4:	4303      	orrs	r3, r0
 8005eb6:	3401      	adds	r4, #1
 8005eb8:	9304      	str	r3, [sp, #16]
 8005eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ebe:	4826      	ldr	r0, [pc, #152]	; (8005f58 <_svfiprintf_r+0x1f0>)
 8005ec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ec4:	2206      	movs	r2, #6
 8005ec6:	f7fa f993 	bl	80001f0 <memchr>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d038      	beq.n	8005f40 <_svfiprintf_r+0x1d8>
 8005ece:	4b23      	ldr	r3, [pc, #140]	; (8005f5c <_svfiprintf_r+0x1f4>)
 8005ed0:	bb1b      	cbnz	r3, 8005f1a <_svfiprintf_r+0x1b2>
 8005ed2:	9b03      	ldr	r3, [sp, #12]
 8005ed4:	3307      	adds	r3, #7
 8005ed6:	f023 0307 	bic.w	r3, r3, #7
 8005eda:	3308      	adds	r3, #8
 8005edc:	9303      	str	r3, [sp, #12]
 8005ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee0:	4433      	add	r3, r6
 8005ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee4:	e767      	b.n	8005db6 <_svfiprintf_r+0x4e>
 8005ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005eea:	460c      	mov	r4, r1
 8005eec:	2001      	movs	r0, #1
 8005eee:	e7a5      	b.n	8005e3c <_svfiprintf_r+0xd4>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	3401      	adds	r4, #1
 8005ef4:	9305      	str	r3, [sp, #20]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	f04f 0c0a 	mov.w	ip, #10
 8005efc:	4620      	mov	r0, r4
 8005efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f02:	3a30      	subs	r2, #48	; 0x30
 8005f04:	2a09      	cmp	r2, #9
 8005f06:	d903      	bls.n	8005f10 <_svfiprintf_r+0x1a8>
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0c5      	beq.n	8005e98 <_svfiprintf_r+0x130>
 8005f0c:	9105      	str	r1, [sp, #20]
 8005f0e:	e7c3      	b.n	8005e98 <_svfiprintf_r+0x130>
 8005f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f14:	4604      	mov	r4, r0
 8005f16:	2301      	movs	r3, #1
 8005f18:	e7f0      	b.n	8005efc <_svfiprintf_r+0x194>
 8005f1a:	ab03      	add	r3, sp, #12
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	462a      	mov	r2, r5
 8005f20:	4b0f      	ldr	r3, [pc, #60]	; (8005f60 <_svfiprintf_r+0x1f8>)
 8005f22:	a904      	add	r1, sp, #16
 8005f24:	4638      	mov	r0, r7
 8005f26:	f3af 8000 	nop.w
 8005f2a:	1c42      	adds	r2, r0, #1
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	d1d6      	bne.n	8005ede <_svfiprintf_r+0x176>
 8005f30:	89ab      	ldrh	r3, [r5, #12]
 8005f32:	065b      	lsls	r3, r3, #25
 8005f34:	f53f af2c 	bmi.w	8005d90 <_svfiprintf_r+0x28>
 8005f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f3a:	b01d      	add	sp, #116	; 0x74
 8005f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f40:	ab03      	add	r3, sp, #12
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	462a      	mov	r2, r5
 8005f46:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <_svfiprintf_r+0x1f8>)
 8005f48:	a904      	add	r1, sp, #16
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	f000 f87a 	bl	8006044 <_printf_i>
 8005f50:	e7eb      	b.n	8005f2a <_svfiprintf_r+0x1c2>
 8005f52:	bf00      	nop
 8005f54:	0800695c 	.word	0x0800695c
 8005f58:	08006966 	.word	0x08006966
 8005f5c:	00000000 	.word	0x00000000
 8005f60:	08005cb1 	.word	0x08005cb1
 8005f64:	08006962 	.word	0x08006962

08005f68 <_printf_common>:
 8005f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f6c:	4616      	mov	r6, r2
 8005f6e:	4699      	mov	r9, r3
 8005f70:	688a      	ldr	r2, [r1, #8]
 8005f72:	690b      	ldr	r3, [r1, #16]
 8005f74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	bfb8      	it	lt
 8005f7c:	4613      	movlt	r3, r2
 8005f7e:	6033      	str	r3, [r6, #0]
 8005f80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f84:	4607      	mov	r7, r0
 8005f86:	460c      	mov	r4, r1
 8005f88:	b10a      	cbz	r2, 8005f8e <_printf_common+0x26>
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	6033      	str	r3, [r6, #0]
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	0699      	lsls	r1, r3, #26
 8005f92:	bf42      	ittt	mi
 8005f94:	6833      	ldrmi	r3, [r6, #0]
 8005f96:	3302      	addmi	r3, #2
 8005f98:	6033      	strmi	r3, [r6, #0]
 8005f9a:	6825      	ldr	r5, [r4, #0]
 8005f9c:	f015 0506 	ands.w	r5, r5, #6
 8005fa0:	d106      	bne.n	8005fb0 <_printf_common+0x48>
 8005fa2:	f104 0a19 	add.w	sl, r4, #25
 8005fa6:	68e3      	ldr	r3, [r4, #12]
 8005fa8:	6832      	ldr	r2, [r6, #0]
 8005faa:	1a9b      	subs	r3, r3, r2
 8005fac:	42ab      	cmp	r3, r5
 8005fae:	dc26      	bgt.n	8005ffe <_printf_common+0x96>
 8005fb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fb4:	1e13      	subs	r3, r2, #0
 8005fb6:	6822      	ldr	r2, [r4, #0]
 8005fb8:	bf18      	it	ne
 8005fba:	2301      	movne	r3, #1
 8005fbc:	0692      	lsls	r2, r2, #26
 8005fbe:	d42b      	bmi.n	8006018 <_printf_common+0xb0>
 8005fc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fc4:	4649      	mov	r1, r9
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	47c0      	blx	r8
 8005fca:	3001      	adds	r0, #1
 8005fcc:	d01e      	beq.n	800600c <_printf_common+0xa4>
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	68e5      	ldr	r5, [r4, #12]
 8005fd2:	6832      	ldr	r2, [r6, #0]
 8005fd4:	f003 0306 	and.w	r3, r3, #6
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	bf08      	it	eq
 8005fdc:	1aad      	subeq	r5, r5, r2
 8005fde:	68a3      	ldr	r3, [r4, #8]
 8005fe0:	6922      	ldr	r2, [r4, #16]
 8005fe2:	bf0c      	ite	eq
 8005fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fe8:	2500      	movne	r5, #0
 8005fea:	4293      	cmp	r3, r2
 8005fec:	bfc4      	itt	gt
 8005fee:	1a9b      	subgt	r3, r3, r2
 8005ff0:	18ed      	addgt	r5, r5, r3
 8005ff2:	2600      	movs	r6, #0
 8005ff4:	341a      	adds	r4, #26
 8005ff6:	42b5      	cmp	r5, r6
 8005ff8:	d11a      	bne.n	8006030 <_printf_common+0xc8>
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	e008      	b.n	8006010 <_printf_common+0xa8>
 8005ffe:	2301      	movs	r3, #1
 8006000:	4652      	mov	r2, sl
 8006002:	4649      	mov	r1, r9
 8006004:	4638      	mov	r0, r7
 8006006:	47c0      	blx	r8
 8006008:	3001      	adds	r0, #1
 800600a:	d103      	bne.n	8006014 <_printf_common+0xac>
 800600c:	f04f 30ff 	mov.w	r0, #4294967295
 8006010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006014:	3501      	adds	r5, #1
 8006016:	e7c6      	b.n	8005fa6 <_printf_common+0x3e>
 8006018:	18e1      	adds	r1, r4, r3
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	2030      	movs	r0, #48	; 0x30
 800601e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006022:	4422      	add	r2, r4
 8006024:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006028:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800602c:	3302      	adds	r3, #2
 800602e:	e7c7      	b.n	8005fc0 <_printf_common+0x58>
 8006030:	2301      	movs	r3, #1
 8006032:	4622      	mov	r2, r4
 8006034:	4649      	mov	r1, r9
 8006036:	4638      	mov	r0, r7
 8006038:	47c0      	blx	r8
 800603a:	3001      	adds	r0, #1
 800603c:	d0e6      	beq.n	800600c <_printf_common+0xa4>
 800603e:	3601      	adds	r6, #1
 8006040:	e7d9      	b.n	8005ff6 <_printf_common+0x8e>
	...

08006044 <_printf_i>:
 8006044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006048:	460c      	mov	r4, r1
 800604a:	4691      	mov	r9, r2
 800604c:	7e27      	ldrb	r7, [r4, #24]
 800604e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006050:	2f78      	cmp	r7, #120	; 0x78
 8006052:	4680      	mov	r8, r0
 8006054:	469a      	mov	sl, r3
 8006056:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800605a:	d807      	bhi.n	800606c <_printf_i+0x28>
 800605c:	2f62      	cmp	r7, #98	; 0x62
 800605e:	d80a      	bhi.n	8006076 <_printf_i+0x32>
 8006060:	2f00      	cmp	r7, #0
 8006062:	f000 80d8 	beq.w	8006216 <_printf_i+0x1d2>
 8006066:	2f58      	cmp	r7, #88	; 0x58
 8006068:	f000 80a3 	beq.w	80061b2 <_printf_i+0x16e>
 800606c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006074:	e03a      	b.n	80060ec <_printf_i+0xa8>
 8006076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800607a:	2b15      	cmp	r3, #21
 800607c:	d8f6      	bhi.n	800606c <_printf_i+0x28>
 800607e:	a001      	add	r0, pc, #4	; (adr r0, 8006084 <_printf_i+0x40>)
 8006080:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006084:	080060dd 	.word	0x080060dd
 8006088:	080060f1 	.word	0x080060f1
 800608c:	0800606d 	.word	0x0800606d
 8006090:	0800606d 	.word	0x0800606d
 8006094:	0800606d 	.word	0x0800606d
 8006098:	0800606d 	.word	0x0800606d
 800609c:	080060f1 	.word	0x080060f1
 80060a0:	0800606d 	.word	0x0800606d
 80060a4:	0800606d 	.word	0x0800606d
 80060a8:	0800606d 	.word	0x0800606d
 80060ac:	0800606d 	.word	0x0800606d
 80060b0:	080061fd 	.word	0x080061fd
 80060b4:	08006121 	.word	0x08006121
 80060b8:	080061df 	.word	0x080061df
 80060bc:	0800606d 	.word	0x0800606d
 80060c0:	0800606d 	.word	0x0800606d
 80060c4:	0800621f 	.word	0x0800621f
 80060c8:	0800606d 	.word	0x0800606d
 80060cc:	08006121 	.word	0x08006121
 80060d0:	0800606d 	.word	0x0800606d
 80060d4:	0800606d 	.word	0x0800606d
 80060d8:	080061e7 	.word	0x080061e7
 80060dc:	680b      	ldr	r3, [r1, #0]
 80060de:	1d1a      	adds	r2, r3, #4
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	600a      	str	r2, [r1, #0]
 80060e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060ec:	2301      	movs	r3, #1
 80060ee:	e0a3      	b.n	8006238 <_printf_i+0x1f4>
 80060f0:	6825      	ldr	r5, [r4, #0]
 80060f2:	6808      	ldr	r0, [r1, #0]
 80060f4:	062e      	lsls	r6, r5, #24
 80060f6:	f100 0304 	add.w	r3, r0, #4
 80060fa:	d50a      	bpl.n	8006112 <_printf_i+0xce>
 80060fc:	6805      	ldr	r5, [r0, #0]
 80060fe:	600b      	str	r3, [r1, #0]
 8006100:	2d00      	cmp	r5, #0
 8006102:	da03      	bge.n	800610c <_printf_i+0xc8>
 8006104:	232d      	movs	r3, #45	; 0x2d
 8006106:	426d      	negs	r5, r5
 8006108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800610c:	485e      	ldr	r0, [pc, #376]	; (8006288 <_printf_i+0x244>)
 800610e:	230a      	movs	r3, #10
 8006110:	e019      	b.n	8006146 <_printf_i+0x102>
 8006112:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006116:	6805      	ldr	r5, [r0, #0]
 8006118:	600b      	str	r3, [r1, #0]
 800611a:	bf18      	it	ne
 800611c:	b22d      	sxthne	r5, r5
 800611e:	e7ef      	b.n	8006100 <_printf_i+0xbc>
 8006120:	680b      	ldr	r3, [r1, #0]
 8006122:	6825      	ldr	r5, [r4, #0]
 8006124:	1d18      	adds	r0, r3, #4
 8006126:	6008      	str	r0, [r1, #0]
 8006128:	0628      	lsls	r0, r5, #24
 800612a:	d501      	bpl.n	8006130 <_printf_i+0xec>
 800612c:	681d      	ldr	r5, [r3, #0]
 800612e:	e002      	b.n	8006136 <_printf_i+0xf2>
 8006130:	0669      	lsls	r1, r5, #25
 8006132:	d5fb      	bpl.n	800612c <_printf_i+0xe8>
 8006134:	881d      	ldrh	r5, [r3, #0]
 8006136:	4854      	ldr	r0, [pc, #336]	; (8006288 <_printf_i+0x244>)
 8006138:	2f6f      	cmp	r7, #111	; 0x6f
 800613a:	bf0c      	ite	eq
 800613c:	2308      	moveq	r3, #8
 800613e:	230a      	movne	r3, #10
 8006140:	2100      	movs	r1, #0
 8006142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006146:	6866      	ldr	r6, [r4, #4]
 8006148:	60a6      	str	r6, [r4, #8]
 800614a:	2e00      	cmp	r6, #0
 800614c:	bfa2      	ittt	ge
 800614e:	6821      	ldrge	r1, [r4, #0]
 8006150:	f021 0104 	bicge.w	r1, r1, #4
 8006154:	6021      	strge	r1, [r4, #0]
 8006156:	b90d      	cbnz	r5, 800615c <_printf_i+0x118>
 8006158:	2e00      	cmp	r6, #0
 800615a:	d04d      	beq.n	80061f8 <_printf_i+0x1b4>
 800615c:	4616      	mov	r6, r2
 800615e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006162:	fb03 5711 	mls	r7, r3, r1, r5
 8006166:	5dc7      	ldrb	r7, [r0, r7]
 8006168:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800616c:	462f      	mov	r7, r5
 800616e:	42bb      	cmp	r3, r7
 8006170:	460d      	mov	r5, r1
 8006172:	d9f4      	bls.n	800615e <_printf_i+0x11a>
 8006174:	2b08      	cmp	r3, #8
 8006176:	d10b      	bne.n	8006190 <_printf_i+0x14c>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	07df      	lsls	r7, r3, #31
 800617c:	d508      	bpl.n	8006190 <_printf_i+0x14c>
 800617e:	6923      	ldr	r3, [r4, #16]
 8006180:	6861      	ldr	r1, [r4, #4]
 8006182:	4299      	cmp	r1, r3
 8006184:	bfde      	ittt	le
 8006186:	2330      	movle	r3, #48	; 0x30
 8006188:	f806 3c01 	strble.w	r3, [r6, #-1]
 800618c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006190:	1b92      	subs	r2, r2, r6
 8006192:	6122      	str	r2, [r4, #16]
 8006194:	f8cd a000 	str.w	sl, [sp]
 8006198:	464b      	mov	r3, r9
 800619a:	aa03      	add	r2, sp, #12
 800619c:	4621      	mov	r1, r4
 800619e:	4640      	mov	r0, r8
 80061a0:	f7ff fee2 	bl	8005f68 <_printf_common>
 80061a4:	3001      	adds	r0, #1
 80061a6:	d14c      	bne.n	8006242 <_printf_i+0x1fe>
 80061a8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ac:	b004      	add	sp, #16
 80061ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b2:	4835      	ldr	r0, [pc, #212]	; (8006288 <_printf_i+0x244>)
 80061b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	680e      	ldr	r6, [r1, #0]
 80061bc:	061f      	lsls	r7, r3, #24
 80061be:	f856 5b04 	ldr.w	r5, [r6], #4
 80061c2:	600e      	str	r6, [r1, #0]
 80061c4:	d514      	bpl.n	80061f0 <_printf_i+0x1ac>
 80061c6:	07d9      	lsls	r1, r3, #31
 80061c8:	bf44      	itt	mi
 80061ca:	f043 0320 	orrmi.w	r3, r3, #32
 80061ce:	6023      	strmi	r3, [r4, #0]
 80061d0:	b91d      	cbnz	r5, 80061da <_printf_i+0x196>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	f023 0320 	bic.w	r3, r3, #32
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	2310      	movs	r3, #16
 80061dc:	e7b0      	b.n	8006140 <_printf_i+0xfc>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	f043 0320 	orr.w	r3, r3, #32
 80061e4:	6023      	str	r3, [r4, #0]
 80061e6:	2378      	movs	r3, #120	; 0x78
 80061e8:	4828      	ldr	r0, [pc, #160]	; (800628c <_printf_i+0x248>)
 80061ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061ee:	e7e3      	b.n	80061b8 <_printf_i+0x174>
 80061f0:	065e      	lsls	r6, r3, #25
 80061f2:	bf48      	it	mi
 80061f4:	b2ad      	uxthmi	r5, r5
 80061f6:	e7e6      	b.n	80061c6 <_printf_i+0x182>
 80061f8:	4616      	mov	r6, r2
 80061fa:	e7bb      	b.n	8006174 <_printf_i+0x130>
 80061fc:	680b      	ldr	r3, [r1, #0]
 80061fe:	6826      	ldr	r6, [r4, #0]
 8006200:	6960      	ldr	r0, [r4, #20]
 8006202:	1d1d      	adds	r5, r3, #4
 8006204:	600d      	str	r5, [r1, #0]
 8006206:	0635      	lsls	r5, r6, #24
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	d501      	bpl.n	8006210 <_printf_i+0x1cc>
 800620c:	6018      	str	r0, [r3, #0]
 800620e:	e002      	b.n	8006216 <_printf_i+0x1d2>
 8006210:	0671      	lsls	r1, r6, #25
 8006212:	d5fb      	bpl.n	800620c <_printf_i+0x1c8>
 8006214:	8018      	strh	r0, [r3, #0]
 8006216:	2300      	movs	r3, #0
 8006218:	6123      	str	r3, [r4, #16]
 800621a:	4616      	mov	r6, r2
 800621c:	e7ba      	b.n	8006194 <_printf_i+0x150>
 800621e:	680b      	ldr	r3, [r1, #0]
 8006220:	1d1a      	adds	r2, r3, #4
 8006222:	600a      	str	r2, [r1, #0]
 8006224:	681e      	ldr	r6, [r3, #0]
 8006226:	6862      	ldr	r2, [r4, #4]
 8006228:	2100      	movs	r1, #0
 800622a:	4630      	mov	r0, r6
 800622c:	f7f9 ffe0 	bl	80001f0 <memchr>
 8006230:	b108      	cbz	r0, 8006236 <_printf_i+0x1f2>
 8006232:	1b80      	subs	r0, r0, r6
 8006234:	6060      	str	r0, [r4, #4]
 8006236:	6863      	ldr	r3, [r4, #4]
 8006238:	6123      	str	r3, [r4, #16]
 800623a:	2300      	movs	r3, #0
 800623c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006240:	e7a8      	b.n	8006194 <_printf_i+0x150>
 8006242:	6923      	ldr	r3, [r4, #16]
 8006244:	4632      	mov	r2, r6
 8006246:	4649      	mov	r1, r9
 8006248:	4640      	mov	r0, r8
 800624a:	47d0      	blx	sl
 800624c:	3001      	adds	r0, #1
 800624e:	d0ab      	beq.n	80061a8 <_printf_i+0x164>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	079b      	lsls	r3, r3, #30
 8006254:	d413      	bmi.n	800627e <_printf_i+0x23a>
 8006256:	68e0      	ldr	r0, [r4, #12]
 8006258:	9b03      	ldr	r3, [sp, #12]
 800625a:	4298      	cmp	r0, r3
 800625c:	bfb8      	it	lt
 800625e:	4618      	movlt	r0, r3
 8006260:	e7a4      	b.n	80061ac <_printf_i+0x168>
 8006262:	2301      	movs	r3, #1
 8006264:	4632      	mov	r2, r6
 8006266:	4649      	mov	r1, r9
 8006268:	4640      	mov	r0, r8
 800626a:	47d0      	blx	sl
 800626c:	3001      	adds	r0, #1
 800626e:	d09b      	beq.n	80061a8 <_printf_i+0x164>
 8006270:	3501      	adds	r5, #1
 8006272:	68e3      	ldr	r3, [r4, #12]
 8006274:	9903      	ldr	r1, [sp, #12]
 8006276:	1a5b      	subs	r3, r3, r1
 8006278:	42ab      	cmp	r3, r5
 800627a:	dcf2      	bgt.n	8006262 <_printf_i+0x21e>
 800627c:	e7eb      	b.n	8006256 <_printf_i+0x212>
 800627e:	2500      	movs	r5, #0
 8006280:	f104 0619 	add.w	r6, r4, #25
 8006284:	e7f5      	b.n	8006272 <_printf_i+0x22e>
 8006286:	bf00      	nop
 8006288:	0800696d 	.word	0x0800696d
 800628c:	0800697e 	.word	0x0800697e

08006290 <memmove>:
 8006290:	4288      	cmp	r0, r1
 8006292:	b510      	push	{r4, lr}
 8006294:	eb01 0402 	add.w	r4, r1, r2
 8006298:	d902      	bls.n	80062a0 <memmove+0x10>
 800629a:	4284      	cmp	r4, r0
 800629c:	4623      	mov	r3, r4
 800629e:	d807      	bhi.n	80062b0 <memmove+0x20>
 80062a0:	1e43      	subs	r3, r0, #1
 80062a2:	42a1      	cmp	r1, r4
 80062a4:	d008      	beq.n	80062b8 <memmove+0x28>
 80062a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062ae:	e7f8      	b.n	80062a2 <memmove+0x12>
 80062b0:	4402      	add	r2, r0
 80062b2:	4601      	mov	r1, r0
 80062b4:	428a      	cmp	r2, r1
 80062b6:	d100      	bne.n	80062ba <memmove+0x2a>
 80062b8:	bd10      	pop	{r4, pc}
 80062ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062c2:	e7f7      	b.n	80062b4 <memmove+0x24>

080062c4 <_free_r>:
 80062c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062c6:	2900      	cmp	r1, #0
 80062c8:	d048      	beq.n	800635c <_free_r+0x98>
 80062ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ce:	9001      	str	r0, [sp, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f1a1 0404 	sub.w	r4, r1, #4
 80062d6:	bfb8      	it	lt
 80062d8:	18e4      	addlt	r4, r4, r3
 80062da:	f000 f8d3 	bl	8006484 <__malloc_lock>
 80062de:	4a20      	ldr	r2, [pc, #128]	; (8006360 <_free_r+0x9c>)
 80062e0:	9801      	ldr	r0, [sp, #4]
 80062e2:	6813      	ldr	r3, [r2, #0]
 80062e4:	4615      	mov	r5, r2
 80062e6:	b933      	cbnz	r3, 80062f6 <_free_r+0x32>
 80062e8:	6063      	str	r3, [r4, #4]
 80062ea:	6014      	str	r4, [r2, #0]
 80062ec:	b003      	add	sp, #12
 80062ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062f2:	f000 b8cd 	b.w	8006490 <__malloc_unlock>
 80062f6:	42a3      	cmp	r3, r4
 80062f8:	d90b      	bls.n	8006312 <_free_r+0x4e>
 80062fa:	6821      	ldr	r1, [r4, #0]
 80062fc:	1862      	adds	r2, r4, r1
 80062fe:	4293      	cmp	r3, r2
 8006300:	bf04      	itt	eq
 8006302:	681a      	ldreq	r2, [r3, #0]
 8006304:	685b      	ldreq	r3, [r3, #4]
 8006306:	6063      	str	r3, [r4, #4]
 8006308:	bf04      	itt	eq
 800630a:	1852      	addeq	r2, r2, r1
 800630c:	6022      	streq	r2, [r4, #0]
 800630e:	602c      	str	r4, [r5, #0]
 8006310:	e7ec      	b.n	80062ec <_free_r+0x28>
 8006312:	461a      	mov	r2, r3
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	b10b      	cbz	r3, 800631c <_free_r+0x58>
 8006318:	42a3      	cmp	r3, r4
 800631a:	d9fa      	bls.n	8006312 <_free_r+0x4e>
 800631c:	6811      	ldr	r1, [r2, #0]
 800631e:	1855      	adds	r5, r2, r1
 8006320:	42a5      	cmp	r5, r4
 8006322:	d10b      	bne.n	800633c <_free_r+0x78>
 8006324:	6824      	ldr	r4, [r4, #0]
 8006326:	4421      	add	r1, r4
 8006328:	1854      	adds	r4, r2, r1
 800632a:	42a3      	cmp	r3, r4
 800632c:	6011      	str	r1, [r2, #0]
 800632e:	d1dd      	bne.n	80062ec <_free_r+0x28>
 8006330:	681c      	ldr	r4, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	6053      	str	r3, [r2, #4]
 8006336:	4421      	add	r1, r4
 8006338:	6011      	str	r1, [r2, #0]
 800633a:	e7d7      	b.n	80062ec <_free_r+0x28>
 800633c:	d902      	bls.n	8006344 <_free_r+0x80>
 800633e:	230c      	movs	r3, #12
 8006340:	6003      	str	r3, [r0, #0]
 8006342:	e7d3      	b.n	80062ec <_free_r+0x28>
 8006344:	6825      	ldr	r5, [r4, #0]
 8006346:	1961      	adds	r1, r4, r5
 8006348:	428b      	cmp	r3, r1
 800634a:	bf04      	itt	eq
 800634c:	6819      	ldreq	r1, [r3, #0]
 800634e:	685b      	ldreq	r3, [r3, #4]
 8006350:	6063      	str	r3, [r4, #4]
 8006352:	bf04      	itt	eq
 8006354:	1949      	addeq	r1, r1, r5
 8006356:	6021      	streq	r1, [r4, #0]
 8006358:	6054      	str	r4, [r2, #4]
 800635a:	e7c7      	b.n	80062ec <_free_r+0x28>
 800635c:	b003      	add	sp, #12
 800635e:	bd30      	pop	{r4, r5, pc}
 8006360:	20000218 	.word	0x20000218

08006364 <_malloc_r>:
 8006364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006366:	1ccd      	adds	r5, r1, #3
 8006368:	f025 0503 	bic.w	r5, r5, #3
 800636c:	3508      	adds	r5, #8
 800636e:	2d0c      	cmp	r5, #12
 8006370:	bf38      	it	cc
 8006372:	250c      	movcc	r5, #12
 8006374:	2d00      	cmp	r5, #0
 8006376:	4606      	mov	r6, r0
 8006378:	db01      	blt.n	800637e <_malloc_r+0x1a>
 800637a:	42a9      	cmp	r1, r5
 800637c:	d903      	bls.n	8006386 <_malloc_r+0x22>
 800637e:	230c      	movs	r3, #12
 8006380:	6033      	str	r3, [r6, #0]
 8006382:	2000      	movs	r0, #0
 8006384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006386:	f000 f87d 	bl	8006484 <__malloc_lock>
 800638a:	4921      	ldr	r1, [pc, #132]	; (8006410 <_malloc_r+0xac>)
 800638c:	680a      	ldr	r2, [r1, #0]
 800638e:	4614      	mov	r4, r2
 8006390:	b99c      	cbnz	r4, 80063ba <_malloc_r+0x56>
 8006392:	4f20      	ldr	r7, [pc, #128]	; (8006414 <_malloc_r+0xb0>)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	b923      	cbnz	r3, 80063a2 <_malloc_r+0x3e>
 8006398:	4621      	mov	r1, r4
 800639a:	4630      	mov	r0, r6
 800639c:	f000 f862 	bl	8006464 <_sbrk_r>
 80063a0:	6038      	str	r0, [r7, #0]
 80063a2:	4629      	mov	r1, r5
 80063a4:	4630      	mov	r0, r6
 80063a6:	f000 f85d 	bl	8006464 <_sbrk_r>
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	d123      	bne.n	80063f6 <_malloc_r+0x92>
 80063ae:	230c      	movs	r3, #12
 80063b0:	6033      	str	r3, [r6, #0]
 80063b2:	4630      	mov	r0, r6
 80063b4:	f000 f86c 	bl	8006490 <__malloc_unlock>
 80063b8:	e7e3      	b.n	8006382 <_malloc_r+0x1e>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	1b5b      	subs	r3, r3, r5
 80063be:	d417      	bmi.n	80063f0 <_malloc_r+0x8c>
 80063c0:	2b0b      	cmp	r3, #11
 80063c2:	d903      	bls.n	80063cc <_malloc_r+0x68>
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	441c      	add	r4, r3
 80063c8:	6025      	str	r5, [r4, #0]
 80063ca:	e004      	b.n	80063d6 <_malloc_r+0x72>
 80063cc:	6863      	ldr	r3, [r4, #4]
 80063ce:	42a2      	cmp	r2, r4
 80063d0:	bf0c      	ite	eq
 80063d2:	600b      	streq	r3, [r1, #0]
 80063d4:	6053      	strne	r3, [r2, #4]
 80063d6:	4630      	mov	r0, r6
 80063d8:	f000 f85a 	bl	8006490 <__malloc_unlock>
 80063dc:	f104 000b 	add.w	r0, r4, #11
 80063e0:	1d23      	adds	r3, r4, #4
 80063e2:	f020 0007 	bic.w	r0, r0, #7
 80063e6:	1ac2      	subs	r2, r0, r3
 80063e8:	d0cc      	beq.n	8006384 <_malloc_r+0x20>
 80063ea:	1a1b      	subs	r3, r3, r0
 80063ec:	50a3      	str	r3, [r4, r2]
 80063ee:	e7c9      	b.n	8006384 <_malloc_r+0x20>
 80063f0:	4622      	mov	r2, r4
 80063f2:	6864      	ldr	r4, [r4, #4]
 80063f4:	e7cc      	b.n	8006390 <_malloc_r+0x2c>
 80063f6:	1cc4      	adds	r4, r0, #3
 80063f8:	f024 0403 	bic.w	r4, r4, #3
 80063fc:	42a0      	cmp	r0, r4
 80063fe:	d0e3      	beq.n	80063c8 <_malloc_r+0x64>
 8006400:	1a21      	subs	r1, r4, r0
 8006402:	4630      	mov	r0, r6
 8006404:	f000 f82e 	bl	8006464 <_sbrk_r>
 8006408:	3001      	adds	r0, #1
 800640a:	d1dd      	bne.n	80063c8 <_malloc_r+0x64>
 800640c:	e7cf      	b.n	80063ae <_malloc_r+0x4a>
 800640e:	bf00      	nop
 8006410:	20000218 	.word	0x20000218
 8006414:	2000021c 	.word	0x2000021c

08006418 <_realloc_r>:
 8006418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641a:	4607      	mov	r7, r0
 800641c:	4614      	mov	r4, r2
 800641e:	460e      	mov	r6, r1
 8006420:	b921      	cbnz	r1, 800642c <_realloc_r+0x14>
 8006422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006426:	4611      	mov	r1, r2
 8006428:	f7ff bf9c 	b.w	8006364 <_malloc_r>
 800642c:	b922      	cbnz	r2, 8006438 <_realloc_r+0x20>
 800642e:	f7ff ff49 	bl	80062c4 <_free_r>
 8006432:	4625      	mov	r5, r4
 8006434:	4628      	mov	r0, r5
 8006436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006438:	f000 f830 	bl	800649c <_malloc_usable_size_r>
 800643c:	42a0      	cmp	r0, r4
 800643e:	d20f      	bcs.n	8006460 <_realloc_r+0x48>
 8006440:	4621      	mov	r1, r4
 8006442:	4638      	mov	r0, r7
 8006444:	f7ff ff8e 	bl	8006364 <_malloc_r>
 8006448:	4605      	mov	r5, r0
 800644a:	2800      	cmp	r0, #0
 800644c:	d0f2      	beq.n	8006434 <_realloc_r+0x1c>
 800644e:	4631      	mov	r1, r6
 8006450:	4622      	mov	r2, r4
 8006452:	f7ff fbf7 	bl	8005c44 <memcpy>
 8006456:	4631      	mov	r1, r6
 8006458:	4638      	mov	r0, r7
 800645a:	f7ff ff33 	bl	80062c4 <_free_r>
 800645e:	e7e9      	b.n	8006434 <_realloc_r+0x1c>
 8006460:	4635      	mov	r5, r6
 8006462:	e7e7      	b.n	8006434 <_realloc_r+0x1c>

08006464 <_sbrk_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4d06      	ldr	r5, [pc, #24]	; (8006480 <_sbrk_r+0x1c>)
 8006468:	2300      	movs	r3, #0
 800646a:	4604      	mov	r4, r0
 800646c:	4608      	mov	r0, r1
 800646e:	602b      	str	r3, [r5, #0]
 8006470:	f7fb ff84 	bl	800237c <_sbrk>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d102      	bne.n	800647e <_sbrk_r+0x1a>
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	b103      	cbz	r3, 800647e <_sbrk_r+0x1a>
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	200003f8 	.word	0x200003f8

08006484 <__malloc_lock>:
 8006484:	4801      	ldr	r0, [pc, #4]	; (800648c <__malloc_lock+0x8>)
 8006486:	f000 b811 	b.w	80064ac <__retarget_lock_acquire_recursive>
 800648a:	bf00      	nop
 800648c:	20000400 	.word	0x20000400

08006490 <__malloc_unlock>:
 8006490:	4801      	ldr	r0, [pc, #4]	; (8006498 <__malloc_unlock+0x8>)
 8006492:	f000 b80c 	b.w	80064ae <__retarget_lock_release_recursive>
 8006496:	bf00      	nop
 8006498:	20000400 	.word	0x20000400

0800649c <_malloc_usable_size_r>:
 800649c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064a0:	1f18      	subs	r0, r3, #4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bfbc      	itt	lt
 80064a6:	580b      	ldrlt	r3, [r1, r0]
 80064a8:	18c0      	addlt	r0, r0, r3
 80064aa:	4770      	bx	lr

080064ac <__retarget_lock_acquire_recursive>:
 80064ac:	4770      	bx	lr

080064ae <__retarget_lock_release_recursive>:
 80064ae:	4770      	bx	lr

080064b0 <_init>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	bf00      	nop
 80064b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b6:	bc08      	pop	{r3}
 80064b8:	469e      	mov	lr, r3
 80064ba:	4770      	bx	lr

080064bc <_fini>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	bf00      	nop
 80064c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c2:	bc08      	pop	{r3}
 80064c4:	469e      	mov	lr, r3
 80064c6:	4770      	bx	lr
